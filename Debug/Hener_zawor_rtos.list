
Hener_zawor_rtos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002514  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  080025d4  080025d4  000125d4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800266c  0800266c  00020008  2**0
                  CONTENTS
  4 .ARM          00000000  0800266c  0800266c  00020008  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800266c  0800266c  00020008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800266c  0800266c  0001266c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002670  08002670  00012670  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000008  20000000  08002674  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000180  20000008  0800267c  00020008  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000188  0800267c  00020188  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020008  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010c4c  00000000  00000000  00020030  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002c06  00000000  00000000  00030c7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000997e  00000000  00000000  00033882  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000b80  00000000  00000000  0003d200  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000fd0  00000000  00000000  0003dd80  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00019ac3  00000000  00000000  0003ed50  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   0000d663  00000000  00000000  00058813  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0009337a  00000000  00000000  00065e76  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  000f91f0  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000236c  00000000  00000000  000f926c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000008 	.word	0x20000008
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080025bc 	.word	0x080025bc

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000000c 	.word	0x2000000c
 8000104:	080025bc 	.word	0x080025bc

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_sqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5609      	ldrsb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__gnu_thumb1_case_uqi>:
 800012c:	b402      	push	{r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0049      	lsls	r1, r1, #1
 8000134:	5c09      	ldrb	r1, [r1, r0]
 8000136:	0049      	lsls	r1, r1, #1
 8000138:	448e      	add	lr, r1
 800013a:	bc02      	pop	{r1}
 800013c:	4770      	bx	lr
 800013e:	46c0      	nop			; (mov r8, r8)

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	; 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f806 	bl	8000254 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			; (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__aeabi_idiv0>:
 8000254:	4770      	bx	lr
 8000256:	46c0      	nop			; (mov r8, r8)

08000258 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8000258:	b530      	push	{r4, r5, lr}
 800025a:	b085      	sub	sp, #20
  ADC_ChannelConfTypeDef sConfig = {0};
 800025c:	220c      	movs	r2, #12
 800025e:	2100      	movs	r1, #0
 8000260:	a801      	add	r0, sp, #4
 8000262:	f002 f9a2 	bl	80025aa <memset>
  hadc.Instance = ADC1;
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000266:	2204      	movs	r2, #4
  hadc.Instance = ADC1;
 8000268:	4c1b      	ldr	r4, [pc, #108]	; (80002d8 <MX_ADC_Init+0x80>)
 800026a:	4b1c      	ldr	r3, [pc, #112]	; (80002dc <MX_ADC_Init+0x84>)
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800026c:	6162      	str	r2, [r4, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
  hadc.Init.ContinuousConvMode = DISABLE;
  hadc.Init.DiscontinuousConvMode = DISABLE;
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800026e:	22c2      	movs	r2, #194	; 0xc2
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000270:	2501      	movs	r5, #1
  hadc.Instance = ADC1;
 8000272:	6023      	str	r3, [r4, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000274:	2300      	movs	r3, #0
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000276:	32ff      	adds	r2, #255	; 0xff
 8000278:	61e2      	str	r2, [r4, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc.Init.DMAContinuousRequests = DISABLE;
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 800027a:	0020      	movs	r0, r4
  hadc.Init.DMAContinuousRequests = DISABLE;
 800027c:	1d62      	adds	r2, r4, #5
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800027e:	6063      	str	r3, [r4, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000280:	60a3      	str	r3, [r4, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000282:	60e3      	str	r3, [r4, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000284:	6125      	str	r5, [r4, #16]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000286:	7623      	strb	r3, [r4, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000288:	7663      	strb	r3, [r4, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 800028a:	76a3      	strb	r3, [r4, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 800028c:	76e3      	strb	r3, [r4, #27]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800028e:	6223      	str	r3, [r4, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000290:	77d3      	strb	r3, [r2, #31]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000292:	62a5      	str	r5, [r4, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000294:	f000 fb46 	bl	8000924 <HAL_ADC_Init>
 8000298:	2800      	cmp	r0, #0
 800029a:	d001      	beq.n	80002a0 <MX_ADC_Init+0x48>
  {
    Error_Handler();
 800029c:	f000 f984 	bl	80005a8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80002a0:	2380      	movs	r3, #128	; 0x80
 80002a2:	015b      	lsls	r3, r3, #5
 80002a4:	9302      	str	r3, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80002a6:	2380      	movs	r3, #128	; 0x80
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80002a8:	a901      	add	r1, sp, #4
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80002aa:	055b      	lsls	r3, r3, #21
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80002ac:	0020      	movs	r0, r4
  sConfig.Channel = ADC_CHANNEL_1;
 80002ae:	9501      	str	r5, [sp, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80002b0:	9303      	str	r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80002b2:	f000 fbdd 	bl	8000a70 <HAL_ADC_ConfigChannel>
 80002b6:	2800      	cmp	r0, #0
 80002b8:	d001      	beq.n	80002be <MX_ADC_Init+0x66>
  {
    Error_Handler();
 80002ba:	f000 f975 	bl	80005a8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80002be:	2302      	movs	r3, #2
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80002c0:	a901      	add	r1, sp, #4
 80002c2:	0020      	movs	r0, r4
  sConfig.Channel = ADC_CHANNEL_2;
 80002c4:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80002c6:	f000 fbd3 	bl	8000a70 <HAL_ADC_ConfigChannel>
 80002ca:	2800      	cmp	r0, #0
 80002cc:	d001      	beq.n	80002d2 <MX_ADC_Init+0x7a>
  {
    Error_Handler();
 80002ce:	f000 f96b 	bl	80005a8 <Error_Handler>
  }

}
 80002d2:	b005      	add	sp, #20
 80002d4:	bd30      	pop	{r4, r5, pc}
 80002d6:	46c0      	nop			; (mov r8, r8)
 80002d8:	20000024 	.word	0x20000024
 80002dc:	40012400 	.word	0x40012400

080002e0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80002e0:	b510      	push	{r4, lr}
 80002e2:	0004      	movs	r4, r0
 80002e4:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002e6:	2214      	movs	r2, #20
 80002e8:	2100      	movs	r1, #0
 80002ea:	a803      	add	r0, sp, #12
 80002ec:	f002 f95d 	bl	80025aa <memset>
  if(adcHandle->Instance==ADC1)
 80002f0:	4b10      	ldr	r3, [pc, #64]	; (8000334 <HAL_ADC_MspInit+0x54>)
 80002f2:	6822      	ldr	r2, [r4, #0]
 80002f4:	429a      	cmp	r2, r3
 80002f6:	d11b      	bne.n	8000330 <HAL_ADC_MspInit+0x50>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80002f8:	2080      	movs	r0, #128	; 0x80
 80002fa:	4b0f      	ldr	r3, [pc, #60]	; (8000338 <HAL_ADC_MspInit+0x58>)
 80002fc:	0080      	lsls	r0, r0, #2
 80002fe:	6999      	ldr	r1, [r3, #24]
 8000300:	4301      	orrs	r1, r0
 8000302:	6199      	str	r1, [r3, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000304:	2180      	movs	r1, #128	; 0x80
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000306:	699a      	ldr	r2, [r3, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000308:	0289      	lsls	r1, r1, #10
    __HAL_RCC_ADC1_CLK_ENABLE();
 800030a:	4002      	ands	r2, r0
 800030c:	9201      	str	r2, [sp, #4]
 800030e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000310:	695a      	ldr	r2, [r3, #20]
    PA2     ------> ADC_IN2
    */
    GPIO_InitStruct.Pin = FAN_TACHO_Pin|LEVEL_IN_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000312:	2090      	movs	r0, #144	; 0x90
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000314:	430a      	orrs	r2, r1
 8000316:	615a      	str	r2, [r3, #20]
 8000318:	695b      	ldr	r3, [r3, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800031a:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800031c:	400b      	ands	r3, r1
 800031e:	9302      	str	r3, [sp, #8]
 8000320:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = FAN_TACHO_Pin|LEVEL_IN_Pin;
 8000322:	2306      	movs	r3, #6
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000324:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = FAN_TACHO_Pin|LEVEL_IN_Pin;
 8000326:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000328:	3b03      	subs	r3, #3
 800032a:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800032c:	f000 fc98 	bl	8000c60 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000330:	b008      	add	sp, #32
 8000332:	bd10      	pop	{r4, pc}
 8000334:	40012400 	.word	0x40012400
 8000338:	40021000 	.word	0x40021000

0800033c <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 800033c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800033e:	b08b      	sub	sp, #44	; 0x2c

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000340:	2214      	movs	r2, #20
 8000342:	2100      	movs	r1, #0
 8000344:	a805      	add	r0, sp, #20
 8000346:	f002 f930 	bl	80025aa <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800034a:	2080      	movs	r0, #128	; 0x80
 800034c:	4b3b      	ldr	r3, [pc, #236]	; (800043c <MX_GPIO_Init+0x100>)
 800034e:	0300      	lsls	r0, r0, #12
 8000350:	6959      	ldr	r1, [r3, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, OUT_1_Pin|OUT_2_Pin|OUT_3_Pin|OUT_4_Pin
 8000352:	4d3b      	ldr	r5, [pc, #236]	; (8000440 <MX_GPIO_Init+0x104>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000354:	4301      	orrs	r1, r0
 8000356:	6159      	str	r1, [r3, #20]
 8000358:	695a      	ldr	r2, [r3, #20]
  HAL_GPIO_WritePin(GPIOB, OUT_1_Pin|OUT_2_Pin|OUT_3_Pin|OUT_4_Pin
 800035a:	4f3a      	ldr	r7, [pc, #232]	; (8000444 <MX_GPIO_Init+0x108>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800035c:	4002      	ands	r2, r0
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800035e:	2080      	movs	r0, #128	; 0x80
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000360:	9201      	str	r2, [sp, #4]
 8000362:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000364:	6959      	ldr	r1, [r3, #20]
 8000366:	03c0      	lsls	r0, r0, #15
 8000368:	4301      	orrs	r1, r0
 800036a:	6159      	str	r1, [r3, #20]
 800036c:	695a      	ldr	r2, [r3, #20]
                          |OUT_5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_RESET);
 800036e:	2690      	movs	r6, #144	; 0x90
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000370:	4002      	ands	r2, r0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000372:	2080      	movs	r0, #128	; 0x80
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000374:	9202      	str	r2, [sp, #8]
 8000376:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000378:	6959      	ldr	r1, [r3, #20]
 800037a:	0280      	lsls	r0, r0, #10
 800037c:	4301      	orrs	r1, r0
 800037e:	6159      	str	r1, [r3, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000380:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000382:	695a      	ldr	r2, [r3, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000384:	02c9      	lsls	r1, r1, #11
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000386:	4002      	ands	r2, r0
 8000388:	9203      	str	r2, [sp, #12]
 800038a:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800038c:	695a      	ldr	r2, [r3, #20]
  HAL_GPIO_WritePin(GPIOB, OUT_1_Pin|OUT_2_Pin|OUT_3_Pin|OUT_4_Pin
 800038e:	0028      	movs	r0, r5
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000390:	430a      	orrs	r2, r1
 8000392:	615a      	str	r2, [r3, #20]
 8000394:	695b      	ldr	r3, [r3, #20]
  HAL_GPIO_WritePin(GPIOB, OUT_1_Pin|OUT_2_Pin|OUT_3_Pin|OUT_4_Pin
 8000396:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000398:	400b      	ands	r3, r1
 800039a:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOB, OUT_1_Pin|OUT_2_Pin|OUT_3_Pin|OUT_4_Pin
 800039c:	0039      	movs	r1, r7
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800039e:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOB, OUT_1_Pin|OUT_2_Pin|OUT_3_Pin|OUT_4_Pin
 80003a0:	f000 fd0c 	bl	8000dbc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_RESET);
 80003a4:	2180      	movs	r1, #128	; 0x80
 80003a6:	05f6      	lsls	r6, r6, #23
 80003a8:	2200      	movs	r2, #0
 80003aa:	0030      	movs	r0, r6
 80003ac:	0109      	lsls	r1, r1, #4
 80003ae:	f000 fd05 	bl	8000dbc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = ADDR_0_Pin|ADDR_1_Pin|ADDR_2_Pin;
 80003b2:	23e0      	movs	r3, #224	; 0xe0
 80003b4:	021b      	lsls	r3, r3, #8
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80003b6:	2400      	movs	r4, #0
  GPIO_InitStruct.Pin = ADDR_0_Pin|ADDR_1_Pin|ADDR_2_Pin;
 80003b8:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80003ba:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80003bc:	a905      	add	r1, sp, #20
 80003be:	4822      	ldr	r0, [pc, #136]	; (8000448 <MX_GPIO_Init+0x10c>)
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80003c0:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80003c2:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80003c4:	f000 fc4c 	bl	8000c60 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF11 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_11;
 80003c8:	4b20      	ldr	r3, [pc, #128]	; (800044c <MX_GPIO_Init+0x110>)
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80003ca:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_11;
 80003cc:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80003ce:	2303      	movs	r3, #3
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80003d0:	481f      	ldr	r0, [pc, #124]	; (8000450 <MX_GPIO_Init+0x114>)
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80003d2:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003d4:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80003d6:	f000 fc43 	bl	8000c60 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA3 PA4 PA5 PA6
                           PA7 PA8 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 80003da:	4b1e      	ldr	r3, [pc, #120]	; (8000454 <MX_GPIO_Init+0x118>)
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003dc:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 80003de:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80003e0:	2303      	movs	r3, #3
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003e2:	0030      	movs	r0, r6
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80003e4:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003e6:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003e8:	f000 fc3a 	bl	8000c60 <HAL_GPIO_Init>
  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = OUT_1_Pin|OUT_2_Pin|OUT_3_Pin|OUT_4_Pin
                          |OUT_5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80003ec:	2202      	movs	r2, #2
  GPIO_InitStruct.Pin = OUT_1_Pin|OUT_2_Pin|OUT_3_Pin|OUT_4_Pin
 80003ee:	9705      	str	r7, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003f0:	2701      	movs	r7, #1
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80003f2:	a905      	add	r1, sp, #20
 80003f4:	0028      	movs	r0, r5
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80003f6:	9207      	str	r2, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003f8:	9706      	str	r7, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003fa:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80003fc:	f000 fc30 	bl	8000c60 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15
                           PB3 PB4 PB5 PB8
                           PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 8000400:	4b15      	ldr	r3, [pc, #84]	; (8000458 <MX_GPIO_Init+0x11c>)
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_8
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000402:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 8000404:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000406:	2303      	movs	r3, #3
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000408:	0028      	movs	r0, r5
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800040a:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800040c:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800040e:	f000 fc27 	bl	8000c60 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_1_Pin;
 8000412:	2380      	movs	r3, #128	; 0x80
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LED_1_GPIO_Port, &GPIO_InitStruct);
 8000414:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin = LED_1_Pin;
 8000416:	011b      	lsls	r3, r3, #4
  HAL_GPIO_Init(LED_1_GPIO_Port, &GPIO_InitStruct);
 8000418:	0030      	movs	r0, r6
  GPIO_InitStruct.Pin = LED_1_Pin;
 800041a:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800041c:	9706      	str	r7, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800041e:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000420:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(LED_1_GPIO_Port, &GPIO_InitStruct);
 8000422:	f000 fc1d 	bl	8000c60 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = A_RDY2_Pin|A_RDY1_Pin;
 8000426:	23c0      	movs	r3, #192	; 0xc0
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000428:	a905      	add	r1, sp, #20
 800042a:	0028      	movs	r0, r5
  GPIO_InitStruct.Pin = A_RDY2_Pin|A_RDY1_Pin;
 800042c:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800042e:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000430:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000432:	f000 fc15 	bl	8000c60 <HAL_GPIO_Init>

}
 8000436:	b00b      	add	sp, #44	; 0x2c
 8000438:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800043a:	46c0      	nop			; (mov r8, r8)
 800043c:	40021000 	.word	0x40021000
 8000440:	48000400 	.word	0x48000400
 8000444:	00000c07 	.word	0x00000c07
 8000448:	48000800 	.word	0x48000800
 800044c:	00000803 	.word	0x00000803
 8000450:	48001400 	.word	0x48001400
 8000454:	000081f8 	.word	0x000081f8
 8000458:	0000f338 	.word	0x0000f338

0800045c <send_string>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void send_string(char* s)
{
 800045c:	b510      	push	{r4, lr}
 800045e:	0004      	movs	r4, r0
	extern UART_HandleTypeDef huart1;
	HAL_UART_Transmit(&huart1, (uint8_t*)s, strlen(s), 1000);
 8000460:	f7ff fe52 	bl	8000108 <strlen>
 8000464:	23fa      	movs	r3, #250	; 0xfa
 8000466:	b282      	uxth	r2, r0
 8000468:	009b      	lsls	r3, r3, #2
 800046a:	0021      	movs	r1, r4
 800046c:	4801      	ldr	r0, [pc, #4]	; (8000474 <send_string+0x18>)
 800046e:	f001 ff17 	bl	80022a0 <HAL_UART_Transmit>
}
 8000472:	bd10      	pop	{r4, pc}
 8000474:	20000100 	.word	0x20000100

08000478 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000478:	b510      	push	{r4, lr}
 switch(Received[0])
 800047a:	4c17      	ldr	r4, [pc, #92]	; (80004d8 <HAL_UART_RxCpltCallback+0x60>)
 800047c:	7820      	ldrb	r0, [r4, #0]
 800047e:	3861      	subs	r0, #97	; 0x61
 8000480:	2804      	cmp	r0, #4
 8000482:	d80c      	bhi.n	800049e <HAL_UART_RxCpltCallback+0x26>
 8000484:	4b15      	ldr	r3, [pc, #84]	; (80004dc <HAL_UART_RxCpltCallback+0x64>)
 case 'd':
	 	 GPIOB->ODR^=(1<<10);
	 	 send_string("Valve 4 changed\n\r");
	 	 break;
 case 'e':
	 	 GPIOB->ODR^=(1<<11);
 8000486:	6959      	ldr	r1, [r3, #20]
 switch(Received[0])
 8000488:	f7ff fe50 	bl	800012c <__gnu_thumb1_case_uqi>
 800048c:	19140f03 	.word	0x19140f03
 8000490:	1f          	.byte	0x1f
 8000491:	00          	.byte	0x00
	 	 GPIOB->ODR^=(1<<0);
 8000492:	2201      	movs	r2, #1
	 	 send_string("Valve 1 changed\n\r");
 8000494:	4812      	ldr	r0, [pc, #72]	; (80004e0 <HAL_UART_RxCpltCallback+0x68>)
	 	 GPIOB->ODR^=(1<<0);
 8000496:	404a      	eors	r2, r1
 8000498:	615a      	str	r2, [r3, #20]
	 	 send_string("Valve 5 changed\n\r");
 800049a:	f7ff ffdf 	bl	800045c <send_string>
 default:
	 	 break;


 }
 HAL_UART_Receive_IT(&huart1, Received, 1);
 800049e:	2201      	movs	r2, #1
 80004a0:	0021      	movs	r1, r4
 80004a2:	4810      	ldr	r0, [pc, #64]	; (80004e4 <HAL_UART_RxCpltCallback+0x6c>)
 80004a4:	f001 ffe4 	bl	8002470 <HAL_UART_Receive_IT>

}
 80004a8:	bd10      	pop	{r4, pc}
	 	 GPIOB->ODR^=(1<<1);
 80004aa:	2202      	movs	r2, #2
 80004ac:	404a      	eors	r2, r1
 80004ae:	615a      	str	r2, [r3, #20]
	 	 send_string("Valve 2 changed\n\r");
 80004b0:	480d      	ldr	r0, [pc, #52]	; (80004e8 <HAL_UART_RxCpltCallback+0x70>)
 80004b2:	e7f2      	b.n	800049a <HAL_UART_RxCpltCallback+0x22>
	 	 GPIOB->ODR^=(1<<2);
 80004b4:	2204      	movs	r2, #4
 80004b6:	404a      	eors	r2, r1
 80004b8:	615a      	str	r2, [r3, #20]
	 	 send_string("Valve 3 changed\n\r");
 80004ba:	480c      	ldr	r0, [pc, #48]	; (80004ec <HAL_UART_RxCpltCallback+0x74>)
 80004bc:	e7ed      	b.n	800049a <HAL_UART_RxCpltCallback+0x22>
	 	 GPIOB->ODR^=(1<<10);
 80004be:	2280      	movs	r2, #128	; 0x80
 80004c0:	00d2      	lsls	r2, r2, #3
 80004c2:	404a      	eors	r2, r1
 80004c4:	615a      	str	r2, [r3, #20]
	 	 send_string("Valve 4 changed\n\r");
 80004c6:	480a      	ldr	r0, [pc, #40]	; (80004f0 <HAL_UART_RxCpltCallback+0x78>)
 80004c8:	e7e7      	b.n	800049a <HAL_UART_RxCpltCallback+0x22>
	 	 GPIOB->ODR^=(1<<11);
 80004ca:	2280      	movs	r2, #128	; 0x80
 80004cc:	0112      	lsls	r2, r2, #4
 80004ce:	404a      	eors	r2, r1
 80004d0:	615a      	str	r2, [r3, #20]
	 	 send_string("Valve 5 changed\n\r");
 80004d2:	4808      	ldr	r0, [pc, #32]	; (80004f4 <HAL_UART_RxCpltCallback+0x7c>)
 80004d4:	e7e1      	b.n	800049a <HAL_UART_RxCpltCallback+0x22>
 80004d6:	46c0      	nop			; (mov r8, r8)
 80004d8:	20000064 	.word	0x20000064
 80004dc:	48000400 	.word	0x48000400
 80004e0:	080025f4 	.word	0x080025f4
 80004e4:	20000100 	.word	0x20000100
 80004e8:	08002606 	.word	0x08002606
 80004ec:	08002618 	.word	0x08002618
 80004f0:	0800262a 	.word	0x0800262a
 80004f4:	0800263c 	.word	0x0800263c

080004f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004f8:	b530      	push	{r4, r5, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004fa:	2510      	movs	r5, #16
{
 80004fc:	b099      	sub	sp, #100	; 0x64
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004fe:	2230      	movs	r2, #48	; 0x30
 8000500:	2100      	movs	r1, #0
 8000502:	a80c      	add	r0, sp, #48	; 0x30
 8000504:	f002 f851 	bl	80025aa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000508:	002a      	movs	r2, r5
 800050a:	2100      	movs	r1, #0
 800050c:	a801      	add	r0, sp, #4
 800050e:	f002 f84c 	bl	80025aa <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000512:	2218      	movs	r2, #24
 8000514:	2100      	movs	r1, #0
 8000516:	a805      	add	r0, sp, #20
 8000518:	f002 f847 	bl	80025aa <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 800051c:	2312      	movs	r3, #18
 800051e:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000520:	2380      	movs	r3, #128	; 0x80
 8000522:	021b      	lsls	r3, r3, #8
 8000524:	9315      	str	r3, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000526:	2380      	movs	r3, #128	; 0x80
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000528:	2401      	movs	r4, #1
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800052a:	950f      	str	r5, [sp, #60]	; 0x3c
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 800052c:	9511      	str	r5, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800052e:	035b      	lsls	r3, r3, #13
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000530:	3d0e      	subs	r5, #14
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000532:	a80b      	add	r0, sp, #44	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000534:	9514      	str	r5, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000536:	9316      	str	r3, [sp, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000538:	940e      	str	r4, [sp, #56]	; 0x38
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 800053a:	9410      	str	r4, [sp, #64]	; 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800053c:	f000 fc44 	bl	8000dc8 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000540:	2307      	movs	r3, #7
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000542:	9502      	str	r5, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000544:	2500      	movs	r5, #0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000546:	0021      	movs	r1, r4
 8000548:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800054a:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800054c:	9503      	str	r5, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800054e:	9504      	str	r5, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000550:	f000 fecc 	bl	80012ec <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000554:	a805      	add	r0, sp, #20
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000556:	9405      	str	r4, [sp, #20]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000558:	9507      	str	r5, [sp, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800055a:	f000 ff7f 	bl	800145c <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 800055e:	b019      	add	sp, #100	; 0x64
 8000560:	bd30      	pop	{r4, r5, pc}
	...

08000564 <main>:
{
 8000564:	b510      	push	{r4, lr}
  HAL_Init();
 8000566:	f000 f9bb 	bl	80008e0 <HAL_Init>
  SystemClock_Config();
 800056a:	f7ff ffc5 	bl	80004f8 <SystemClock_Config>
  MX_GPIO_Init();
 800056e:	f7ff fee5 	bl	800033c <MX_GPIO_Init>
  MX_TIM2_Init();
 8000572:	f000 f8c3 	bl	80006fc <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8000576:	f000 f917 	bl	80007a8 <MX_USART1_UART_Init>
  MX_ADC_Init();
 800057a:	f7ff fe6d 	bl	8000258 <MX_ADC_Init>
  HAL_UART_Receive_IT(&huart1, Received, 1);
 800057e:	2201      	movs	r2, #1
 8000580:	4902      	ldr	r1, [pc, #8]	; (800058c <main+0x28>)
 8000582:	4803      	ldr	r0, [pc, #12]	; (8000590 <main+0x2c>)
 8000584:	f001 ff74 	bl	8002470 <HAL_UART_Receive_IT>
 8000588:	e7fe      	b.n	8000588 <main+0x24>
 800058a:	46c0      	nop			; (mov r8, r8)
 800058c:	20000064 	.word	0x20000064
 8000590:	20000100 	.word	0x20000100

08000594 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM17) {
 8000594:	4b03      	ldr	r3, [pc, #12]	; (80005a4 <HAL_TIM_PeriodElapsedCallback+0x10>)
 8000596:	6802      	ldr	r2, [r0, #0]
{
 8000598:	b510      	push	{r4, lr}
  if (htim->Instance == TIM17) {
 800059a:	429a      	cmp	r2, r3
 800059c:	d101      	bne.n	80005a2 <HAL_TIM_PeriodElapsedCallback+0xe>
    HAL_IncTick();
 800059e:	f000 f9af 	bl	8000900 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80005a2:	bd10      	pop	{r4, pc}
 80005a4:	40014800 	.word	0x40014800

080005a8 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80005a8:	4770      	bx	lr
	...

080005ac <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005ac:	2001      	movs	r0, #1
 80005ae:	4b0a      	ldr	r3, [pc, #40]	; (80005d8 <HAL_MspInit+0x2c>)
{
 80005b0:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005b2:	6999      	ldr	r1, [r3, #24]
 80005b4:	4301      	orrs	r1, r0
 80005b6:	6199      	str	r1, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005b8:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005ba:	699a      	ldr	r2, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005bc:	0549      	lsls	r1, r1, #21
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005be:	4002      	ands	r2, r0
 80005c0:	9200      	str	r2, [sp, #0]
 80005c2:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005c4:	69da      	ldr	r2, [r3, #28]
 80005c6:	430a      	orrs	r2, r1
 80005c8:	61da      	str	r2, [r3, #28]
 80005ca:	69db      	ldr	r3, [r3, #28]
 80005cc:	400b      	ands	r3, r1
 80005ce:	9301      	str	r3, [sp, #4]
 80005d0:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005d2:	b002      	add	sp, #8
 80005d4:	4770      	bx	lr
 80005d6:	46c0      	nop			; (mov r8, r8)
 80005d8:	40021000 	.word	0x40021000

080005dc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005dc:	b510      	push	{r4, lr}
 80005de:	0001      	movs	r1, r0
 80005e0:	b086      	sub	sp, #24
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  /*Configure the TIM17 IRQ priority */
  HAL_NVIC_SetPriority(TIM17_IRQn, TickPriority ,0);
 80005e2:	2200      	movs	r2, #0
 80005e4:	2016      	movs	r0, #22
 80005e6:	f000 fac3 	bl	8000b70 <HAL_NVIC_SetPriority>

  /* Enable the TIM17 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM17_IRQn);
 80005ea:	2016      	movs	r0, #22
 80005ec:	f000 faea 	bl	8000bc4 <HAL_NVIC_EnableIRQ>
  /* Enable TIM17 clock */
  __HAL_RCC_TIM17_CLK_ENABLE();
 80005f0:	2080      	movs	r0, #128	; 0x80
 80005f2:	4a14      	ldr	r2, [pc, #80]	; (8000644 <HAL_InitTick+0x68>)
 80005f4:	02c0      	lsls	r0, r0, #11
 80005f6:	6991      	ldr	r1, [r2, #24]
 80005f8:	4301      	orrs	r1, r0
 80005fa:	6191      	str	r1, [r2, #24]
 80005fc:	6993      	ldr	r3, [r2, #24]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80005fe:	4669      	mov	r1, sp
  __HAL_RCC_TIM17_CLK_ENABLE();
 8000600:	4003      	ands	r3, r0
 8000602:	9301      	str	r3, [sp, #4]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000604:	a802      	add	r0, sp, #8
  __HAL_RCC_TIM17_CLK_ENABLE();
 8000606:	9b01      	ldr	r3, [sp, #4]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000608:	f000 ff0c 	bl	8001424 <HAL_RCC_GetClockConfig>

  /* Compute TIM17 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 800060c:	f000 fefa 	bl	8001404 <HAL_RCC_GetPCLK1Freq>
  /* Compute the prescaler value to have TIM17 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);

  /* Initialize TIM17 */
  htim17.Instance = TIM17;
 8000610:	4c0d      	ldr	r4, [pc, #52]	; (8000648 <HAL_InitTick+0x6c>)
 8000612:	4b0e      	ldr	r3, [pc, #56]	; (800064c <HAL_InitTick+0x70>)
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000614:	490e      	ldr	r1, [pc, #56]	; (8000650 <HAL_InitTick+0x74>)
  htim17.Instance = TIM17;
 8000616:	6023      	str	r3, [r4, #0]
  + Period = [(TIM17CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim17.Init.Period = (1000000U / 1000U) - 1U;
 8000618:	4b0e      	ldr	r3, [pc, #56]	; (8000654 <HAL_InitTick+0x78>)
 800061a:	60e3      	str	r3, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800061c:	f7ff fd90 	bl	8000140 <__udivsi3>
  htim17.Init.Prescaler = uwPrescalerValue;
  htim17.Init.ClockDivision = 0;
 8000620:	2300      	movs	r3, #0
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000622:	3801      	subs	r0, #1
  htim17.Init.Prescaler = uwPrescalerValue;
 8000624:	6060      	str	r0, [r4, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&htim17) == HAL_OK)
 8000626:	0020      	movs	r0, r4
  htim17.Init.ClockDivision = 0;
 8000628:	6123      	str	r3, [r4, #16]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 800062a:	60a3      	str	r3, [r4, #8]
  if(HAL_TIM_Base_Init(&htim17) == HAL_OK)
 800062c:	f001 f978 	bl	8001920 <HAL_TIM_Base_Init>
 8000630:	0003      	movs	r3, r0
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim17);
  }

  /* Return function status */
  return HAL_ERROR;
 8000632:	2001      	movs	r0, #1
  if(HAL_TIM_Base_Init(&htim17) == HAL_OK)
 8000634:	2b00      	cmp	r3, #0
 8000636:	d102      	bne.n	800063e <HAL_InitTick+0x62>
    return HAL_TIM_Base_Start_IT(&htim17);
 8000638:	0020      	movs	r0, r4
 800063a:	f001 f855 	bl	80016e8 <HAL_TIM_Base_Start_IT>
}
 800063e:	b006      	add	sp, #24
 8000640:	bd10      	pop	{r4, pc}
 8000642:	46c0      	nop			; (mov r8, r8)
 8000644:	40021000 	.word	0x40021000
 8000648:	20000070 	.word	0x20000070
 800064c:	40014800 	.word	0x40014800
 8000650:	000f4240 	.word	0x000f4240
 8000654:	000003e7 	.word	0x000003e7

08000658 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000658:	4770      	bx	lr

0800065a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800065a:	e7fe      	b.n	800065a <HardFault_Handler>

0800065c <SVC_Handler>:
 800065c:	4770      	bx	lr

0800065e <PendSV_Handler>:
 800065e:	4770      	bx	lr

08000660 <SysTick_Handler>:
 8000660:	4770      	bx	lr
	...

08000664 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 8000664:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8000666:	4802      	ldr	r0, [pc, #8]	; (8000670 <TIM17_IRQHandler+0xc>)
 8000668:	f001 f86d 	bl	8001746 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 800066c:	bd10      	pop	{r4, pc}
 800066e:	46c0      	nop			; (mov r8, r8)
 8000670:	20000070 	.word	0x20000070

08000674 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000674:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */


  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000676:	4802      	ldr	r0, [pc, #8]	; (8000680 <USART1_IRQHandler+0xc>)
 8000678:	f001 fb38 	bl	8001cec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  //GPIOB->ODR^=(1<<2);
  /* USER CODE END USART1_IRQn 1 */
}
 800067c:	bd10      	pop	{r4, pc}
 800067e:	46c0      	nop			; (mov r8, r8)
 8000680:	20000100 	.word	0x20000100

08000684 <SystemInit>:
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000684:	4770      	bx	lr
	...

08000688 <HAL_TIM_Base_MspInit>:
}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{

  if(tim_baseHandle->Instance==TIM2)
 8000688:	2380      	movs	r3, #128	; 0x80
 800068a:	6802      	ldr	r2, [r0, #0]
{
 800068c:	b082      	sub	sp, #8
  if(tim_baseHandle->Instance==TIM2)
 800068e:	05db      	lsls	r3, r3, #23
 8000690:	429a      	cmp	r2, r3
 8000692:	d108      	bne.n	80006a6 <HAL_TIM_Base_MspInit+0x1e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000694:	2001      	movs	r0, #1
 8000696:	4a05      	ldr	r2, [pc, #20]	; (80006ac <HAL_TIM_Base_MspInit+0x24>)
 8000698:	69d1      	ldr	r1, [r2, #28]
 800069a:	4301      	orrs	r1, r0
 800069c:	61d1      	str	r1, [r2, #28]
 800069e:	69d3      	ldr	r3, [r2, #28]
 80006a0:	4003      	ands	r3, r0
 80006a2:	9301      	str	r3, [sp, #4]
 80006a4:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80006a6:	b002      	add	sp, #8
 80006a8:	4770      	bx	lr
 80006aa:	46c0      	nop			; (mov r8, r8)
 80006ac:	40021000 	.word	0x40021000

080006b0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80006b0:	b510      	push	{r4, lr}
 80006b2:	0004      	movs	r4, r0
 80006b4:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006b6:	2214      	movs	r2, #20
 80006b8:	2100      	movs	r1, #0
 80006ba:	a801      	add	r0, sp, #4
 80006bc:	f001 ff75 	bl	80025aa <memset>
  if(timHandle->Instance==TIM2)
 80006c0:	2380      	movs	r3, #128	; 0x80
 80006c2:	6822      	ldr	r2, [r4, #0]
 80006c4:	05db      	lsls	r3, r3, #23
 80006c6:	429a      	cmp	r2, r3
 80006c8:	d113      	bne.n	80006f2 <HAL_TIM_MspPostInit+0x42>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ca:	2080      	movs	r0, #128	; 0x80
 80006cc:	4a0a      	ldr	r2, [pc, #40]	; (80006f8 <HAL_TIM_MspPostInit+0x48>)
 80006ce:	0280      	lsls	r0, r0, #10
 80006d0:	6951      	ldr	r1, [r2, #20]
 80006d2:	4301      	orrs	r1, r0
 80006d4:	6151      	str	r1, [r2, #20]
 80006d6:	6953      	ldr	r3, [r2, #20]
    GPIO_InitStruct.Pin = FAN_PWM_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
    HAL_GPIO_Init(FAN_PWM_GPIO_Port, &GPIO_InitStruct);
 80006d8:	a901      	add	r1, sp, #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006da:	4003      	ands	r3, r0
 80006dc:	9300      	str	r3, [sp, #0]
 80006de:	9b00      	ldr	r3, [sp, #0]
    HAL_GPIO_Init(FAN_PWM_GPIO_Port, &GPIO_InitStruct);
 80006e0:	2090      	movs	r0, #144	; 0x90
    GPIO_InitStruct.Pin = FAN_PWM_Pin;
 80006e2:	2301      	movs	r3, #1
    HAL_GPIO_Init(FAN_PWM_GPIO_Port, &GPIO_InitStruct);
 80006e4:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Pin = FAN_PWM_Pin;
 80006e6:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006e8:	18db      	adds	r3, r3, r3
 80006ea:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 80006ec:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(FAN_PWM_GPIO_Port, &GPIO_InitStruct);
 80006ee:	f000 fab7 	bl	8000c60 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80006f2:	b006      	add	sp, #24
 80006f4:	bd10      	pop	{r4, pc}
 80006f6:	46c0      	nop			; (mov r8, r8)
 80006f8:	40021000 	.word	0x40021000

080006fc <MX_TIM2_Init>:
{
 80006fc:	b510      	push	{r4, lr}
 80006fe:	b08e      	sub	sp, #56	; 0x38
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000700:	2210      	movs	r2, #16
 8000702:	2100      	movs	r1, #0
 8000704:	a803      	add	r0, sp, #12
 8000706:	f001 ff50 	bl	80025aa <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800070a:	2208      	movs	r2, #8
 800070c:	2100      	movs	r1, #0
 800070e:	a801      	add	r0, sp, #4
 8000710:	f001 ff4b 	bl	80025aa <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000714:	221c      	movs	r2, #28
 8000716:	2100      	movs	r1, #0
 8000718:	a807      	add	r0, sp, #28
 800071a:	f001 ff46 	bl	80025aa <memset>
  htim2.Instance = TIM2;
 800071e:	2380      	movs	r3, #128	; 0x80
 8000720:	4c20      	ldr	r4, [pc, #128]	; (80007a4 <MX_TIM2_Init+0xa8>)
 8000722:	05db      	lsls	r3, r3, #23
  htim2.Init.Period = 4294967295;
 8000724:	2201      	movs	r2, #1
  htim2.Instance = TIM2;
 8000726:	6023      	str	r3, [r4, #0]
  htim2.Init.Prescaler = 0;
 8000728:	2300      	movs	r3, #0
  htim2.Init.Period = 4294967295;
 800072a:	4252      	negs	r2, r2
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800072c:	0020      	movs	r0, r4
  htim2.Init.Prescaler = 0;
 800072e:	6063      	str	r3, [r4, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000730:	60a3      	str	r3, [r4, #8]
  htim2.Init.Period = 4294967295;
 8000732:	60e2      	str	r2, [r4, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000734:	6123      	str	r3, [r4, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000736:	61a3      	str	r3, [r4, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000738:	f001 f8f2 	bl	8001920 <HAL_TIM_Base_Init>
 800073c:	2800      	cmp	r0, #0
 800073e:	d001      	beq.n	8000744 <MX_TIM2_Init+0x48>
    Error_Handler();
 8000740:	f7ff ff32 	bl	80005a8 <Error_Handler>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000744:	2380      	movs	r3, #128	; 0x80
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000746:	a903      	add	r1, sp, #12
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000748:	015b      	lsls	r3, r3, #5
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800074a:	0020      	movs	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800074c:	9303      	str	r3, [sp, #12]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800074e:	f001 f9df 	bl	8001b10 <HAL_TIM_ConfigClockSource>
 8000752:	2800      	cmp	r0, #0
 8000754:	d001      	beq.n	800075a <MX_TIM2_Init+0x5e>
    Error_Handler();
 8000756:	f7ff ff27 	bl	80005a8 <Error_Handler>
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800075a:	0020      	movs	r0, r4
 800075c:	f001 f908 	bl	8001970 <HAL_TIM_PWM_Init>
 8000760:	2800      	cmp	r0, #0
 8000762:	d001      	beq.n	8000768 <MX_TIM2_Init+0x6c>
    Error_Handler();
 8000764:	f7ff ff20 	bl	80005a8 <Error_Handler>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000768:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800076a:	a901      	add	r1, sp, #4
 800076c:	0020      	movs	r0, r4
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800076e:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000770:	9302      	str	r3, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000772:	f001 fa63 	bl	8001c3c <HAL_TIMEx_MasterConfigSynchronization>
 8000776:	2800      	cmp	r0, #0
 8000778:	d001      	beq.n	800077e <MX_TIM2_Init+0x82>
    Error_Handler();
 800077a:	f7ff ff15 	bl	80005a8 <Error_Handler>
  sConfigOC.Pulse = 0;
 800077e:	2200      	movs	r2, #0
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000780:	2360      	movs	r3, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000782:	a907      	add	r1, sp, #28
 8000784:	0020      	movs	r0, r4
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000786:	9307      	str	r3, [sp, #28]
  sConfigOC.Pulse = 0;
 8000788:	9208      	str	r2, [sp, #32]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800078a:	9209      	str	r2, [sp, #36]	; 0x24
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800078c:	920b      	str	r2, [sp, #44]	; 0x2c
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800078e:	f001 f953 	bl	8001a38 <HAL_TIM_PWM_ConfigChannel>
 8000792:	2800      	cmp	r0, #0
 8000794:	d001      	beq.n	800079a <MX_TIM2_Init+0x9e>
    Error_Handler();
 8000796:	f7ff ff07 	bl	80005a8 <Error_Handler>
  HAL_TIM_MspPostInit(&htim2);
 800079a:	0020      	movs	r0, r4
 800079c:	f7ff ff88 	bl	80006b0 <HAL_TIM_MspPostInit>
}
 80007a0:	b00e      	add	sp, #56	; 0x38
 80007a2:	bd10      	pop	{r4, pc}
 80007a4:	200000b8 	.word	0x200000b8

080007a8 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{

  huart1.Instance = USART1;
 80007a8:	480c      	ldr	r0, [pc, #48]	; (80007dc <MX_USART1_UART_Init+0x34>)
 80007aa:	4b0d      	ldr	r3, [pc, #52]	; (80007e0 <MX_USART1_UART_Init+0x38>)
{
 80007ac:	b510      	push	{r4, lr}
  huart1.Instance = USART1;
 80007ae:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 80007b0:	23e1      	movs	r3, #225	; 0xe1
 80007b2:	025b      	lsls	r3, r3, #9
 80007b4:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 80007b6:	230c      	movs	r3, #12
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007b8:	2100      	movs	r1, #0
  huart1.Init.Mode = UART_MODE_TX_RX;
 80007ba:	6143      	str	r3, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
  if (HAL_RS485Ex_Init(&huart1, UART_DE_POLARITY_HIGH, 1, 1) != HAL_OK)
 80007bc:	3b0b      	subs	r3, #11
 80007be:	001a      	movs	r2, r3
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007c0:	6081      	str	r1, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80007c2:	60c1      	str	r1, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80007c4:	6101      	str	r1, [r0, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007c6:	6181      	str	r1, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80007c8:	61c1      	str	r1, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007ca:	6201      	str	r1, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007cc:	6241      	str	r1, [r0, #36]	; 0x24
  if (HAL_RS485Ex_Init(&huart1, UART_DE_POLARITY_HIGH, 1, 1) != HAL_OK)
 80007ce:	f001 fe7b 	bl	80024c8 <HAL_RS485Ex_Init>
 80007d2:	2800      	cmp	r0, #0
 80007d4:	d001      	beq.n	80007da <MX_USART1_UART_Init+0x32>
  {
    Error_Handler();
 80007d6:	f7ff fee7 	bl	80005a8 <Error_Handler>
  }

}
 80007da:	bd10      	pop	{r4, pc}
 80007dc:	20000100 	.word	0x20000100
 80007e0:	40013800 	.word	0x40013800

080007e4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80007e4:	b510      	push	{r4, lr}
 80007e6:	0004      	movs	r4, r0
 80007e8:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ea:	2214      	movs	r2, #20
 80007ec:	2100      	movs	r1, #0
 80007ee:	a803      	add	r0, sp, #12
 80007f0:	f001 fedb 	bl	80025aa <memset>
  if(uartHandle->Instance==USART1)
 80007f4:	4b17      	ldr	r3, [pc, #92]	; (8000854 <HAL_UART_MspInit+0x70>)
 80007f6:	6822      	ldr	r2, [r4, #0]
 80007f8:	429a      	cmp	r2, r3
 80007fa:	d128      	bne.n	800084e <HAL_UART_MspInit+0x6a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80007fc:	2080      	movs	r0, #128	; 0x80
 80007fe:	4b16      	ldr	r3, [pc, #88]	; (8000858 <HAL_UART_MspInit+0x74>)
 8000800:	01c0      	lsls	r0, r0, #7
 8000802:	6999      	ldr	r1, [r3, #24]
 8000804:	4301      	orrs	r1, r0
 8000806:	6199      	str	r1, [r3, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000808:	2180      	movs	r1, #128	; 0x80
    __HAL_RCC_USART1_CLK_ENABLE();
 800080a:	699a      	ldr	r2, [r3, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800080c:	0289      	lsls	r1, r1, #10
    __HAL_RCC_USART1_CLK_ENABLE();
 800080e:	4002      	ands	r2, r0
 8000810:	9201      	str	r2, [sp, #4]
 8000812:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000814:	695a      	ldr	r2, [r3, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000816:	2090      	movs	r0, #144	; 0x90
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000818:	430a      	orrs	r2, r1
 800081a:	615a      	str	r2, [r3, #20]
 800081c:	695b      	ldr	r3, [r3, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800081e:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000820:	400b      	ands	r3, r1
 8000822:	9302      	str	r3, [sp, #8]
 8000824:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_12;
 8000826:	23b0      	movs	r3, #176	; 0xb0
 8000828:	015b      	lsls	r3, r3, #5
 800082a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800082c:	2302      	movs	r3, #2
 800082e:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000830:	3301      	adds	r3, #1
 8000832:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000834:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8000836:	3b02      	subs	r3, #2
 8000838:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800083a:	f000 fa11 	bl	8000c60 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800083e:	2200      	movs	r2, #0
 8000840:	201b      	movs	r0, #27
 8000842:	0011      	movs	r1, r2
 8000844:	f000 f994 	bl	8000b70 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000848:	201b      	movs	r0, #27
 800084a:	f000 f9bb 	bl	8000bc4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800084e:	b008      	add	sp, #32
 8000850:	bd10      	pop	{r4, pc}
 8000852:	46c0      	nop			; (mov r8, r8)
 8000854:	40013800 	.word	0x40013800
 8000858:	40021000 	.word	0x40021000

0800085c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800085c:	4813      	ldr	r0, [pc, #76]	; (80008ac <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800085e:	4685      	mov	sp, r0

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 8000860:	4813      	ldr	r0, [pc, #76]	; (80008b0 <LoopForever+0x6>)
    LDR R1, [R0]
 8000862:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8000864:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8000866:	4a13      	ldr	r2, [pc, #76]	; (80008b4 <LoopForever+0xa>)
    CMP R1, R2
 8000868:	4291      	cmp	r1, r2
    BNE ApplicationStart
 800086a:	d105      	bne.n	8000878 <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 800086c:	4812      	ldr	r0, [pc, #72]	; (80008b8 <LoopForever+0xe>)
    LDR R1,=0x00000001
 800086e:	4913      	ldr	r1, [pc, #76]	; (80008bc <LoopForever+0x12>)
    STR R1, [R0]
 8000870:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8000872:	4813      	ldr	r0, [pc, #76]	; (80008c0 <LoopForever+0x16>)
    LDR R1,=0x00000000
 8000874:	4913      	ldr	r1, [pc, #76]	; (80008c4 <LoopForever+0x1a>)
    STR R1, [R0]
 8000876:	6001      	str	r1, [r0, #0]

08000878 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000878:	4813      	ldr	r0, [pc, #76]	; (80008c8 <LoopForever+0x1e>)
  ldr r1, =_edata
 800087a:	4914      	ldr	r1, [pc, #80]	; (80008cc <LoopForever+0x22>)
  ldr r2, =_sidata
 800087c:	4a14      	ldr	r2, [pc, #80]	; (80008d0 <LoopForever+0x26>)
  movs r3, #0
 800087e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000880:	e002      	b.n	8000888 <LoopCopyDataInit>

08000882 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000882:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000884:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000886:	3304      	adds	r3, #4

08000888 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000888:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800088a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800088c:	d3f9      	bcc.n	8000882 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800088e:	4a11      	ldr	r2, [pc, #68]	; (80008d4 <LoopForever+0x2a>)
  ldr r4, =_ebss
 8000890:	4c11      	ldr	r4, [pc, #68]	; (80008d8 <LoopForever+0x2e>)
  movs r3, #0
 8000892:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000894:	e001      	b.n	800089a <LoopFillZerobss>

08000896 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000896:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000898:	3204      	adds	r2, #4

0800089a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800089a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800089c:	d3fb      	bcc.n	8000896 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800089e:	f7ff fef1 	bl	8000684 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80008a2:	f001 fe55 	bl	8002550 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80008a6:	f7ff fe5d 	bl	8000564 <main>

080008aa <LoopForever>:

LoopForever:
    b LoopForever
 80008aa:	e7fe      	b.n	80008aa <LoopForever>
  ldr   r0, =_estack
 80008ac:	20001800 	.word	0x20001800
    LDR R0,=0x00000004
 80008b0:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 80008b4:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021018
 80008b8:	40021018 	.word	0x40021018
    LDR R1,=0x00000001
 80008bc:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 80008c0:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 80008c4:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 80008c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008cc:	20000008 	.word	0x20000008
  ldr r2, =_sidata
 80008d0:	08002674 	.word	0x08002674
  ldr r2, =_sbss
 80008d4:	20000008 	.word	0x20000008
  ldr r4, =_ebss
 80008d8:	20000188 	.word	0x20000188

080008dc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80008dc:	e7fe      	b.n	80008dc <ADC1_IRQHandler>
	...

080008e0 <HAL_Init>:
  */
HAL_StatusTypeDef HAL_Init(void)
{
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008e0:	2310      	movs	r3, #16
 80008e2:	4a06      	ldr	r2, [pc, #24]	; (80008fc <HAL_Init+0x1c>)
{
 80008e4:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008e6:	6811      	ldr	r1, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80008e8:	2000      	movs	r0, #0
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008ea:	430b      	orrs	r3, r1
 80008ec:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 80008ee:	f7ff fe75 	bl	80005dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008f2:	f7ff fe5b 	bl	80005ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 80008f6:	2000      	movs	r0, #0
 80008f8:	bd10      	pop	{r4, pc}
 80008fa:	46c0      	nop			; (mov r8, r8)
 80008fc:	40022000 	.word	0x40022000

08000900 <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000900:	4a03      	ldr	r2, [pc, #12]	; (8000910 <HAL_IncTick+0x10>)
 8000902:	4b04      	ldr	r3, [pc, #16]	; (8000914 <HAL_IncTick+0x14>)
 8000904:	6811      	ldr	r1, [r2, #0]
 8000906:	781b      	ldrb	r3, [r3, #0]
 8000908:	185b      	adds	r3, r3, r1
 800090a:	6013      	str	r3, [r2, #0]
}
 800090c:	4770      	bx	lr
 800090e:	46c0      	nop			; (mov r8, r8)
 8000910:	20000184 	.word	0x20000184
 8000914:	20000004 	.word	0x20000004

08000918 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000918:	4b01      	ldr	r3, [pc, #4]	; (8000920 <HAL_GetTick+0x8>)
 800091a:	6818      	ldr	r0, [r3, #0]
}
 800091c:	4770      	bx	lr
 800091e:	46c0      	nop			; (mov r8, r8)
 8000920:	20000184 	.word	0x20000184

08000924 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000926:	0004      	movs	r4, r0
  uint32_t tmpCFGR1 = 0U;

  /* Check ADC handle */
  if(hadc == NULL)
  {
    return HAL_ERROR;
 8000928:	2001      	movs	r0, #1
  if(hadc == NULL)
 800092a:	2c00      	cmp	r4, #0
 800092c:	d07e      	beq.n	8000a2c <HAL_ADC_Init+0x108>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800092e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000930:	2b00      	cmp	r3, #0
 8000932:	d106      	bne.n	8000942 <HAL_ADC_Init+0x1e>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000934:	0022      	movs	r2, r4
 8000936:	3234      	adds	r2, #52	; 0x34
    ADC_CLEAR_ERRORCODE(hadc);
 8000938:	63e3      	str	r3, [r4, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800093a:	0020      	movs	r0, r4
    hadc->Lock = HAL_UNLOCKED;
 800093c:	7013      	strb	r3, [r2, #0]
    HAL_ADC_MspInit(hadc);
 800093e:	f7ff fccf 	bl	80002e0 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000942:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000944:	06db      	lsls	r3, r3, #27
 8000946:	d500      	bpl.n	800094a <HAL_ADC_Init+0x26>
 8000948:	e085      	b.n	8000a56 <HAL_ADC_Init+0x132>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 800094a:	2204      	movs	r2, #4
 800094c:	6823      	ldr	r3, [r4, #0]
 800094e:	6898      	ldr	r0, [r3, #8]
 8000950:	4010      	ands	r0, r2
      (tmp_hal_status == HAL_OK)                                &&
 8000952:	d000      	beq.n	8000956 <HAL_ADC_Init+0x32>
 8000954:	e07f      	b.n	8000a56 <HAL_ADC_Init+0x132>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000956:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8000958:	4942      	ldr	r1, [pc, #264]	; (8000a64 <HAL_ADC_Init+0x140>)
 800095a:	4011      	ands	r1, r2
 800095c:	2202      	movs	r2, #2
 800095e:	430a      	orrs	r2, r1
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8000960:	2103      	movs	r1, #3
    ADC_STATE_CLR_SET(hadc->State,
 8000962:	63a2      	str	r2, [r4, #56]	; 0x38
    if (ADC_IS_ENABLE(hadc) == RESET)
 8000964:	689a      	ldr	r2, [r3, #8]
 8000966:	400a      	ands	r2, r1
 8000968:	2a01      	cmp	r2, #1
 800096a:	d105      	bne.n	8000978 <HAL_ADC_Init+0x54>
 800096c:	6819      	ldr	r1, [r3, #0]
 800096e:	4211      	tst	r1, r2
 8000970:	d10e      	bne.n	8000990 <HAL_ADC_Init+0x6c>
 8000972:	68da      	ldr	r2, [r3, #12]
 8000974:	0412      	lsls	r2, r2, #16
 8000976:	d40b      	bmi.n	8000990 <HAL_ADC_Init+0x6c>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8000978:	2118      	movs	r1, #24
 800097a:	68da      	ldr	r2, [r3, #12]
 800097c:	438a      	bics	r2, r1
 800097e:	68a1      	ldr	r1, [r4, #8]
 8000980:	430a      	orrs	r2, r1
 8000982:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8000984:	6919      	ldr	r1, [r3, #16]
 8000986:	6862      	ldr	r2, [r4, #4]
 8000988:	0089      	lsls	r1, r1, #2
 800098a:	0889      	lsrs	r1, r1, #2
 800098c:	4311      	orrs	r1, r2
 800098e:	6119      	str	r1, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8000990:	68da      	ldr	r2, [r3, #12]
 8000992:	4935      	ldr	r1, [pc, #212]	; (8000a68 <HAL_ADC_Init+0x144>)
 8000994:	400a      	ands	r2, r1
 8000996:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000998:	7e25      	ldrb	r5, [r4, #24]
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 800099a:	7e62      	ldrb	r2, [r4, #25]
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800099c:	03ad      	lsls	r5, r5, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 800099e:	03d2      	lsls	r2, r2, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80009a0:	4315      	orrs	r5, r2
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 80009a2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80009a4:	7ea1      	ldrb	r1, [r4, #26]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 80009a6:	3a01      	subs	r2, #1
 80009a8:	1e56      	subs	r6, r2, #1
 80009aa:	41b2      	sbcs	r2, r6
 80009ac:	0316      	lsls	r6, r2, #12
 80009ae:	68e2      	ldr	r2, [r4, #12]
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80009b0:	034f      	lsls	r7, r1, #13
 80009b2:	4315      	orrs	r5, r2
                 hadc->Init.DataAlign                                             |
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 80009b4:	6922      	ldr	r2, [r4, #16]
 80009b6:	432f      	orrs	r7, r5
 80009b8:	2a02      	cmp	r2, #2
 80009ba:	d100      	bne.n	80009be <HAL_ADC_Init+0x9a>
 80009bc:	2004      	movs	r0, #4
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 80009be:	1d62      	adds	r2, r4, #5
 80009c0:	7fd2      	ldrb	r2, [r2, #31]
 80009c2:	0052      	lsls	r2, r2, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 80009c4:	433a      	orrs	r2, r7
 80009c6:	4332      	orrs	r2, r6
 80009c8:	4302      	orrs	r2, r0
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80009ca:	7ee0      	ldrb	r0, [r4, #27]
 80009cc:	2801      	cmp	r0, #1
 80009ce:	d104      	bne.n	80009da <HAL_ADC_Init+0xb6>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80009d0:	2900      	cmp	r1, #0
 80009d2:	d12c      	bne.n	8000a2e <HAL_ADC_Init+0x10a>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80009d4:	2180      	movs	r1, #128	; 0x80
 80009d6:	0249      	lsls	r1, r1, #9
 80009d8:	430a      	orrs	r2, r1
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80009da:	20c2      	movs	r0, #194	; 0xc2
 80009dc:	69e1      	ldr	r1, [r4, #28]
 80009de:	30ff      	adds	r0, #255	; 0xff
 80009e0:	4281      	cmp	r1, r0
 80009e2:	d002      	beq.n	80009ea <HAL_ADC_Init+0xc6>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 80009e4:	6a20      	ldr	r0, [r4, #32]
 80009e6:	4301      	orrs	r1, r0
 80009e8:	430a      	orrs	r2, r1
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80009ea:	2080      	movs	r0, #128	; 0x80
    hadc->Instance->CFGR1 |= tmpCFGR1;
 80009ec:	68d9      	ldr	r1, [r3, #12]
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80009ee:	0540      	lsls	r0, r0, #21
    hadc->Instance->CFGR1 |= tmpCFGR1;
 80009f0:	4311      	orrs	r1, r2
 80009f2:	60d9      	str	r1, [r3, #12]
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80009f4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80009f6:	4281      	cmp	r1, r0
 80009f8:	d002      	beq.n	8000a00 <HAL_ADC_Init+0xdc>
 80009fa:	1e48      	subs	r0, r1, #1
 80009fc:	2806      	cmp	r0, #6
 80009fe:	d807      	bhi.n	8000a10 <HAL_ADC_Init+0xec>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8000a00:	2507      	movs	r5, #7
 8000a02:	6958      	ldr	r0, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8000a04:	4029      	ands	r1, r5
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8000a06:	43a8      	bics	r0, r5
 8000a08:	6158      	str	r0, [r3, #20]
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8000a0a:	6958      	ldr	r0, [r3, #20]
 8000a0c:	4301      	orrs	r1, r0
 8000a0e:	6159      	str	r1, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000a10:	68db      	ldr	r3, [r3, #12]
 8000a12:	4916      	ldr	r1, [pc, #88]	; (8000a6c <HAL_ADC_Init+0x148>)
 8000a14:	400b      	ands	r3, r1
 8000a16:	4293      	cmp	r3, r2
 8000a18:	d111      	bne.n	8000a3e <HAL_ADC_Init+0x11a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000a1a:	2000      	movs	r0, #0
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000a1c:	2203      	movs	r2, #3
      ADC_CLEAR_ERRORCODE(hadc);
 8000a1e:	63e0      	str	r0, [r4, #60]	; 0x3c
      ADC_STATE_CLR_SET(hadc->State,
 8000a20:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000a22:	4393      	bics	r3, r2
 8000a24:	001a      	movs	r2, r3
 8000a26:	2301      	movs	r3, #1
 8000a28:	4313      	orrs	r3, r2
 8000a2a:	63a3      	str	r3, [r4, #56]	; 0x38
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Return function status */
  return tmp_hal_status;
}
 8000a2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000a2e:	2120      	movs	r1, #32
 8000a30:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8000a32:	4329      	orrs	r1, r5
 8000a34:	63a1      	str	r1, [r4, #56]	; 0x38
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000a36:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8000a38:	4308      	orrs	r0, r1
 8000a3a:	63e0      	str	r0, [r4, #60]	; 0x3c
 8000a3c:	e7cd      	b.n	80009da <HAL_ADC_Init+0xb6>
      ADC_STATE_CLR_SET(hadc->State,
 8000a3e:	2212      	movs	r2, #18
 8000a40:	6ba3      	ldr	r3, [r4, #56]	; 0x38
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000a42:	2001      	movs	r0, #1
      ADC_STATE_CLR_SET(hadc->State,
 8000a44:	4393      	bics	r3, r2
 8000a46:	001a      	movs	r2, r3
 8000a48:	2310      	movs	r3, #16
 8000a4a:	4313      	orrs	r3, r2
 8000a4c:	63a3      	str	r3, [r4, #56]	; 0x38
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000a4e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000a50:	4303      	orrs	r3, r0
 8000a52:	63e3      	str	r3, [r4, #60]	; 0x3c
 8000a54:	e7ea      	b.n	8000a2c <HAL_ADC_Init+0x108>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000a56:	2310      	movs	r3, #16
 8000a58:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    tmp_hal_status = HAL_ERROR;
 8000a5a:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000a5c:	4313      	orrs	r3, r2
 8000a5e:	63a3      	str	r3, [r4, #56]	; 0x38
 8000a60:	e7e4      	b.n	8000a2c <HAL_ADC_Init+0x108>
 8000a62:	46c0      	nop			; (mov r8, r8)
 8000a64:	fffffefd 	.word	0xfffffefd
 8000a68:	fffe0219 	.word	0xfffe0219
 8000a6c:	833fffe7 	.word	0x833fffe7

08000a70 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000a70:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  __IO uint32_t wait_loop_index = 0U;
 8000a72:	2200      	movs	r2, #0
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000a74:	0004      	movs	r4, r0
  __IO uint32_t wait_loop_index = 0U;
 8000a76:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 8000a78:	3434      	adds	r4, #52	; 0x34
 8000a7a:	7822      	ldrb	r2, [r4, #0]
{
 8000a7c:	0003      	movs	r3, r0
  __HAL_LOCK(hadc);
 8000a7e:	2002      	movs	r0, #2
 8000a80:	2a01      	cmp	r2, #1
 8000a82:	d02b      	beq.n	8000adc <HAL_ADC_ConfigChannel+0x6c>
 8000a84:	2201      	movs	r2, #1
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000a86:	681d      	ldr	r5, [r3, #0]
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000a88:	6ade      	ldr	r6, [r3, #44]	; 0x2c
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000a8a:	68a8      	ldr	r0, [r5, #8]
  __HAL_LOCK(hadc);
 8000a8c:	7022      	strb	r2, [r4, #0]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000a8e:	0740      	lsls	r0, r0, #29
 8000a90:	d45a      	bmi.n	8000b48 <HAL_ADC_ConfigChannel+0xd8>
 8000a92:	680b      	ldr	r3, [r1, #0]
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8000a94:	482f      	ldr	r0, [pc, #188]	; (8000b54 <HAL_ADC_ConfigChannel+0xe4>)
 8000a96:	001f      	movs	r7, r3
 8000a98:	4684      	mov	ip, r0
 8000a9a:	6848      	ldr	r0, [r1, #4]
 8000a9c:	409a      	lsls	r2, r3
 8000a9e:	3f10      	subs	r7, #16
 8000aa0:	4560      	cmp	r0, ip
 8000aa2:	d03b      	beq.n	8000b1c <HAL_ADC_ConfigChannel+0xac>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8000aa4:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 8000aa6:	4310      	orrs	r0, r2
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000aa8:	2280      	movs	r2, #128	; 0x80
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8000aaa:	62a8      	str	r0, [r5, #40]	; 0x28
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000aac:	0552      	lsls	r2, r2, #21
 8000aae:	4296      	cmp	r6, r2
 8000ab0:	d00f      	beq.n	8000ad2 <HAL_ADC_ConfigChannel+0x62>
 8000ab2:	3e01      	subs	r6, #1
 8000ab4:	2e06      	cmp	r6, #6
 8000ab6:	d90c      	bls.n	8000ad2 <HAL_ADC_ConfigChannel+0x62>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8000ab8:	688a      	ldr	r2, [r1, #8]
 8000aba:	2107      	movs	r1, #7
 8000abc:	6968      	ldr	r0, [r5, #20]
 8000abe:	4008      	ands	r0, r1
 8000ac0:	4282      	cmp	r2, r0
 8000ac2:	d006      	beq.n	8000ad2 <HAL_ADC_ConfigChannel+0x62>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8000ac4:	6968      	ldr	r0, [r5, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8000ac6:	400a      	ands	r2, r1
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8000ac8:	4388      	bics	r0, r1
 8000aca:	6168      	str	r0, [r5, #20]
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8000acc:	6968      	ldr	r0, [r5, #20]
 8000ace:	4302      	orrs	r2, r0
 8000ad0:	616a      	str	r2, [r5, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8000ad2:	2f02      	cmp	r7, #2
 8000ad4:	d903      	bls.n	8000ade <HAL_ADC_ConfigChannel+0x6e>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ad6:	2000      	movs	r0, #0
    
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000ad8:	2300      	movs	r3, #0
 8000ada:	7023      	strb	r3, [r4, #0]
  
  /* Return function status */
  return tmp_hal_status;
}
 8000adc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8000ade:	4a1e      	ldr	r2, [pc, #120]	; (8000b58 <HAL_ADC_ConfigChannel+0xe8>)
 8000ae0:	2080      	movs	r0, #128	; 0x80
 8000ae2:	6811      	ldr	r1, [r2, #0]
 8000ae4:	2b10      	cmp	r3, #16
 8000ae6:	d015      	beq.n	8000b14 <HAL_ADC_ConfigChannel+0xa4>
 8000ae8:	2b11      	cmp	r3, #17
 8000aea:	d115      	bne.n	8000b18 <HAL_ADC_ConfigChannel+0xa8>
 8000aec:	03c0      	lsls	r0, r0, #15
 8000aee:	4301      	orrs	r1, r0
 8000af0:	6011      	str	r1, [r2, #0]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000af2:	2b10      	cmp	r3, #16
 8000af4:	d1ef      	bne.n	8000ad6 <HAL_ADC_ConfigChannel+0x66>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000af6:	4b19      	ldr	r3, [pc, #100]	; (8000b5c <HAL_ADC_ConfigChannel+0xec>)
 8000af8:	4919      	ldr	r1, [pc, #100]	; (8000b60 <HAL_ADC_ConfigChannel+0xf0>)
 8000afa:	6818      	ldr	r0, [r3, #0]
 8000afc:	f7ff fb20 	bl	8000140 <__udivsi3>
 8000b00:	230a      	movs	r3, #10
 8000b02:	4358      	muls	r0, r3
 8000b04:	9001      	str	r0, [sp, #4]
          while(wait_loop_index != 0U)
 8000b06:	9b01      	ldr	r3, [sp, #4]
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d0e4      	beq.n	8000ad6 <HAL_ADC_ConfigChannel+0x66>
            wait_loop_index--;
 8000b0c:	9b01      	ldr	r3, [sp, #4]
 8000b0e:	3b01      	subs	r3, #1
 8000b10:	9301      	str	r3, [sp, #4]
 8000b12:	e7f8      	b.n	8000b06 <HAL_ADC_ConfigChannel+0x96>
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8000b14:	0400      	lsls	r0, r0, #16
 8000b16:	e7ea      	b.n	8000aee <HAL_ADC_ConfigChannel+0x7e>
 8000b18:	0440      	lsls	r0, r0, #17
 8000b1a:	e7e8      	b.n	8000aee <HAL_ADC_ConfigChannel+0x7e>
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8000b1c:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 8000b1e:	4391      	bics	r1, r2
 8000b20:	62a9      	str	r1, [r5, #40]	; 0x28
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8000b22:	2f02      	cmp	r7, #2
 8000b24:	d8d7      	bhi.n	8000ad6 <HAL_ADC_ConfigChannel+0x66>
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8000b26:	4a0c      	ldr	r2, [pc, #48]	; (8000b58 <HAL_ADC_ConfigChannel+0xe8>)
 8000b28:	6811      	ldr	r1, [r2, #0]
 8000b2a:	2b10      	cmp	r3, #16
 8000b2c:	d00a      	beq.n	8000b44 <HAL_ADC_ConfigChannel+0xd4>
 8000b2e:	3b11      	subs	r3, #17
 8000b30:	1e58      	subs	r0, r3, #1
 8000b32:	4183      	sbcs	r3, r0
 8000b34:	480b      	ldr	r0, [pc, #44]	; (8000b64 <HAL_ADC_ConfigChannel+0xf4>)
 8000b36:	425b      	negs	r3, r3
 8000b38:	4003      	ands	r3, r0
 8000b3a:	480b      	ldr	r0, [pc, #44]	; (8000b68 <HAL_ADC_ConfigChannel+0xf8>)
 8000b3c:	181b      	adds	r3, r3, r0
 8000b3e:	400b      	ands	r3, r1
 8000b40:	6013      	str	r3, [r2, #0]
 8000b42:	e7c8      	b.n	8000ad6 <HAL_ADC_ConfigChannel+0x66>
 8000b44:	4b09      	ldr	r3, [pc, #36]	; (8000b6c <HAL_ADC_ConfigChannel+0xfc>)
 8000b46:	e7fa      	b.n	8000b3e <HAL_ADC_ConfigChannel+0xce>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000b48:	2120      	movs	r1, #32
 8000b4a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8000b4c:	4301      	orrs	r1, r0
 8000b4e:	6399      	str	r1, [r3, #56]	; 0x38
    tmp_hal_status = HAL_ERROR;
 8000b50:	0010      	movs	r0, r2
 8000b52:	e7c1      	b.n	8000ad8 <HAL_ADC_ConfigChannel+0x68>
 8000b54:	00001001 	.word	0x00001001
 8000b58:	40012708 	.word	0x40012708
 8000b5c:	20000000 	.word	0x20000000
 8000b60:	000f4240 	.word	0x000f4240
 8000b64:	ff400000 	.word	0xff400000
 8000b68:	ffbfffff 	.word	0xffbfffff
 8000b6c:	ff7fffff 	.word	0xff7fffff

08000b70 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b70:	b530      	push	{r4, r5, lr}
 8000b72:	25ff      	movs	r5, #255	; 0xff
 8000b74:	2403      	movs	r4, #3
 8000b76:	002a      	movs	r2, r5
 8000b78:	b2c3      	uxtb	r3, r0
 8000b7a:	401c      	ands	r4, r3
 8000b7c:	00e4      	lsls	r4, r4, #3
 8000b7e:	40a2      	lsls	r2, r4
 8000b80:	0189      	lsls	r1, r1, #6
 8000b82:	4029      	ands	r1, r5
 8000b84:	43d2      	mvns	r2, r2
 8000b86:	40a1      	lsls	r1, r4
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8000b88:	2800      	cmp	r0, #0
 8000b8a:	db0a      	blt.n	8000ba2 <HAL_NVIC_SetPriority+0x32>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b8c:	24c0      	movs	r4, #192	; 0xc0
 8000b8e:	4b0b      	ldr	r3, [pc, #44]	; (8000bbc <HAL_NVIC_SetPriority+0x4c>)
 8000b90:	0880      	lsrs	r0, r0, #2
 8000b92:	0080      	lsls	r0, r0, #2
 8000b94:	18c0      	adds	r0, r0, r3
 8000b96:	00a4      	lsls	r4, r4, #2
 8000b98:	5903      	ldr	r3, [r0, r4]
 8000b9a:	401a      	ands	r2, r3
 8000b9c:	4311      	orrs	r1, r2
 8000b9e:	5101      	str	r1, [r0, r4]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 8000ba0:	bd30      	pop	{r4, r5, pc}
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ba2:	200f      	movs	r0, #15
 8000ba4:	4003      	ands	r3, r0
 8000ba6:	3b08      	subs	r3, #8
 8000ba8:	4805      	ldr	r0, [pc, #20]	; (8000bc0 <HAL_NVIC_SetPriority+0x50>)
 8000baa:	089b      	lsrs	r3, r3, #2
 8000bac:	009b      	lsls	r3, r3, #2
 8000bae:	181b      	adds	r3, r3, r0
 8000bb0:	69d8      	ldr	r0, [r3, #28]
 8000bb2:	4002      	ands	r2, r0
 8000bb4:	4311      	orrs	r1, r2
 8000bb6:	61d9      	str	r1, [r3, #28]
 8000bb8:	e7f2      	b.n	8000ba0 <HAL_NVIC_SetPriority+0x30>
 8000bba:	46c0      	nop			; (mov r8, r8)
 8000bbc:	e000e100 	.word	0xe000e100
 8000bc0:	e000ed00 	.word	0xe000ed00

08000bc4 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000bc4:	2800      	cmp	r0, #0
 8000bc6:	db05      	blt.n	8000bd4 <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bc8:	231f      	movs	r3, #31
 8000bca:	4018      	ands	r0, r3
 8000bcc:	3b1e      	subs	r3, #30
 8000bce:	4083      	lsls	r3, r0
 8000bd0:	4a01      	ldr	r2, [pc, #4]	; (8000bd8 <HAL_NVIC_EnableIRQ+0x14>)
 8000bd2:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000bd4:	4770      	bx	lr
 8000bd6:	46c0      	nop			; (mov r8, r8)
 8000bd8:	e000e100 	.word	0xe000e100

08000bdc <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000bdc:	b530      	push	{r4, r5, lr}
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000bde:	1c85      	adds	r5, r0, #2
 8000be0:	7feb      	ldrb	r3, [r5, #31]
 8000be2:	1c44      	adds	r4, r0, #1
 8000be4:	2b02      	cmp	r3, #2
 8000be6:	d005      	beq.n	8000bf4 <HAL_DMA_Abort+0x18>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000be8:	2304      	movs	r3, #4
 8000bea:	6383      	str	r3, [r0, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000bec:	2300      	movs	r3, #0
    
    return HAL_ERROR;
 8000bee:	2001      	movs	r0, #1
    __HAL_UNLOCK(hdma);
 8000bf0:	77e3      	strb	r3, [r4, #31]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
  
  return HAL_OK;
}
 8000bf2:	bd30      	pop	{r4, r5, pc}
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000bf4:	210e      	movs	r1, #14
 8000bf6:	6803      	ldr	r3, [r0, #0]
 8000bf8:	681a      	ldr	r2, [r3, #0]
 8000bfa:	438a      	bics	r2, r1
 8000bfc:	601a      	str	r2, [r3, #0]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000bfe:	2201      	movs	r2, #1
 8000c00:	6819      	ldr	r1, [r3, #0]
 8000c02:	4391      	bics	r1, r2
 8000c04:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000c06:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8000c08:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8000c0a:	0010      	movs	r0, r2
 8000c0c:	4088      	lsls	r0, r1
 8000c0e:	6058      	str	r0, [r3, #4]
  __HAL_UNLOCK(hdma);
 8000c10:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY; 
 8000c12:	77ea      	strb	r2, [r5, #31]
  __HAL_UNLOCK(hdma);
 8000c14:	77e0      	strb	r0, [r4, #31]
  return HAL_OK;
 8000c16:	e7ec      	b.n	8000bf2 <HAL_DMA_Abort+0x16>

08000c18 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000c18:	b570      	push	{r4, r5, r6, lr}
  HAL_StatusTypeDef status = HAL_OK;
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000c1a:	1c84      	adds	r4, r0, #2
 8000c1c:	7fe3      	ldrb	r3, [r4, #31]
 8000c1e:	2b02      	cmp	r3, #2
 8000c20:	d004      	beq.n	8000c2c <HAL_DMA_Abort_IT+0x14>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000c22:	2304      	movs	r3, #4
 8000c24:	6383      	str	r3, [r0, #56]	; 0x38
        
    status = HAL_ERROR;
 8000c26:	3b03      	subs	r3, #3
    {
      hdma->XferAbortCallback(hdma);
    } 
  }
  return status;
}
 8000c28:	0018      	movs	r0, r3
 8000c2a:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000c2c:	210e      	movs	r1, #14
 8000c2e:	6803      	ldr	r3, [r0, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000c30:	6c05      	ldr	r5, [r0, #64]	; 0x40
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000c32:	681a      	ldr	r2, [r3, #0]
 8000c34:	438a      	bics	r2, r1
 8000c36:	601a      	str	r2, [r3, #0]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000c38:	2201      	movs	r2, #1
 8000c3a:	6819      	ldr	r1, [r3, #0]
 8000c3c:	4391      	bics	r1, r2
 8000c3e:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000c40:	0011      	movs	r1, r2
 8000c42:	40a9      	lsls	r1, r5
 8000c44:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8000c46:	6059      	str	r1, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8000c48:	77e2      	strb	r2, [r4, #31]
    __HAL_UNLOCK(hdma);
 8000c4a:	2400      	movs	r4, #0
 8000c4c:	1883      	adds	r3, r0, r2
    if(hdma->XferAbortCallback != NULL)
 8000c4e:	6b42      	ldr	r2, [r0, #52]	; 0x34
    __HAL_UNLOCK(hdma);
 8000c50:	77dc      	strb	r4, [r3, #31]
  HAL_StatusTypeDef status = HAL_OK;
 8000c52:	0013      	movs	r3, r2
    if(hdma->XferAbortCallback != NULL)
 8000c54:	42a2      	cmp	r2, r4
 8000c56:	d0e7      	beq.n	8000c28 <HAL_DMA_Abort_IT+0x10>
      hdma->XferAbortCallback(hdma);
 8000c58:	4790      	blx	r2
  HAL_StatusTypeDef status = HAL_OK;
 8000c5a:	0023      	movs	r3, r4
 8000c5c:	e7e4      	b.n	8000c28 <HAL_DMA_Abort_IT+0x10>
	...

08000c60 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8000c60:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c62:	680b      	ldr	r3, [r1, #0]
{ 
 8000c64:	b087      	sub	sp, #28
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c66:	9303      	str	r3, [sp, #12]
  uint32_t position = 0x00u;
 8000c68:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c6a:	9a03      	ldr	r2, [sp, #12]
 8000c6c:	40da      	lsrs	r2, r3
 8000c6e:	d101      	bne.n	8000c74 <HAL_GPIO_Init+0x14>
      }
    }

    position++;
  } 
}
 8000c70:	b007      	add	sp, #28
 8000c72:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000c74:	2201      	movs	r2, #1
 8000c76:	409a      	lsls	r2, r3
 8000c78:	4694      	mov	ip, r2
 8000c7a:	4664      	mov	r4, ip
 8000c7c:	9a03      	ldr	r2, [sp, #12]
 8000c7e:	4022      	ands	r2, r4
 8000c80:	9201      	str	r2, [sp, #4]
    if (iocurrent != 0x00u)
 8000c82:	d100      	bne.n	8000c86 <HAL_GPIO_Init+0x26>
 8000c84:	e08e      	b.n	8000da4 <HAL_GPIO_Init+0x144>
 8000c86:	2503      	movs	r5, #3
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c88:	684a      	ldr	r2, [r1, #4]
 8000c8a:	005e      	lsls	r6, r3, #1
 8000c8c:	0017      	movs	r7, r2
 8000c8e:	9200      	str	r2, [sp, #0]
 8000c90:	40b5      	lsls	r5, r6
 8000c92:	2210      	movs	r2, #16
 8000c94:	4397      	bics	r7, r2
 8000c96:	43ea      	mvns	r2, r5
 8000c98:	9202      	str	r2, [sp, #8]
 8000c9a:	1e7a      	subs	r2, r7, #1
 8000c9c:	2a01      	cmp	r2, #1
 8000c9e:	d810      	bhi.n	8000cc2 <HAL_GPIO_Init+0x62>
        temp = GPIOx->OSPEEDR;
 8000ca0:	6884      	ldr	r4, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000ca2:	9a02      	ldr	r2, [sp, #8]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000ca4:	2501      	movs	r5, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000ca6:	4014      	ands	r4, r2
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000ca8:	68ca      	ldr	r2, [r1, #12]
 8000caa:	40b2      	lsls	r2, r6
 8000cac:	4322      	orrs	r2, r4
        GPIOx->OSPEEDR = temp;
 8000cae:	6082      	str	r2, [r0, #8]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000cb0:	4662      	mov	r2, ip
        temp = GPIOx->OTYPER;
 8000cb2:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000cb4:	4394      	bics	r4, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000cb6:	9a00      	ldr	r2, [sp, #0]
 8000cb8:	0912      	lsrs	r2, r2, #4
 8000cba:	402a      	ands	r2, r5
 8000cbc:	409a      	lsls	r2, r3
 8000cbe:	4322      	orrs	r2, r4
        GPIOx->OTYPER = temp;
 8000cc0:	6042      	str	r2, [r0, #4]
      temp = GPIOx->PUPDR;
 8000cc2:	68c4      	ldr	r4, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000cc4:	9a02      	ldr	r2, [sp, #8]
 8000cc6:	4014      	ands	r4, r2
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000cc8:	688a      	ldr	r2, [r1, #8]
 8000cca:	40b2      	lsls	r2, r6
 8000ccc:	4322      	orrs	r2, r4
      GPIOx->PUPDR = temp;
 8000cce:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000cd0:	2f02      	cmp	r7, #2
 8000cd2:	d10d      	bne.n	8000cf0 <HAL_GPIO_Init+0x90>
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000cd4:	2407      	movs	r4, #7
 8000cd6:	250f      	movs	r5, #15
 8000cd8:	401c      	ands	r4, r3
 8000cda:	00a4      	lsls	r4, r4, #2
 8000cdc:	40a5      	lsls	r5, r4
        temp = GPIOx->AFR[position >> 3u];
 8000cde:	08da      	lsrs	r2, r3, #3
 8000ce0:	0092      	lsls	r2, r2, #2
 8000ce2:	1882      	adds	r2, r0, r2
 8000ce4:	6a17      	ldr	r7, [r2, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000ce6:	43af      	bics	r7, r5
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000ce8:	690d      	ldr	r5, [r1, #16]
 8000cea:	40a5      	lsls	r5, r4
 8000cec:	432f      	orrs	r7, r5
        GPIOx->AFR[position >> 3u] = temp;
 8000cee:	6217      	str	r7, [r2, #32]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000cf0:	2403      	movs	r4, #3
      temp = GPIOx->MODER;
 8000cf2:	6802      	ldr	r2, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000cf4:	9d02      	ldr	r5, [sp, #8]
 8000cf6:	4015      	ands	r5, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000cf8:	9a00      	ldr	r2, [sp, #0]
 8000cfa:	4022      	ands	r2, r4
 8000cfc:	40b2      	lsls	r2, r6
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000cfe:	2480      	movs	r4, #128	; 0x80
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000d00:	4315      	orrs	r5, r2
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d02:	9a00      	ldr	r2, [sp, #0]
 8000d04:	0564      	lsls	r4, r4, #21
      GPIOx->MODER = temp;
 8000d06:	6005      	str	r5, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d08:	4222      	tst	r2, r4
 8000d0a:	d04b      	beq.n	8000da4 <HAL_GPIO_Init+0x144>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d0c:	2501      	movs	r5, #1
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000d0e:	270f      	movs	r7, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d10:	4a25      	ldr	r2, [pc, #148]	; (8000da8 <HAL_GPIO_Init+0x148>)
 8000d12:	6994      	ldr	r4, [r2, #24]
 8000d14:	432c      	orrs	r4, r5
 8000d16:	6194      	str	r4, [r2, #24]
 8000d18:	6992      	ldr	r2, [r2, #24]
        temp = SYSCFG->EXTICR[position >> 2u];
 8000d1a:	089c      	lsrs	r4, r3, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d1c:	402a      	ands	r2, r5
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000d1e:	3502      	adds	r5, #2
 8000d20:	401d      	ands	r5, r3
 8000d22:	00ad      	lsls	r5, r5, #2
 8000d24:	40af      	lsls	r7, r5
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d26:	9205      	str	r2, [sp, #20]
 8000d28:	9a05      	ldr	r2, [sp, #20]
 8000d2a:	4a20      	ldr	r2, [pc, #128]	; (8000dac <HAL_GPIO_Init+0x14c>)
 8000d2c:	00a4      	lsls	r4, r4, #2
 8000d2e:	18a4      	adds	r4, r4, r2
        temp = SYSCFG->EXTICR[position >> 2u];
 8000d30:	68a6      	ldr	r6, [r4, #8]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000d32:	2200      	movs	r2, #0
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000d34:	43be      	bics	r6, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000d36:	2790      	movs	r7, #144	; 0x90
 8000d38:	05ff      	lsls	r7, r7, #23
 8000d3a:	42b8      	cmp	r0, r7
 8000d3c:	d008      	beq.n	8000d50 <HAL_GPIO_Init+0xf0>
 8000d3e:	4f1c      	ldr	r7, [pc, #112]	; (8000db0 <HAL_GPIO_Init+0x150>)
 8000d40:	3201      	adds	r2, #1
 8000d42:	42b8      	cmp	r0, r7
 8000d44:	d004      	beq.n	8000d50 <HAL_GPIO_Init+0xf0>
 8000d46:	4f1b      	ldr	r7, [pc, #108]	; (8000db4 <HAL_GPIO_Init+0x154>)
 8000d48:	3204      	adds	r2, #4
 8000d4a:	42b8      	cmp	r0, r7
 8000d4c:	d100      	bne.n	8000d50 <HAL_GPIO_Init+0xf0>
 8000d4e:	3a03      	subs	r2, #3
 8000d50:	40aa      	lsls	r2, r5
 8000d52:	4332      	orrs	r2, r6
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000d54:	60a2      	str	r2, [r4, #8]
        temp = EXTI->IMR;
 8000d56:	4a18      	ldr	r2, [pc, #96]	; (8000db8 <HAL_GPIO_Init+0x158>)
        temp &= ~(iocurrent);
 8000d58:	9c01      	ldr	r4, [sp, #4]
        temp = EXTI->IMR;
 8000d5a:	6816      	ldr	r6, [r2, #0]
          temp |= iocurrent;
 8000d5c:	9d01      	ldr	r5, [sp, #4]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000d5e:	9f00      	ldr	r7, [sp, #0]
        temp &= ~(iocurrent);
 8000d60:	43e4      	mvns	r4, r4
          temp |= iocurrent;
 8000d62:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000d64:	03ff      	lsls	r7, r7, #15
 8000d66:	d401      	bmi.n	8000d6c <HAL_GPIO_Init+0x10c>
        temp &= ~(iocurrent);
 8000d68:	0035      	movs	r5, r6
 8000d6a:	4025      	ands	r5, r4
        EXTI->IMR = temp;
 8000d6c:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
 8000d6e:	6856      	ldr	r6, [r2, #4]
          temp |= iocurrent;
 8000d70:	9d01      	ldr	r5, [sp, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000d72:	9f00      	ldr	r7, [sp, #0]
          temp |= iocurrent;
 8000d74:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000d76:	03bf      	lsls	r7, r7, #14
 8000d78:	d401      	bmi.n	8000d7e <HAL_GPIO_Init+0x11e>
        temp &= ~(iocurrent);
 8000d7a:	0035      	movs	r5, r6
 8000d7c:	4025      	ands	r5, r4
        EXTI->EMR = temp;
 8000d7e:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
 8000d80:	6896      	ldr	r6, [r2, #8]
          temp |= iocurrent;
 8000d82:	9d01      	ldr	r5, [sp, #4]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000d84:	9f00      	ldr	r7, [sp, #0]
          temp |= iocurrent;
 8000d86:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000d88:	02ff      	lsls	r7, r7, #11
 8000d8a:	d401      	bmi.n	8000d90 <HAL_GPIO_Init+0x130>
        temp &= ~(iocurrent);
 8000d8c:	0035      	movs	r5, r6
 8000d8e:	4025      	ands	r5, r4
        EXTI->RTSR = temp;
 8000d90:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 8000d92:	68d5      	ldr	r5, [r2, #12]
          temp |= iocurrent;
 8000d94:	9e01      	ldr	r6, [sp, #4]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000d96:	9f00      	ldr	r7, [sp, #0]
          temp |= iocurrent;
 8000d98:	432e      	orrs	r6, r5
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000d9a:	02bf      	lsls	r7, r7, #10
 8000d9c:	d401      	bmi.n	8000da2 <HAL_GPIO_Init+0x142>
        temp &= ~(iocurrent);
 8000d9e:	4025      	ands	r5, r4
 8000da0:	002e      	movs	r6, r5
        EXTI->FTSR = temp;
 8000da2:	60d6      	str	r6, [r2, #12]
    position++;
 8000da4:	3301      	adds	r3, #1
 8000da6:	e760      	b.n	8000c6a <HAL_GPIO_Init+0xa>
 8000da8:	40021000 	.word	0x40021000
 8000dac:	40010000 	.word	0x40010000
 8000db0:	48000400 	.word	0x48000400
 8000db4:	48000800 	.word	0x48000800
 8000db8:	40010400 	.word	0x40010400

08000dbc <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000dbc:	2a00      	cmp	r2, #0
 8000dbe:	d001      	beq.n	8000dc4 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000dc0:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000dc2:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000dc4:	6281      	str	r1, [r0, #40]	; 0x28
}
 8000dc6:	e7fc      	b.n	8000dc2 <HAL_GPIO_WritePin+0x6>

08000dc8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000dc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000dca:	0004      	movs	r4, r0
 8000dcc:	b085      	sub	sp, #20
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000dce:	2800      	cmp	r0, #0
 8000dd0:	d102      	bne.n	8000dd8 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 8000dd2:	2001      	movs	r0, #1
      }
    }
  }

  return HAL_OK;
}
 8000dd4:	b005      	add	sp, #20
 8000dd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000dd8:	6803      	ldr	r3, [r0, #0]
 8000dda:	07db      	lsls	r3, r3, #31
 8000ddc:	d433      	bmi.n	8000e46 <HAL_RCC_OscConfig+0x7e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000dde:	6823      	ldr	r3, [r4, #0]
 8000de0:	079b      	lsls	r3, r3, #30
 8000de2:	d500      	bpl.n	8000de6 <HAL_RCC_OscConfig+0x1e>
 8000de4:	e087      	b.n	8000ef6 <HAL_RCC_OscConfig+0x12e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000de6:	6823      	ldr	r3, [r4, #0]
 8000de8:	071b      	lsls	r3, r3, #28
 8000dea:	d500      	bpl.n	8000dee <HAL_RCC_OscConfig+0x26>
 8000dec:	e0c8      	b.n	8000f80 <HAL_RCC_OscConfig+0x1b8>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000dee:	6823      	ldr	r3, [r4, #0]
 8000df0:	075b      	lsls	r3, r3, #29
 8000df2:	d500      	bpl.n	8000df6 <HAL_RCC_OscConfig+0x2e>
 8000df4:	e0eb      	b.n	8000fce <HAL_RCC_OscConfig+0x206>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8000df6:	6823      	ldr	r3, [r4, #0]
 8000df8:	06db      	lsls	r3, r3, #27
 8000dfa:	d51a      	bpl.n	8000e32 <HAL_RCC_OscConfig+0x6a>
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8000dfc:	6962      	ldr	r2, [r4, #20]
 8000dfe:	4dbc      	ldr	r5, [pc, #752]	; (80010f0 <HAL_RCC_OscConfig+0x328>)
 8000e00:	2304      	movs	r3, #4
 8000e02:	2a01      	cmp	r2, #1
 8000e04:	d000      	beq.n	8000e08 <HAL_RCC_OscConfig+0x40>
 8000e06:	e157      	b.n	80010b8 <HAL_RCC_OscConfig+0x2f0>
      __HAL_RCC_HSI14ADC_DISABLE();
 8000e08:	6b69      	ldr	r1, [r5, #52]	; 0x34
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000e0a:	2602      	movs	r6, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8000e0c:	430b      	orrs	r3, r1
 8000e0e:	636b      	str	r3, [r5, #52]	; 0x34
      __HAL_RCC_HSI14_ENABLE();
 8000e10:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8000e12:	431a      	orrs	r2, r3
 8000e14:	636a      	str	r2, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 8000e16:	f7ff fd7f 	bl	8000918 <HAL_GetTick>
 8000e1a:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000e1c:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8000e1e:	4233      	tst	r3, r6
 8000e20:	d100      	bne.n	8000e24 <HAL_RCC_OscConfig+0x5c>
 8000e22:	e142      	b.n	80010aa <HAL_RCC_OscConfig+0x2e2>
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8000e24:	21f8      	movs	r1, #248	; 0xf8
 8000e26:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8000e28:	69a3      	ldr	r3, [r4, #24]
 8000e2a:	438a      	bics	r2, r1
 8000e2c:	00db      	lsls	r3, r3, #3
 8000e2e:	4313      	orrs	r3, r2
 8000e30:	636b      	str	r3, [r5, #52]	; 0x34
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8000e32:	6823      	ldr	r3, [r4, #0]
 8000e34:	069b      	lsls	r3, r3, #26
 8000e36:	d500      	bpl.n	8000e3a <HAL_RCC_OscConfig+0x72>
 8000e38:	e166      	b.n	8001108 <HAL_RCC_OscConfig+0x340>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000e3a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000e3c:	2a00      	cmp	r2, #0
 8000e3e:	d000      	beq.n	8000e42 <HAL_RCC_OscConfig+0x7a>
 8000e40:	e1a3      	b.n	800118a <HAL_RCC_OscConfig+0x3c2>
  return HAL_OK;
 8000e42:	2000      	movs	r0, #0
 8000e44:	e7c6      	b.n	8000dd4 <HAL_RCC_OscConfig+0xc>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000e46:	210c      	movs	r1, #12
 8000e48:	4da9      	ldr	r5, [pc, #676]	; (80010f0 <HAL_RCC_OscConfig+0x328>)
 8000e4a:	686a      	ldr	r2, [r5, #4]
 8000e4c:	400a      	ands	r2, r1
 8000e4e:	2a04      	cmp	r2, #4
 8000e50:	d00b      	beq.n	8000e6a <HAL_RCC_OscConfig+0xa2>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000e52:	686b      	ldr	r3, [r5, #4]
 8000e54:	400b      	ands	r3, r1
 8000e56:	2b08      	cmp	r3, #8
 8000e58:	d10e      	bne.n	8000e78 <HAL_RCC_OscConfig+0xb0>
 8000e5a:	22c0      	movs	r2, #192	; 0xc0
 8000e5c:	686b      	ldr	r3, [r5, #4]
 8000e5e:	0252      	lsls	r2, r2, #9
 8000e60:	4013      	ands	r3, r2
 8000e62:	2280      	movs	r2, #128	; 0x80
 8000e64:	0252      	lsls	r2, r2, #9
 8000e66:	4293      	cmp	r3, r2
 8000e68:	d106      	bne.n	8000e78 <HAL_RCC_OscConfig+0xb0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e6a:	682b      	ldr	r3, [r5, #0]
 8000e6c:	039b      	lsls	r3, r3, #14
 8000e6e:	d5b6      	bpl.n	8000dde <HAL_RCC_OscConfig+0x16>
 8000e70:	6863      	ldr	r3, [r4, #4]
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d1b3      	bne.n	8000dde <HAL_RCC_OscConfig+0x16>
 8000e76:	e7ac      	b.n	8000dd2 <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e78:	6863      	ldr	r3, [r4, #4]
 8000e7a:	2b01      	cmp	r3, #1
 8000e7c:	d113      	bne.n	8000ea6 <HAL_RCC_OscConfig+0xde>
 8000e7e:	2380      	movs	r3, #128	; 0x80
 8000e80:	682a      	ldr	r2, [r5, #0]
 8000e82:	025b      	lsls	r3, r3, #9
 8000e84:	4313      	orrs	r3, r2
 8000e86:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000e88:	f7ff fd46 	bl	8000918 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e8c:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 8000e8e:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e90:	02b6      	lsls	r6, r6, #10
 8000e92:	682b      	ldr	r3, [r5, #0]
 8000e94:	4233      	tst	r3, r6
 8000e96:	d1a2      	bne.n	8000dde <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e98:	f7ff fd3e 	bl	8000918 <HAL_GetTick>
 8000e9c:	1bc0      	subs	r0, r0, r7
 8000e9e:	2864      	cmp	r0, #100	; 0x64
 8000ea0:	d9f7      	bls.n	8000e92 <HAL_RCC_OscConfig+0xca>
            return HAL_TIMEOUT;
 8000ea2:	2003      	movs	r0, #3
 8000ea4:	e796      	b.n	8000dd4 <HAL_RCC_OscConfig+0xc>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d115      	bne.n	8000ed6 <HAL_RCC_OscConfig+0x10e>
 8000eaa:	682b      	ldr	r3, [r5, #0]
 8000eac:	4a91      	ldr	r2, [pc, #580]	; (80010f4 <HAL_RCC_OscConfig+0x32c>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000eae:	2680      	movs	r6, #128	; 0x80
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000eb0:	4013      	ands	r3, r2
 8000eb2:	602b      	str	r3, [r5, #0]
 8000eb4:	682b      	ldr	r3, [r5, #0]
 8000eb6:	4a90      	ldr	r2, [pc, #576]	; (80010f8 <HAL_RCC_OscConfig+0x330>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000eb8:	02b6      	lsls	r6, r6, #10
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000eba:	4013      	ands	r3, r2
 8000ebc:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000ebe:	f7ff fd2b 	bl	8000918 <HAL_GetTick>
 8000ec2:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ec4:	682b      	ldr	r3, [r5, #0]
 8000ec6:	4233      	tst	r3, r6
 8000ec8:	d089      	beq.n	8000dde <HAL_RCC_OscConfig+0x16>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000eca:	f7ff fd25 	bl	8000918 <HAL_GetTick>
 8000ece:	1bc0      	subs	r0, r0, r7
 8000ed0:	2864      	cmp	r0, #100	; 0x64
 8000ed2:	d9f7      	bls.n	8000ec4 <HAL_RCC_OscConfig+0xfc>
 8000ed4:	e7e5      	b.n	8000ea2 <HAL_RCC_OscConfig+0xda>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ed6:	2b05      	cmp	r3, #5
 8000ed8:	d105      	bne.n	8000ee6 <HAL_RCC_OscConfig+0x11e>
 8000eda:	2380      	movs	r3, #128	; 0x80
 8000edc:	682a      	ldr	r2, [r5, #0]
 8000ede:	02db      	lsls	r3, r3, #11
 8000ee0:	4313      	orrs	r3, r2
 8000ee2:	602b      	str	r3, [r5, #0]
 8000ee4:	e7cb      	b.n	8000e7e <HAL_RCC_OscConfig+0xb6>
 8000ee6:	682b      	ldr	r3, [r5, #0]
 8000ee8:	4a82      	ldr	r2, [pc, #520]	; (80010f4 <HAL_RCC_OscConfig+0x32c>)
 8000eea:	4013      	ands	r3, r2
 8000eec:	602b      	str	r3, [r5, #0]
 8000eee:	682b      	ldr	r3, [r5, #0]
 8000ef0:	4a81      	ldr	r2, [pc, #516]	; (80010f8 <HAL_RCC_OscConfig+0x330>)
 8000ef2:	4013      	ands	r3, r2
 8000ef4:	e7c7      	b.n	8000e86 <HAL_RCC_OscConfig+0xbe>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000ef6:	220c      	movs	r2, #12
 8000ef8:	4d7d      	ldr	r5, [pc, #500]	; (80010f0 <HAL_RCC_OscConfig+0x328>)
 8000efa:	686b      	ldr	r3, [r5, #4]
 8000efc:	4213      	tst	r3, r2
 8000efe:	d00b      	beq.n	8000f18 <HAL_RCC_OscConfig+0x150>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000f00:	686b      	ldr	r3, [r5, #4]
 8000f02:	4013      	ands	r3, r2
 8000f04:	2b08      	cmp	r3, #8
 8000f06:	d116      	bne.n	8000f36 <HAL_RCC_OscConfig+0x16e>
 8000f08:	22c0      	movs	r2, #192	; 0xc0
 8000f0a:	686b      	ldr	r3, [r5, #4]
 8000f0c:	0252      	lsls	r2, r2, #9
 8000f0e:	4013      	ands	r3, r2
 8000f10:	2280      	movs	r2, #128	; 0x80
 8000f12:	0212      	lsls	r2, r2, #8
 8000f14:	4293      	cmp	r3, r2
 8000f16:	d10e      	bne.n	8000f36 <HAL_RCC_OscConfig+0x16e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f18:	682b      	ldr	r3, [r5, #0]
 8000f1a:	079b      	lsls	r3, r3, #30
 8000f1c:	d503      	bpl.n	8000f26 <HAL_RCC_OscConfig+0x15e>
 8000f1e:	68e3      	ldr	r3, [r4, #12]
 8000f20:	2b01      	cmp	r3, #1
 8000f22:	d000      	beq.n	8000f26 <HAL_RCC_OscConfig+0x15e>
 8000f24:	e755      	b.n	8000dd2 <HAL_RCC_OscConfig+0xa>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f26:	21f8      	movs	r1, #248	; 0xf8
 8000f28:	682a      	ldr	r2, [r5, #0]
 8000f2a:	6923      	ldr	r3, [r4, #16]
 8000f2c:	438a      	bics	r2, r1
 8000f2e:	00db      	lsls	r3, r3, #3
 8000f30:	4313      	orrs	r3, r2
 8000f32:	602b      	str	r3, [r5, #0]
 8000f34:	e757      	b.n	8000de6 <HAL_RCC_OscConfig+0x1e>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000f36:	68e2      	ldr	r2, [r4, #12]
 8000f38:	2301      	movs	r3, #1
 8000f3a:	2a00      	cmp	r2, #0
 8000f3c:	d00f      	beq.n	8000f5e <HAL_RCC_OscConfig+0x196>
        __HAL_RCC_HSI_ENABLE();
 8000f3e:	682a      	ldr	r2, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f40:	2602      	movs	r6, #2
        __HAL_RCC_HSI_ENABLE();
 8000f42:	4313      	orrs	r3, r2
 8000f44:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000f46:	f7ff fce7 	bl	8000918 <HAL_GetTick>
 8000f4a:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f4c:	682b      	ldr	r3, [r5, #0]
 8000f4e:	4233      	tst	r3, r6
 8000f50:	d1e9      	bne.n	8000f26 <HAL_RCC_OscConfig+0x15e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000f52:	f7ff fce1 	bl	8000918 <HAL_GetTick>
 8000f56:	1bc0      	subs	r0, r0, r7
 8000f58:	2802      	cmp	r0, #2
 8000f5a:	d9f7      	bls.n	8000f4c <HAL_RCC_OscConfig+0x184>
 8000f5c:	e7a1      	b.n	8000ea2 <HAL_RCC_OscConfig+0xda>
        __HAL_RCC_HSI_DISABLE();
 8000f5e:	682a      	ldr	r2, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f60:	2602      	movs	r6, #2
        __HAL_RCC_HSI_DISABLE();
 8000f62:	439a      	bics	r2, r3
 8000f64:	602a      	str	r2, [r5, #0]
        tickstart = HAL_GetTick();
 8000f66:	f7ff fcd7 	bl	8000918 <HAL_GetTick>
 8000f6a:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f6c:	682b      	ldr	r3, [r5, #0]
 8000f6e:	4233      	tst	r3, r6
 8000f70:	d100      	bne.n	8000f74 <HAL_RCC_OscConfig+0x1ac>
 8000f72:	e738      	b.n	8000de6 <HAL_RCC_OscConfig+0x1e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000f74:	f7ff fcd0 	bl	8000918 <HAL_GetTick>
 8000f78:	1bc0      	subs	r0, r0, r7
 8000f7a:	2802      	cmp	r0, #2
 8000f7c:	d9f6      	bls.n	8000f6c <HAL_RCC_OscConfig+0x1a4>
 8000f7e:	e790      	b.n	8000ea2 <HAL_RCC_OscConfig+0xda>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000f80:	69e2      	ldr	r2, [r4, #28]
 8000f82:	2301      	movs	r3, #1
 8000f84:	4d5a      	ldr	r5, [pc, #360]	; (80010f0 <HAL_RCC_OscConfig+0x328>)
 8000f86:	2a00      	cmp	r2, #0
 8000f88:	d010      	beq.n	8000fac <HAL_RCC_OscConfig+0x1e4>
      __HAL_RCC_LSI_ENABLE();
 8000f8a:	6a6a      	ldr	r2, [r5, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f8c:	2602      	movs	r6, #2
      __HAL_RCC_LSI_ENABLE();
 8000f8e:	4313      	orrs	r3, r2
 8000f90:	626b      	str	r3, [r5, #36]	; 0x24
      tickstart = HAL_GetTick();
 8000f92:	f7ff fcc1 	bl	8000918 <HAL_GetTick>
 8000f96:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f98:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8000f9a:	4233      	tst	r3, r6
 8000f9c:	d000      	beq.n	8000fa0 <HAL_RCC_OscConfig+0x1d8>
 8000f9e:	e726      	b.n	8000dee <HAL_RCC_OscConfig+0x26>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000fa0:	f7ff fcba 	bl	8000918 <HAL_GetTick>
 8000fa4:	1bc0      	subs	r0, r0, r7
 8000fa6:	2802      	cmp	r0, #2
 8000fa8:	d9f6      	bls.n	8000f98 <HAL_RCC_OscConfig+0x1d0>
 8000faa:	e77a      	b.n	8000ea2 <HAL_RCC_OscConfig+0xda>
      __HAL_RCC_LSI_DISABLE();
 8000fac:	6a6a      	ldr	r2, [r5, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000fae:	2602      	movs	r6, #2
      __HAL_RCC_LSI_DISABLE();
 8000fb0:	439a      	bics	r2, r3
 8000fb2:	626a      	str	r2, [r5, #36]	; 0x24
      tickstart = HAL_GetTick();
 8000fb4:	f7ff fcb0 	bl	8000918 <HAL_GetTick>
 8000fb8:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000fba:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8000fbc:	4233      	tst	r3, r6
 8000fbe:	d100      	bne.n	8000fc2 <HAL_RCC_OscConfig+0x1fa>
 8000fc0:	e715      	b.n	8000dee <HAL_RCC_OscConfig+0x26>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000fc2:	f7ff fca9 	bl	8000918 <HAL_GetTick>
 8000fc6:	1bc0      	subs	r0, r0, r7
 8000fc8:	2802      	cmp	r0, #2
 8000fca:	d9f6      	bls.n	8000fba <HAL_RCC_OscConfig+0x1f2>
 8000fcc:	e769      	b.n	8000ea2 <HAL_RCC_OscConfig+0xda>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000fce:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8000fd0:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000fd2:	4d47      	ldr	r5, [pc, #284]	; (80010f0 <HAL_RCC_OscConfig+0x328>)
 8000fd4:	0552      	lsls	r2, r2, #21
 8000fd6:	69eb      	ldr	r3, [r5, #28]
    FlagStatus       pwrclkchanged = RESET;
 8000fd8:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000fda:	4213      	tst	r3, r2
 8000fdc:	d108      	bne.n	8000ff0 <HAL_RCC_OscConfig+0x228>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000fde:	69eb      	ldr	r3, [r5, #28]
 8000fe0:	4313      	orrs	r3, r2
 8000fe2:	61eb      	str	r3, [r5, #28]
 8000fe4:	69eb      	ldr	r3, [r5, #28]
 8000fe6:	4013      	ands	r3, r2
 8000fe8:	9303      	str	r3, [sp, #12]
 8000fea:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 8000fec:	2301      	movs	r3, #1
 8000fee:	9300      	str	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ff0:	2780      	movs	r7, #128	; 0x80
 8000ff2:	4e42      	ldr	r6, [pc, #264]	; (80010fc <HAL_RCC_OscConfig+0x334>)
 8000ff4:	007f      	lsls	r7, r7, #1
 8000ff6:	6833      	ldr	r3, [r6, #0]
 8000ff8:	423b      	tst	r3, r7
 8000ffa:	d006      	beq.n	800100a <HAL_RCC_OscConfig+0x242>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ffc:	68a3      	ldr	r3, [r4, #8]
 8000ffe:	2b01      	cmp	r3, #1
 8001000:	d113      	bne.n	800102a <HAL_RCC_OscConfig+0x262>
 8001002:	6a2a      	ldr	r2, [r5, #32]
 8001004:	4313      	orrs	r3, r2
 8001006:	622b      	str	r3, [r5, #32]
 8001008:	e030      	b.n	800106c <HAL_RCC_OscConfig+0x2a4>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800100a:	6833      	ldr	r3, [r6, #0]
 800100c:	433b      	orrs	r3, r7
 800100e:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001010:	f7ff fc82 	bl	8000918 <HAL_GetTick>
 8001014:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001016:	6833      	ldr	r3, [r6, #0]
 8001018:	423b      	tst	r3, r7
 800101a:	d1ef      	bne.n	8000ffc <HAL_RCC_OscConfig+0x234>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800101c:	f7ff fc7c 	bl	8000918 <HAL_GetTick>
 8001020:	9b01      	ldr	r3, [sp, #4]
 8001022:	1ac0      	subs	r0, r0, r3
 8001024:	2864      	cmp	r0, #100	; 0x64
 8001026:	d9f6      	bls.n	8001016 <HAL_RCC_OscConfig+0x24e>
 8001028:	e73b      	b.n	8000ea2 <HAL_RCC_OscConfig+0xda>
 800102a:	2201      	movs	r2, #1
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800102c:	2b00      	cmp	r3, #0
 800102e:	d114      	bne.n	800105a <HAL_RCC_OscConfig+0x292>
 8001030:	6a2b      	ldr	r3, [r5, #32]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001032:	2702      	movs	r7, #2
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001034:	4393      	bics	r3, r2
 8001036:	622b      	str	r3, [r5, #32]
 8001038:	6a2b      	ldr	r3, [r5, #32]
 800103a:	3203      	adds	r2, #3
 800103c:	4393      	bics	r3, r2
 800103e:	622b      	str	r3, [r5, #32]
      tickstart = HAL_GetTick();
 8001040:	f7ff fc6a 	bl	8000918 <HAL_GetTick>
 8001044:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001046:	6a2b      	ldr	r3, [r5, #32]
 8001048:	423b      	tst	r3, r7
 800104a:	d025      	beq.n	8001098 <HAL_RCC_OscConfig+0x2d0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800104c:	f7ff fc64 	bl	8000918 <HAL_GetTick>
 8001050:	4b2b      	ldr	r3, [pc, #172]	; (8001100 <HAL_RCC_OscConfig+0x338>)
 8001052:	1b80      	subs	r0, r0, r6
 8001054:	4298      	cmp	r0, r3
 8001056:	d9f6      	bls.n	8001046 <HAL_RCC_OscConfig+0x27e>
 8001058:	e723      	b.n	8000ea2 <HAL_RCC_OscConfig+0xda>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800105a:	2b05      	cmp	r3, #5
 800105c:	d10b      	bne.n	8001076 <HAL_RCC_OscConfig+0x2ae>
 800105e:	6a29      	ldr	r1, [r5, #32]
 8001060:	3b01      	subs	r3, #1
 8001062:	430b      	orrs	r3, r1
 8001064:	622b      	str	r3, [r5, #32]
 8001066:	6a2b      	ldr	r3, [r5, #32]
 8001068:	431a      	orrs	r2, r3
 800106a:	622a      	str	r2, [r5, #32]
      tickstart = HAL_GetTick();
 800106c:	f7ff fc54 	bl	8000918 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001070:	2702      	movs	r7, #2
      tickstart = HAL_GetTick();
 8001072:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001074:	e00d      	b.n	8001092 <HAL_RCC_OscConfig+0x2ca>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001076:	6a2b      	ldr	r3, [r5, #32]
 8001078:	4393      	bics	r3, r2
 800107a:	2204      	movs	r2, #4
 800107c:	622b      	str	r3, [r5, #32]
 800107e:	6a2b      	ldr	r3, [r5, #32]
 8001080:	4393      	bics	r3, r2
 8001082:	e7c0      	b.n	8001006 <HAL_RCC_OscConfig+0x23e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001084:	f7ff fc48 	bl	8000918 <HAL_GetTick>
 8001088:	4b1d      	ldr	r3, [pc, #116]	; (8001100 <HAL_RCC_OscConfig+0x338>)
 800108a:	1b80      	subs	r0, r0, r6
 800108c:	4298      	cmp	r0, r3
 800108e:	d900      	bls.n	8001092 <HAL_RCC_OscConfig+0x2ca>
 8001090:	e707      	b.n	8000ea2 <HAL_RCC_OscConfig+0xda>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001092:	6a2b      	ldr	r3, [r5, #32]
 8001094:	423b      	tst	r3, r7
 8001096:	d0f5      	beq.n	8001084 <HAL_RCC_OscConfig+0x2bc>
    if(pwrclkchanged == SET)
 8001098:	9b00      	ldr	r3, [sp, #0]
 800109a:	2b01      	cmp	r3, #1
 800109c:	d000      	beq.n	80010a0 <HAL_RCC_OscConfig+0x2d8>
 800109e:	e6aa      	b.n	8000df6 <HAL_RCC_OscConfig+0x2e>
      __HAL_RCC_PWR_CLK_DISABLE();
 80010a0:	69eb      	ldr	r3, [r5, #28]
 80010a2:	4a18      	ldr	r2, [pc, #96]	; (8001104 <HAL_RCC_OscConfig+0x33c>)
 80010a4:	4013      	ands	r3, r2
 80010a6:	61eb      	str	r3, [r5, #28]
 80010a8:	e6a5      	b.n	8000df6 <HAL_RCC_OscConfig+0x2e>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80010aa:	f7ff fc35 	bl	8000918 <HAL_GetTick>
 80010ae:	1bc0      	subs	r0, r0, r7
 80010b0:	2802      	cmp	r0, #2
 80010b2:	d800      	bhi.n	80010b6 <HAL_RCC_OscConfig+0x2ee>
 80010b4:	e6b2      	b.n	8000e1c <HAL_RCC_OscConfig+0x54>
 80010b6:	e6f4      	b.n	8000ea2 <HAL_RCC_OscConfig+0xda>
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80010b8:	3205      	adds	r2, #5
 80010ba:	d103      	bne.n	80010c4 <HAL_RCC_OscConfig+0x2fc>
      __HAL_RCC_HSI14ADC_ENABLE();
 80010bc:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 80010be:	439a      	bics	r2, r3
 80010c0:	636a      	str	r2, [r5, #52]	; 0x34
 80010c2:	e6af      	b.n	8000e24 <HAL_RCC_OscConfig+0x5c>
      __HAL_RCC_HSI14ADC_DISABLE();
 80010c4:	6b6a      	ldr	r2, [r5, #52]	; 0x34
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80010c6:	2602      	movs	r6, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 80010c8:	4313      	orrs	r3, r2
      __HAL_RCC_HSI14_DISABLE();
 80010ca:	2201      	movs	r2, #1
      __HAL_RCC_HSI14ADC_DISABLE();
 80010cc:	636b      	str	r3, [r5, #52]	; 0x34
      __HAL_RCC_HSI14_DISABLE();
 80010ce:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80010d0:	4393      	bics	r3, r2
 80010d2:	636b      	str	r3, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 80010d4:	f7ff fc20 	bl	8000918 <HAL_GetTick>
 80010d8:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80010da:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80010dc:	4233      	tst	r3, r6
 80010de:	d100      	bne.n	80010e2 <HAL_RCC_OscConfig+0x31a>
 80010e0:	e6a7      	b.n	8000e32 <HAL_RCC_OscConfig+0x6a>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80010e2:	f7ff fc19 	bl	8000918 <HAL_GetTick>
 80010e6:	1bc0      	subs	r0, r0, r7
 80010e8:	2802      	cmp	r0, #2
 80010ea:	d9f6      	bls.n	80010da <HAL_RCC_OscConfig+0x312>
 80010ec:	e6d9      	b.n	8000ea2 <HAL_RCC_OscConfig+0xda>
 80010ee:	46c0      	nop			; (mov r8, r8)
 80010f0:	40021000 	.word	0x40021000
 80010f4:	fffeffff 	.word	0xfffeffff
 80010f8:	fffbffff 	.word	0xfffbffff
 80010fc:	40007000 	.word	0x40007000
 8001100:	00001388 	.word	0x00001388
 8001104:	efffffff 	.word	0xefffffff
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001108:	210c      	movs	r1, #12
 800110a:	4d53      	ldr	r5, [pc, #332]	; (8001258 <HAL_RCC_OscConfig+0x490>)
 800110c:	686a      	ldr	r2, [r5, #4]
 800110e:	400a      	ands	r2, r1
 8001110:	428a      	cmp	r2, r1
 8001112:	d009      	beq.n	8001128 <HAL_RCC_OscConfig+0x360>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001114:	686b      	ldr	r3, [r5, #4]
 8001116:	400b      	ands	r3, r1
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001118:	2b08      	cmp	r3, #8
 800111a:	d10e      	bne.n	800113a <HAL_RCC_OscConfig+0x372>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 800111c:	22c0      	movs	r2, #192	; 0xc0
 800111e:	686b      	ldr	r3, [r5, #4]
 8001120:	0252      	lsls	r2, r2, #9
 8001122:	4013      	ands	r3, r2
 8001124:	4293      	cmp	r3, r2
 8001126:	d108      	bne.n	800113a <HAL_RCC_OscConfig+0x372>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001128:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800112a:	03db      	lsls	r3, r3, #15
 800112c:	d400      	bmi.n	8001130 <HAL_RCC_OscConfig+0x368>
 800112e:	e684      	b.n	8000e3a <HAL_RCC_OscConfig+0x72>
 8001130:	6a23      	ldr	r3, [r4, #32]
 8001132:	2b01      	cmp	r3, #1
 8001134:	d000      	beq.n	8001138 <HAL_RCC_OscConfig+0x370>
 8001136:	e64c      	b.n	8000dd2 <HAL_RCC_OscConfig+0xa>
 8001138:	e67f      	b.n	8000e3a <HAL_RCC_OscConfig+0x72>
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800113a:	6a23      	ldr	r3, [r4, #32]
 800113c:	2b00      	cmp	r3, #0
 800113e:	d011      	beq.n	8001164 <HAL_RCC_OscConfig+0x39c>
        __HAL_RCC_HSI48_ENABLE();
 8001140:	2680      	movs	r6, #128	; 0x80
 8001142:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8001144:	0276      	lsls	r6, r6, #9
 8001146:	4333      	orrs	r3, r6
 8001148:	636b      	str	r3, [r5, #52]	; 0x34
        tickstart = HAL_GetTick();
 800114a:	f7ff fbe5 	bl	8000918 <HAL_GetTick>
 800114e:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001150:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8001152:	4233      	tst	r3, r6
 8001154:	d000      	beq.n	8001158 <HAL_RCC_OscConfig+0x390>
 8001156:	e670      	b.n	8000e3a <HAL_RCC_OscConfig+0x72>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001158:	f7ff fbde 	bl	8000918 <HAL_GetTick>
 800115c:	1bc0      	subs	r0, r0, r7
 800115e:	2802      	cmp	r0, #2
 8001160:	d9f6      	bls.n	8001150 <HAL_RCC_OscConfig+0x388>
 8001162:	e69e      	b.n	8000ea2 <HAL_RCC_OscConfig+0xda>
        __HAL_RCC_HSI48_DISABLE();
 8001164:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8001166:	4a3d      	ldr	r2, [pc, #244]	; (800125c <HAL_RCC_OscConfig+0x494>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001168:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_HSI48_DISABLE();
 800116a:	4013      	ands	r3, r2
 800116c:	636b      	str	r3, [r5, #52]	; 0x34
        tickstart = HAL_GetTick();
 800116e:	f7ff fbd3 	bl	8000918 <HAL_GetTick>
 8001172:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001174:	0276      	lsls	r6, r6, #9
 8001176:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8001178:	4233      	tst	r3, r6
 800117a:	d100      	bne.n	800117e <HAL_RCC_OscConfig+0x3b6>
 800117c:	e65d      	b.n	8000e3a <HAL_RCC_OscConfig+0x72>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800117e:	f7ff fbcb 	bl	8000918 <HAL_GetTick>
 8001182:	1bc0      	subs	r0, r0, r7
 8001184:	2802      	cmp	r0, #2
 8001186:	d9f6      	bls.n	8001176 <HAL_RCC_OscConfig+0x3ae>
 8001188:	e68b      	b.n	8000ea2 <HAL_RCC_OscConfig+0xda>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800118a:	200c      	movs	r0, #12
 800118c:	4b32      	ldr	r3, [pc, #200]	; (8001258 <HAL_RCC_OscConfig+0x490>)
 800118e:	6859      	ldr	r1, [r3, #4]
 8001190:	001d      	movs	r5, r3
 8001192:	4001      	ands	r1, r0
 8001194:	2908      	cmp	r1, #8
 8001196:	d044      	beq.n	8001222 <HAL_RCC_OscConfig+0x45a>
        __HAL_RCC_PLL_DISABLE();
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	4931      	ldr	r1, [pc, #196]	; (8001260 <HAL_RCC_OscConfig+0x498>)
 800119c:	400b      	ands	r3, r1
 800119e:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80011a0:	2a02      	cmp	r2, #2
 80011a2:	d12f      	bne.n	8001204 <HAL_RCC_OscConfig+0x43c>
        tickstart = HAL_GetTick();
 80011a4:	f7ff fbb8 	bl	8000918 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011a8:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 80011aa:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011ac:	04b6      	lsls	r6, r6, #18
 80011ae:	682b      	ldr	r3, [r5, #0]
 80011b0:	4233      	tst	r3, r6
 80011b2:	d121      	bne.n	80011f8 <HAL_RCC_OscConfig+0x430>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80011b4:	220f      	movs	r2, #15
 80011b6:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80011b8:	4393      	bics	r3, r2
 80011ba:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80011bc:	4313      	orrs	r3, r2
 80011be:	62eb      	str	r3, [r5, #44]	; 0x2c
 80011c0:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80011c2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80011c4:	686a      	ldr	r2, [r5, #4]
 80011c6:	430b      	orrs	r3, r1
 80011c8:	4926      	ldr	r1, [pc, #152]	; (8001264 <HAL_RCC_OscConfig+0x49c>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80011ca:	2480      	movs	r4, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80011cc:	400a      	ands	r2, r1
 80011ce:	4313      	orrs	r3, r2
 80011d0:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 80011d2:	2380      	movs	r3, #128	; 0x80
 80011d4:	682a      	ldr	r2, [r5, #0]
 80011d6:	045b      	lsls	r3, r3, #17
 80011d8:	4313      	orrs	r3, r2
 80011da:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80011dc:	f7ff fb9c 	bl	8000918 <HAL_GetTick>
 80011e0:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80011e2:	04a4      	lsls	r4, r4, #18
 80011e4:	682b      	ldr	r3, [r5, #0]
 80011e6:	4223      	tst	r3, r4
 80011e8:	d000      	beq.n	80011ec <HAL_RCC_OscConfig+0x424>
 80011ea:	e62a      	b.n	8000e42 <HAL_RCC_OscConfig+0x7a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80011ec:	f7ff fb94 	bl	8000918 <HAL_GetTick>
 80011f0:	1b80      	subs	r0, r0, r6
 80011f2:	2802      	cmp	r0, #2
 80011f4:	d9f6      	bls.n	80011e4 <HAL_RCC_OscConfig+0x41c>
 80011f6:	e654      	b.n	8000ea2 <HAL_RCC_OscConfig+0xda>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80011f8:	f7ff fb8e 	bl	8000918 <HAL_GetTick>
 80011fc:	1bc0      	subs	r0, r0, r7
 80011fe:	2802      	cmp	r0, #2
 8001200:	d9d5      	bls.n	80011ae <HAL_RCC_OscConfig+0x3e6>
 8001202:	e64e      	b.n	8000ea2 <HAL_RCC_OscConfig+0xda>
        tickstart = HAL_GetTick();
 8001204:	f7ff fb88 	bl	8000918 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001208:	2480      	movs	r4, #128	; 0x80
        tickstart = HAL_GetTick();
 800120a:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800120c:	04a4      	lsls	r4, r4, #18
 800120e:	682b      	ldr	r3, [r5, #0]
 8001210:	4223      	tst	r3, r4
 8001212:	d100      	bne.n	8001216 <HAL_RCC_OscConfig+0x44e>
 8001214:	e615      	b.n	8000e42 <HAL_RCC_OscConfig+0x7a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001216:	f7ff fb7f 	bl	8000918 <HAL_GetTick>
 800121a:	1b80      	subs	r0, r0, r6
 800121c:	2802      	cmp	r0, #2
 800121e:	d9f6      	bls.n	800120e <HAL_RCC_OscConfig+0x446>
 8001220:	e63f      	b.n	8000ea2 <HAL_RCC_OscConfig+0xda>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001222:	2a01      	cmp	r2, #1
 8001224:	d100      	bne.n	8001228 <HAL_RCC_OscConfig+0x460>
 8001226:	e5d4      	b.n	8000dd2 <HAL_RCC_OscConfig+0xa>
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001228:	22c0      	movs	r2, #192	; 0xc0
        pll_config  = RCC->CFGR;
 800122a:	6858      	ldr	r0, [r3, #4]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800122c:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800122e:	0252      	lsls	r2, r2, #9
        pll_config2 = RCC->CFGR2;
 8001230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001232:	4002      	ands	r2, r0
 8001234:	428a      	cmp	r2, r1
 8001236:	d000      	beq.n	800123a <HAL_RCC_OscConfig+0x472>
 8001238:	e5cb      	b.n	8000dd2 <HAL_RCC_OscConfig+0xa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800123a:	220f      	movs	r2, #15
 800123c:	4013      	ands	r3, r2
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800123e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001240:	4293      	cmp	r3, r2
 8001242:	d000      	beq.n	8001246 <HAL_RCC_OscConfig+0x47e>
 8001244:	e5c5      	b.n	8000dd2 <HAL_RCC_OscConfig+0xa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001246:	23f0      	movs	r3, #240	; 0xf0
 8001248:	039b      	lsls	r3, r3, #14
 800124a:	4018      	ands	r0, r3
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800124c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800124e:	1ac0      	subs	r0, r0, r3
 8001250:	1e43      	subs	r3, r0, #1
 8001252:	4198      	sbcs	r0, r3
    return HAL_ERROR;
 8001254:	b2c0      	uxtb	r0, r0
 8001256:	e5bd      	b.n	8000dd4 <HAL_RCC_OscConfig+0xc>
 8001258:	40021000 	.word	0x40021000
 800125c:	fffeffff 	.word	0xfffeffff
 8001260:	feffffff 	.word	0xfeffffff
 8001264:	ffc27fff 	.word	0xffc27fff

08001268 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001268:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800126a:	4c1b      	ldr	r4, [pc, #108]	; (80012d8 <HAL_RCC_GetSysClockFreq+0x70>)
{
 800126c:	b089      	sub	sp, #36	; 0x24
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800126e:	2210      	movs	r2, #16
 8001270:	0021      	movs	r1, r4
 8001272:	4668      	mov	r0, sp
 8001274:	f001 f990 	bl	8002598 <memcpy>
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001278:	0021      	movs	r1, r4
 800127a:	ad04      	add	r5, sp, #16
 800127c:	2210      	movs	r2, #16
 800127e:	3110      	adds	r1, #16
 8001280:	0028      	movs	r0, r5
 8001282:	f001 f989 	bl	8002598 <memcpy>
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001286:	200c      	movs	r0, #12
  tmpreg = RCC->CFGR;
 8001288:	4a14      	ldr	r2, [pc, #80]	; (80012dc <HAL_RCC_GetSysClockFreq+0x74>)
 800128a:	6853      	ldr	r3, [r2, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 800128c:	4018      	ands	r0, r3
 800128e:	2808      	cmp	r0, #8
 8001290:	d009      	beq.n	80012a6 <HAL_RCC_GetSysClockFreq+0x3e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001292:	380c      	subs	r0, #12
 8001294:	4243      	negs	r3, r0
 8001296:	4158      	adcs	r0, r3
 8001298:	4b11      	ldr	r3, [pc, #68]	; (80012e0 <HAL_RCC_GetSysClockFreq+0x78>)
 800129a:	4240      	negs	r0, r0
 800129c:	4018      	ands	r0, r3
 800129e:	4b11      	ldr	r3, [pc, #68]	; (80012e4 <HAL_RCC_GetSysClockFreq+0x7c>)
 80012a0:	18c0      	adds	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80012a2:	b009      	add	sp, #36	; 0x24
 80012a4:	bd30      	pop	{r4, r5, pc}
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80012a6:	200f      	movs	r0, #15
 80012a8:	466c      	mov	r4, sp
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80012aa:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80012ac:	0c99      	lsrs	r1, r3, #18
 80012ae:	4001      	ands	r1, r0
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80012b0:	4002      	ands	r2, r0
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80012b2:	5c64      	ldrb	r4, [r4, r1]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80012b4:	5ca9      	ldrb	r1, [r5, r2]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80012b6:	22c0      	movs	r2, #192	; 0xc0
 80012b8:	2080      	movs	r0, #128	; 0x80
 80012ba:	0252      	lsls	r2, r2, #9
 80012bc:	4013      	ands	r3, r2
 80012be:	0240      	lsls	r0, r0, #9
 80012c0:	4283      	cmp	r3, r0
 80012c2:	d101      	bne.n	80012c8 <HAL_RCC_GetSysClockFreq+0x60>
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80012c4:	4807      	ldr	r0, [pc, #28]	; (80012e4 <HAL_RCC_GetSysClockFreq+0x7c>)
 80012c6:	e002      	b.n	80012ce <HAL_RCC_GetSysClockFreq+0x66>
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 80012c8:	4293      	cmp	r3, r2
 80012ca:	d1fb      	bne.n	80012c4 <HAL_RCC_GetSysClockFreq+0x5c>
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80012cc:	4806      	ldr	r0, [pc, #24]	; (80012e8 <HAL_RCC_GetSysClockFreq+0x80>)
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80012ce:	f7fe ff37 	bl	8000140 <__udivsi3>
 80012d2:	4360      	muls	r0, r4
 80012d4:	e7e5      	b.n	80012a2 <HAL_RCC_GetSysClockFreq+0x3a>
 80012d6:	46c0      	nop			; (mov r8, r8)
 80012d8:	080025d4 	.word	0x080025d4
 80012dc:	40021000 	.word	0x40021000
 80012e0:	02625a00 	.word	0x02625a00
 80012e4:	007a1200 	.word	0x007a1200
 80012e8:	02dc6c00 	.word	0x02dc6c00

080012ec <HAL_RCC_ClockConfig>:
{
 80012ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80012ee:	0005      	movs	r5, r0
 80012f0:	000f      	movs	r7, r1
  if(RCC_ClkInitStruct == NULL)
 80012f2:	2800      	cmp	r0, #0
 80012f4:	d101      	bne.n	80012fa <HAL_RCC_ClockConfig+0xe>
    return HAL_ERROR;
 80012f6:	2001      	movs	r0, #1
}
 80012f8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80012fa:	2201      	movs	r2, #1
 80012fc:	4c3b      	ldr	r4, [pc, #236]	; (80013ec <HAL_RCC_ClockConfig+0x100>)
 80012fe:	6823      	ldr	r3, [r4, #0]
 8001300:	4013      	ands	r3, r2
 8001302:	428b      	cmp	r3, r1
 8001304:	d31c      	bcc.n	8001340 <HAL_RCC_ClockConfig+0x54>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001306:	6829      	ldr	r1, [r5, #0]
 8001308:	078b      	lsls	r3, r1, #30
 800130a:	d422      	bmi.n	8001352 <HAL_RCC_ClockConfig+0x66>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800130c:	07cb      	lsls	r3, r1, #31
 800130e:	d42f      	bmi.n	8001370 <HAL_RCC_ClockConfig+0x84>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001310:	2301      	movs	r3, #1
 8001312:	6822      	ldr	r2, [r4, #0]
 8001314:	401a      	ands	r2, r3
 8001316:	42ba      	cmp	r2, r7
 8001318:	d859      	bhi.n	80013ce <HAL_RCC_ClockConfig+0xe2>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800131a:	682b      	ldr	r3, [r5, #0]
 800131c:	4c34      	ldr	r4, [pc, #208]	; (80013f0 <HAL_RCC_ClockConfig+0x104>)
 800131e:	075b      	lsls	r3, r3, #29
 8001320:	d45c      	bmi.n	80013dc <HAL_RCC_ClockConfig+0xf0>
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001322:	f7ff ffa1 	bl	8001268 <HAL_RCC_GetSysClockFreq>
 8001326:	6863      	ldr	r3, [r4, #4]
 8001328:	4a32      	ldr	r2, [pc, #200]	; (80013f4 <HAL_RCC_ClockConfig+0x108>)
 800132a:	061b      	lsls	r3, r3, #24
 800132c:	0f1b      	lsrs	r3, r3, #28
 800132e:	5cd3      	ldrb	r3, [r2, r3]
 8001330:	40d8      	lsrs	r0, r3
 8001332:	4b31      	ldr	r3, [pc, #196]	; (80013f8 <HAL_RCC_ClockConfig+0x10c>)
 8001334:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8001336:	2000      	movs	r0, #0
 8001338:	f7ff f950 	bl	80005dc <HAL_InitTick>
  return HAL_OK;
 800133c:	2000      	movs	r0, #0
 800133e:	e7db      	b.n	80012f8 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001340:	6823      	ldr	r3, [r4, #0]
 8001342:	4393      	bics	r3, r2
 8001344:	430b      	orrs	r3, r1
 8001346:	6023      	str	r3, [r4, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001348:	6823      	ldr	r3, [r4, #0]
 800134a:	4013      	ands	r3, r2
 800134c:	428b      	cmp	r3, r1
 800134e:	d1d2      	bne.n	80012f6 <HAL_RCC_ClockConfig+0xa>
 8001350:	e7d9      	b.n	8001306 <HAL_RCC_ClockConfig+0x1a>
 8001352:	4a27      	ldr	r2, [pc, #156]	; (80013f0 <HAL_RCC_ClockConfig+0x104>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001354:	074b      	lsls	r3, r1, #29
 8001356:	d504      	bpl.n	8001362 <HAL_RCC_ClockConfig+0x76>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001358:	23e0      	movs	r3, #224	; 0xe0
 800135a:	6850      	ldr	r0, [r2, #4]
 800135c:	00db      	lsls	r3, r3, #3
 800135e:	4303      	orrs	r3, r0
 8001360:	6053      	str	r3, [r2, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001362:	20f0      	movs	r0, #240	; 0xf0
 8001364:	6853      	ldr	r3, [r2, #4]
 8001366:	4383      	bics	r3, r0
 8001368:	68a8      	ldr	r0, [r5, #8]
 800136a:	4303      	orrs	r3, r0
 800136c:	6053      	str	r3, [r2, #4]
 800136e:	e7cd      	b.n	800130c <HAL_RCC_ClockConfig+0x20>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001370:	686a      	ldr	r2, [r5, #4]
 8001372:	4e1f      	ldr	r6, [pc, #124]	; (80013f0 <HAL_RCC_ClockConfig+0x104>)
 8001374:	2a01      	cmp	r2, #1
 8001376:	d11a      	bne.n	80013ae <HAL_RCC_ClockConfig+0xc2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001378:	6833      	ldr	r3, [r6, #0]
 800137a:	039b      	lsls	r3, r3, #14
 800137c:	d5bb      	bpl.n	80012f6 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800137e:	2103      	movs	r1, #3
 8001380:	6873      	ldr	r3, [r6, #4]
 8001382:	438b      	bics	r3, r1
 8001384:	4313      	orrs	r3, r2
 8001386:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8001388:	f7ff fac6 	bl	8000918 <HAL_GetTick>
 800138c:	9001      	str	r0, [sp, #4]
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800138e:	230c      	movs	r3, #12
 8001390:	6872      	ldr	r2, [r6, #4]
 8001392:	401a      	ands	r2, r3
 8001394:	686b      	ldr	r3, [r5, #4]
 8001396:	009b      	lsls	r3, r3, #2
 8001398:	429a      	cmp	r2, r3
 800139a:	d0b9      	beq.n	8001310 <HAL_RCC_ClockConfig+0x24>
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800139c:	f7ff fabc 	bl	8000918 <HAL_GetTick>
 80013a0:	9b01      	ldr	r3, [sp, #4]
 80013a2:	1ac0      	subs	r0, r0, r3
 80013a4:	4b15      	ldr	r3, [pc, #84]	; (80013fc <HAL_RCC_ClockConfig+0x110>)
 80013a6:	4298      	cmp	r0, r3
 80013a8:	d9f1      	bls.n	800138e <HAL_RCC_ClockConfig+0xa2>
        return HAL_TIMEOUT;
 80013aa:	2003      	movs	r0, #3
 80013ac:	e7a4      	b.n	80012f8 <HAL_RCC_ClockConfig+0xc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80013ae:	2a02      	cmp	r2, #2
 80013b0:	d103      	bne.n	80013ba <HAL_RCC_ClockConfig+0xce>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80013b2:	6833      	ldr	r3, [r6, #0]
 80013b4:	019b      	lsls	r3, r3, #6
 80013b6:	d4e2      	bmi.n	800137e <HAL_RCC_ClockConfig+0x92>
 80013b8:	e79d      	b.n	80012f6 <HAL_RCC_ClockConfig+0xa>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 80013ba:	2a03      	cmp	r2, #3
 80013bc:	d103      	bne.n	80013c6 <HAL_RCC_ClockConfig+0xda>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80013be:	6b73      	ldr	r3, [r6, #52]	; 0x34
 80013c0:	03db      	lsls	r3, r3, #15
 80013c2:	d4dc      	bmi.n	800137e <HAL_RCC_ClockConfig+0x92>
 80013c4:	e797      	b.n	80012f6 <HAL_RCC_ClockConfig+0xa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013c6:	6833      	ldr	r3, [r6, #0]
 80013c8:	079b      	lsls	r3, r3, #30
 80013ca:	d4d8      	bmi.n	800137e <HAL_RCC_ClockConfig+0x92>
 80013cc:	e793      	b.n	80012f6 <HAL_RCC_ClockConfig+0xa>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013ce:	6822      	ldr	r2, [r4, #0]
 80013d0:	439a      	bics	r2, r3
 80013d2:	6022      	str	r2, [r4, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80013d4:	6822      	ldr	r2, [r4, #0]
 80013d6:	421a      	tst	r2, r3
 80013d8:	d09f      	beq.n	800131a <HAL_RCC_ClockConfig+0x2e>
 80013da:	e78c      	b.n	80012f6 <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80013dc:	6863      	ldr	r3, [r4, #4]
 80013de:	4a08      	ldr	r2, [pc, #32]	; (8001400 <HAL_RCC_ClockConfig+0x114>)
 80013e0:	4013      	ands	r3, r2
 80013e2:	68ea      	ldr	r2, [r5, #12]
 80013e4:	4313      	orrs	r3, r2
 80013e6:	6063      	str	r3, [r4, #4]
 80013e8:	e79b      	b.n	8001322 <HAL_RCC_ClockConfig+0x36>
 80013ea:	46c0      	nop			; (mov r8, r8)
 80013ec:	40022000 	.word	0x40022000
 80013f0:	40021000 	.word	0x40021000
 80013f4:	0800264e 	.word	0x0800264e
 80013f8:	20000000 	.word	0x20000000
 80013fc:	00001388 	.word	0x00001388
 8001400:	fffff8ff 	.word	0xfffff8ff

08001404 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001404:	4b04      	ldr	r3, [pc, #16]	; (8001418 <HAL_RCC_GetPCLK1Freq+0x14>)
 8001406:	4a05      	ldr	r2, [pc, #20]	; (800141c <HAL_RCC_GetPCLK1Freq+0x18>)
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	055b      	lsls	r3, r3, #21
 800140c:	0f5b      	lsrs	r3, r3, #29
 800140e:	5cd3      	ldrb	r3, [r2, r3]
 8001410:	4a03      	ldr	r2, [pc, #12]	; (8001420 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001412:	6810      	ldr	r0, [r2, #0]
 8001414:	40d8      	lsrs	r0, r3
}    
 8001416:	4770      	bx	lr
 8001418:	40021000 	.word	0x40021000
 800141c:	0800265e 	.word	0x0800265e
 8001420:	20000000 	.word	0x20000000

08001424 <HAL_RCC_GetClockConfig>:
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 8001424:	2307      	movs	r3, #7
{
 8001426:	b510      	push	{r4, lr}
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001428:	2403      	movs	r4, #3
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 800142a:	6003      	str	r3, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800142c:	4b09      	ldr	r3, [pc, #36]	; (8001454 <HAL_RCC_GetClockConfig+0x30>)
 800142e:	685a      	ldr	r2, [r3, #4]
 8001430:	4022      	ands	r2, r4
 8001432:	6042      	str	r2, [r0, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8001434:	685a      	ldr	r2, [r3, #4]
 8001436:	34ed      	adds	r4, #237	; 0xed
 8001438:	4022      	ands	r2, r4
 800143a:	6082      	str	r2, [r0, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);   
 800143c:	22e0      	movs	r2, #224	; 0xe0
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	00d2      	lsls	r2, r2, #3
 8001442:	4013      	ands	r3, r2
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = __HAL_FLASH_GET_LATENCY(); 
 8001444:	2201      	movs	r2, #1
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);   
 8001446:	60c3      	str	r3, [r0, #12]
  *pFLatency = __HAL_FLASH_GET_LATENCY(); 
 8001448:	4b03      	ldr	r3, [pc, #12]	; (8001458 <HAL_RCC_GetClockConfig+0x34>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4013      	ands	r3, r2
 800144e:	600b      	str	r3, [r1, #0]
}
 8001450:	bd10      	pop	{r4, pc}
 8001452:	46c0      	nop			; (mov r8, r8)
 8001454:	40021000 	.word	0x40021000
 8001458:	40022000 	.word	0x40022000

0800145c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800145c:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800145e:	6803      	ldr	r3, [r0, #0]
{
 8001460:	b085      	sub	sp, #20
 8001462:	0005      	movs	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001464:	03db      	lsls	r3, r3, #15
 8001466:	d528      	bpl.n	80014ba <HAL_RCCEx_PeriphCLKConfig+0x5e>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001468:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 800146a:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800146c:	4c40      	ldr	r4, [pc, #256]	; (8001570 <HAL_RCCEx_PeriphCLKConfig+0x114>)
 800146e:	0552      	lsls	r2, r2, #21
 8001470:	69e3      	ldr	r3, [r4, #28]
    FlagStatus       pwrclkchanged = RESET;
 8001472:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001474:	4213      	tst	r3, r2
 8001476:	d108      	bne.n	800148a <HAL_RCCEx_PeriphCLKConfig+0x2e>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001478:	69e3      	ldr	r3, [r4, #28]
 800147a:	4313      	orrs	r3, r2
 800147c:	61e3      	str	r3, [r4, #28]
 800147e:	69e3      	ldr	r3, [r4, #28]
 8001480:	4013      	ands	r3, r2
 8001482:	9303      	str	r3, [sp, #12]
 8001484:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 8001486:	2301      	movs	r3, #1
 8001488:	9300      	str	r3, [sp, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800148a:	2780      	movs	r7, #128	; 0x80
 800148c:	4e39      	ldr	r6, [pc, #228]	; (8001574 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 800148e:	007f      	lsls	r7, r7, #1
 8001490:	6833      	ldr	r3, [r6, #0]
 8001492:	423b      	tst	r3, r7
 8001494:	d038      	beq.n	8001508 <HAL_RCCEx_PeriphCLKConfig+0xac>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001496:	22c0      	movs	r2, #192	; 0xc0
 8001498:	6a23      	ldr	r3, [r4, #32]
 800149a:	0092      	lsls	r2, r2, #2
 800149c:	4013      	ands	r3, r2
 800149e:	4e36      	ldr	r6, [pc, #216]	; (8001578 <HAL_RCCEx_PeriphCLKConfig+0x11c>)
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80014a0:	d144      	bne.n	800152c <HAL_RCCEx_PeriphCLKConfig+0xd0>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80014a2:	6a23      	ldr	r3, [r4, #32]
 80014a4:	401e      	ands	r6, r3
 80014a6:	686b      	ldr	r3, [r5, #4]
 80014a8:	431e      	orrs	r6, r3

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80014aa:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80014ac:	6226      	str	r6, [r4, #32]
    if(pwrclkchanged == SET)
 80014ae:	2b01      	cmp	r3, #1
 80014b0:	d103      	bne.n	80014ba <HAL_RCCEx_PeriphCLKConfig+0x5e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80014b2:	69e3      	ldr	r3, [r4, #28]
 80014b4:	4a31      	ldr	r2, [pc, #196]	; (800157c <HAL_RCCEx_PeriphCLKConfig+0x120>)
 80014b6:	4013      	ands	r3, r2
 80014b8:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80014ba:	682a      	ldr	r2, [r5, #0]
 80014bc:	07d3      	lsls	r3, r2, #31
 80014be:	d506      	bpl.n	80014ce <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80014c0:	2003      	movs	r0, #3
 80014c2:	492b      	ldr	r1, [pc, #172]	; (8001570 <HAL_RCCEx_PeriphCLKConfig+0x114>)
 80014c4:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 80014c6:	4383      	bics	r3, r0
 80014c8:	68a8      	ldr	r0, [r5, #8]
 80014ca:	4303      	orrs	r3, r0
 80014cc:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80014ce:	0693      	lsls	r3, r2, #26
 80014d0:	d506      	bpl.n	80014e0 <HAL_RCCEx_PeriphCLKConfig+0x84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80014d2:	2010      	movs	r0, #16
 80014d4:	4926      	ldr	r1, [pc, #152]	; (8001570 <HAL_RCCEx_PeriphCLKConfig+0x114>)
 80014d6:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 80014d8:	4383      	bics	r3, r0
 80014da:	68e8      	ldr	r0, [r5, #12]
 80014dc:	4303      	orrs	r3, r0
 80014de:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80014e0:	0393      	lsls	r3, r2, #14
 80014e2:	d506      	bpl.n	80014f2 <HAL_RCCEx_PeriphCLKConfig+0x96>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80014e4:	2080      	movs	r0, #128	; 0x80
 80014e6:	4922      	ldr	r1, [pc, #136]	; (8001570 <HAL_RCCEx_PeriphCLKConfig+0x114>)
 80014e8:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 80014ea:	4383      	bics	r3, r0
 80014ec:	6968      	ldr	r0, [r5, #20]
 80014ee:	4303      	orrs	r3, r0
 80014f0:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80014f2:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80014f4:	0553      	lsls	r3, r2, #21
 80014f6:	d517      	bpl.n	8001528 <HAL_RCCEx_PeriphCLKConfig+0xcc>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80014f8:	2140      	movs	r1, #64	; 0x40
 80014fa:	4a1d      	ldr	r2, [pc, #116]	; (8001570 <HAL_RCCEx_PeriphCLKConfig+0x114>)
 80014fc:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80014fe:	438b      	bics	r3, r1
 8001500:	6929      	ldr	r1, [r5, #16]
 8001502:	430b      	orrs	r3, r1
 8001504:	6313      	str	r3, [r2, #48]	; 0x30
 8001506:	e00f      	b.n	8001528 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001508:	6833      	ldr	r3, [r6, #0]
 800150a:	433b      	orrs	r3, r7
 800150c:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 800150e:	f7ff fa03 	bl	8000918 <HAL_GetTick>
 8001512:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001514:	6833      	ldr	r3, [r6, #0]
 8001516:	423b      	tst	r3, r7
 8001518:	d1bd      	bne.n	8001496 <HAL_RCCEx_PeriphCLKConfig+0x3a>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800151a:	f7ff f9fd 	bl	8000918 <HAL_GetTick>
 800151e:	9b01      	ldr	r3, [sp, #4]
 8001520:	1ac0      	subs	r0, r0, r3
 8001522:	2864      	cmp	r0, #100	; 0x64
 8001524:	d9f6      	bls.n	8001514 <HAL_RCCEx_PeriphCLKConfig+0xb8>
          return HAL_TIMEOUT;
 8001526:	2003      	movs	r0, #3
}
 8001528:	b005      	add	sp, #20
 800152a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800152c:	6869      	ldr	r1, [r5, #4]
 800152e:	400a      	ands	r2, r1
 8001530:	429a      	cmp	r2, r3
 8001532:	d0b6      	beq.n	80014a2 <HAL_RCCEx_PeriphCLKConfig+0x46>
      __HAL_RCC_BACKUPRESET_FORCE();
 8001534:	2380      	movs	r3, #128	; 0x80
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001536:	6a22      	ldr	r2, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8001538:	6a20      	ldr	r0, [r4, #32]
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800153a:	0011      	movs	r1, r2
      __HAL_RCC_BACKUPRESET_FORCE();
 800153c:	025b      	lsls	r3, r3, #9
 800153e:	4303      	orrs	r3, r0
 8001540:	6223      	str	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001542:	6a23      	ldr	r3, [r4, #32]
 8001544:	480e      	ldr	r0, [pc, #56]	; (8001580 <HAL_RCCEx_PeriphCLKConfig+0x124>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001546:	4031      	ands	r1, r6
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001548:	4003      	ands	r3, r0
 800154a:	6223      	str	r3, [r4, #32]
      RCC->BDCR = temp_reg;
 800154c:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800154e:	07d3      	lsls	r3, r2, #31
 8001550:	d5a7      	bpl.n	80014a2 <HAL_RCCEx_PeriphCLKConfig+0x46>
        tickstart = HAL_GetTick();
 8001552:	f7ff f9e1 	bl	8000918 <HAL_GetTick>
 8001556:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001558:	2202      	movs	r2, #2
 800155a:	6a23      	ldr	r3, [r4, #32]
 800155c:	4213      	tst	r3, r2
 800155e:	d1a0      	bne.n	80014a2 <HAL_RCCEx_PeriphCLKConfig+0x46>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001560:	f7ff f9da 	bl	8000918 <HAL_GetTick>
 8001564:	4b07      	ldr	r3, [pc, #28]	; (8001584 <HAL_RCCEx_PeriphCLKConfig+0x128>)
 8001566:	1bc0      	subs	r0, r0, r7
 8001568:	4298      	cmp	r0, r3
 800156a:	d9f5      	bls.n	8001558 <HAL_RCCEx_PeriphCLKConfig+0xfc>
 800156c:	e7db      	b.n	8001526 <HAL_RCCEx_PeriphCLKConfig+0xca>
 800156e:	46c0      	nop			; (mov r8, r8)
 8001570:	40021000 	.word	0x40021000
 8001574:	40007000 	.word	0x40007000
 8001578:	fffffcff 	.word	0xfffffcff
 800157c:	efffffff 	.word	0xefffffff
 8001580:	fffeffff 	.word	0xfffeffff
 8001584:	00001388 	.word	0x00001388

08001588 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001588:	2201      	movs	r2, #1
 800158a:	6a03      	ldr	r3, [r0, #32]
{
 800158c:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800158e:	4393      	bics	r3, r2
 8001590:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001592:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001594:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001596:	6985      	ldr	r5, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001598:	3272      	adds	r2, #114	; 0x72
 800159a:	4395      	bics	r5, r2
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800159c:	680a      	ldr	r2, [r1, #0]
 800159e:	4315      	orrs	r5, r2

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80015a0:	2202      	movs	r2, #2
 80015a2:	4393      	bics	r3, r2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80015a4:	688a      	ldr	r2, [r1, #8]
 80015a6:	4313      	orrs	r3, r2

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80015a8:	4a11      	ldr	r2, [pc, #68]	; (80015f0 <TIM_OC1_SetConfig+0x68>)
 80015aa:	4290      	cmp	r0, r2
 80015ac:	d005      	beq.n	80015ba <TIM_OC1_SetConfig+0x32>
 80015ae:	4e11      	ldr	r6, [pc, #68]	; (80015f4 <TIM_OC1_SetConfig+0x6c>)
 80015b0:	42b0      	cmp	r0, r6
 80015b2:	d002      	beq.n	80015ba <TIM_OC1_SetConfig+0x32>
 80015b4:	4e10      	ldr	r6, [pc, #64]	; (80015f8 <TIM_OC1_SetConfig+0x70>)
 80015b6:	42b0      	cmp	r0, r6
 80015b8:	d113      	bne.n	80015e2 <TIM_OC1_SetConfig+0x5a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80015ba:	2608      	movs	r6, #8
 80015bc:	43b3      	bics	r3, r6
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80015be:	68ce      	ldr	r6, [r1, #12]
 80015c0:	4333      	orrs	r3, r6
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80015c2:	2604      	movs	r6, #4
 80015c4:	43b3      	bics	r3, r6
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80015c6:	4290      	cmp	r0, r2
 80015c8:	d005      	beq.n	80015d6 <TIM_OC1_SetConfig+0x4e>
 80015ca:	4a0a      	ldr	r2, [pc, #40]	; (80015f4 <TIM_OC1_SetConfig+0x6c>)
 80015cc:	4290      	cmp	r0, r2
 80015ce:	d002      	beq.n	80015d6 <TIM_OC1_SetConfig+0x4e>
 80015d0:	4a09      	ldr	r2, [pc, #36]	; (80015f8 <TIM_OC1_SetConfig+0x70>)
 80015d2:	4290      	cmp	r0, r2
 80015d4:	d105      	bne.n	80015e2 <TIM_OC1_SetConfig+0x5a>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80015d6:	4a09      	ldr	r2, [pc, #36]	; (80015fc <TIM_OC1_SetConfig+0x74>)
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80015d8:	698e      	ldr	r6, [r1, #24]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80015da:	4022      	ands	r2, r4
    tmpcr2 |= OC_Config->OCNIdleState;
 80015dc:	694c      	ldr	r4, [r1, #20]
 80015de:	4334      	orrs	r4, r6
 80015e0:	4314      	orrs	r4, r2

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80015e2:	684a      	ldr	r2, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80015e4:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 80015e6:	6185      	str	r5, [r0, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 80015e8:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80015ea:	6203      	str	r3, [r0, #32]
}
 80015ec:	bd70      	pop	{r4, r5, r6, pc}
 80015ee:	46c0      	nop			; (mov r8, r8)
 80015f0:	40012c00 	.word	0x40012c00
 80015f4:	40014400 	.word	0x40014400
 80015f8:	40014800 	.word	0x40014800
 80015fc:	fffffcff 	.word	0xfffffcff

08001600 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001600:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8001602:	2573      	movs	r5, #115	; 0x73
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001604:	6a03      	ldr	r3, [r0, #32]
 8001606:	4a16      	ldr	r2, [pc, #88]	; (8001660 <TIM_OC3_SetConfig+0x60>)
 8001608:	4013      	ands	r3, r2
 800160a:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 800160c:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 800160e:	6842      	ldr	r2, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 8001610:	69c4      	ldr	r4, [r0, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8001612:	43ac      	bics	r4, r5
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001614:	680d      	ldr	r5, [r1, #0]
 8001616:	432c      	orrs	r4, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8001618:	4d12      	ldr	r5, [pc, #72]	; (8001664 <TIM_OC3_SetConfig+0x64>)
 800161a:	402b      	ands	r3, r5
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800161c:	688d      	ldr	r5, [r1, #8]
 800161e:	022d      	lsls	r5, r5, #8
 8001620:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8001622:	4d11      	ldr	r5, [pc, #68]	; (8001668 <TIM_OC3_SetConfig+0x68>)
 8001624:	42a8      	cmp	r0, r5
 8001626:	d10e      	bne.n	8001646 <TIM_OC3_SetConfig+0x46>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8001628:	4d10      	ldr	r5, [pc, #64]	; (800166c <TIM_OC3_SetConfig+0x6c>)
 800162a:	401d      	ands	r5, r3
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800162c:	68cb      	ldr	r3, [r1, #12]
 800162e:	021b      	lsls	r3, r3, #8
 8001630:	432b      	orrs	r3, r5
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8001632:	4d0f      	ldr	r5, [pc, #60]	; (8001670 <TIM_OC3_SetConfig+0x70>)
 8001634:	402b      	ands	r3, r5
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8001636:	4d0f      	ldr	r5, [pc, #60]	; (8001674 <TIM_OC3_SetConfig+0x74>)
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001638:	694e      	ldr	r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800163a:	4015      	ands	r5, r2
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800163c:	698a      	ldr	r2, [r1, #24]
 800163e:	4332      	orrs	r2, r6
 8001640:	0112      	lsls	r2, r2, #4
 8001642:	432a      	orrs	r2, r5
 8001644:	e005      	b.n	8001652 <TIM_OC3_SetConfig+0x52>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001646:	4d0c      	ldr	r5, [pc, #48]	; (8001678 <TIM_OC3_SetConfig+0x78>)
 8001648:	42a8      	cmp	r0, r5
 800164a:	d0f4      	beq.n	8001636 <TIM_OC3_SetConfig+0x36>
 800164c:	4d0b      	ldr	r5, [pc, #44]	; (800167c <TIM_OC3_SetConfig+0x7c>)
 800164e:	42a8      	cmp	r0, r5
 8001650:	d0f1      	beq.n	8001636 <TIM_OC3_SetConfig+0x36>
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001652:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8001654:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 8001656:	61c4      	str	r4, [r0, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 8001658:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800165a:	6203      	str	r3, [r0, #32]
}
 800165c:	bd70      	pop	{r4, r5, r6, pc}
 800165e:	46c0      	nop			; (mov r8, r8)
 8001660:	fffffeff 	.word	0xfffffeff
 8001664:	fffffdff 	.word	0xfffffdff
 8001668:	40012c00 	.word	0x40012c00
 800166c:	fffff7ff 	.word	0xfffff7ff
 8001670:	fffffbff 	.word	0xfffffbff
 8001674:	ffffcfff 	.word	0xffffcfff
 8001678:	40014400 	.word	0x40014400
 800167c:	40014800 	.word	0x40014800

08001680 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001680:	6a03      	ldr	r3, [r0, #32]
 8001682:	4a12      	ldr	r2, [pc, #72]	; (80016cc <TIM_OC4_SetConfig+0x4c>)
{
 8001684:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001686:	4013      	ands	r3, r2
 8001688:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800168a:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800168c:	4c10      	ldr	r4, [pc, #64]	; (80016d0 <TIM_OC4_SetConfig+0x50>)
  tmpcr2 =  TIMx->CR2;
 800168e:	6843      	ldr	r3, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 8001690:	69c5      	ldr	r5, [r0, #28]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001692:	4025      	ands	r5, r4

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001694:	680c      	ldr	r4, [r1, #0]
 8001696:	0224      	lsls	r4, r4, #8
 8001698:	4325      	orrs	r5, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800169a:	4c0e      	ldr	r4, [pc, #56]	; (80016d4 <TIM_OC4_SetConfig+0x54>)
 800169c:	4022      	ands	r2, r4
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800169e:	688c      	ldr	r4, [r1, #8]
 80016a0:	0324      	lsls	r4, r4, #12
 80016a2:	4322      	orrs	r2, r4

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80016a4:	4c0c      	ldr	r4, [pc, #48]	; (80016d8 <TIM_OC4_SetConfig+0x58>)
 80016a6:	42a0      	cmp	r0, r4
 80016a8:	d005      	beq.n	80016b6 <TIM_OC4_SetConfig+0x36>
 80016aa:	4c0c      	ldr	r4, [pc, #48]	; (80016dc <TIM_OC4_SetConfig+0x5c>)
 80016ac:	42a0      	cmp	r0, r4
 80016ae:	d002      	beq.n	80016b6 <TIM_OC4_SetConfig+0x36>
 80016b0:	4c0b      	ldr	r4, [pc, #44]	; (80016e0 <TIM_OC4_SetConfig+0x60>)
 80016b2:	42a0      	cmp	r0, r4
 80016b4:	d104      	bne.n	80016c0 <TIM_OC4_SetConfig+0x40>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80016b6:	4c0b      	ldr	r4, [pc, #44]	; (80016e4 <TIM_OC4_SetConfig+0x64>)
 80016b8:	4023      	ands	r3, r4

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80016ba:	694c      	ldr	r4, [r1, #20]
 80016bc:	01a4      	lsls	r4, r4, #6
 80016be:	4323      	orrs	r3, r4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80016c0:	6043      	str	r3, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80016c2:	684b      	ldr	r3, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 80016c4:	61c5      	str	r5, [r0, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 80016c6:	6403      	str	r3, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80016c8:	6202      	str	r2, [r0, #32]
}
 80016ca:	bd30      	pop	{r4, r5, pc}
 80016cc:	ffffefff 	.word	0xffffefff
 80016d0:	ffff8cff 	.word	0xffff8cff
 80016d4:	ffffdfff 	.word	0xffffdfff
 80016d8:	40012c00 	.word	0x40012c00
 80016dc:	40014400 	.word	0x40014400
 80016e0:	40014800 	.word	0x40014800
 80016e4:	ffffbfff 	.word	0xffffbfff

080016e8 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 80016e8:	0003      	movs	r3, r0
    return HAL_ERROR;
 80016ea:	2201      	movs	r2, #1
  if (htim->State != HAL_TIM_STATE_READY)
 80016ec:	333d      	adds	r3, #61	; 0x3d
 80016ee:	7819      	ldrb	r1, [r3, #0]
 80016f0:	4291      	cmp	r1, r2
 80016f2:	d11a      	bne.n	800172a <HAL_TIM_Base_Start_IT+0x42>
  htim->State = HAL_TIM_STATE_BUSY;
 80016f4:	2102      	movs	r1, #2
 80016f6:	7019      	strb	r1, [r3, #0]
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80016f8:	6803      	ldr	r3, [r0, #0]
 80016fa:	68d9      	ldr	r1, [r3, #12]
 80016fc:	4311      	orrs	r1, r2
 80016fe:	60d9      	str	r1, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001700:	490c      	ldr	r1, [pc, #48]	; (8001734 <HAL_TIM_Base_Start_IT+0x4c>)
 8001702:	428b      	cmp	r3, r1
 8001704:	d006      	beq.n	8001714 <HAL_TIM_Base_Start_IT+0x2c>
 8001706:	2180      	movs	r1, #128	; 0x80
 8001708:	05c9      	lsls	r1, r1, #23
 800170a:	428b      	cmp	r3, r1
 800170c:	d002      	beq.n	8001714 <HAL_TIM_Base_Start_IT+0x2c>
 800170e:	490a      	ldr	r1, [pc, #40]	; (8001738 <HAL_TIM_Base_Start_IT+0x50>)
 8001710:	428b      	cmp	r3, r1
 8001712:	d10c      	bne.n	800172e <HAL_TIM_Base_Start_IT+0x46>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001714:	2207      	movs	r2, #7
 8001716:	6899      	ldr	r1, [r3, #8]
 8001718:	4011      	ands	r1, r2
  return HAL_OK;
 800171a:	2200      	movs	r2, #0
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800171c:	2906      	cmp	r1, #6
 800171e:	d004      	beq.n	800172a <HAL_TIM_Base_Start_IT+0x42>
      __HAL_TIM_ENABLE(htim);
 8001720:	6819      	ldr	r1, [r3, #0]
 8001722:	3201      	adds	r2, #1
 8001724:	430a      	orrs	r2, r1
    __HAL_TIM_ENABLE(htim);
 8001726:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8001728:	2200      	movs	r2, #0
}
 800172a:	0010      	movs	r0, r2
 800172c:	4770      	bx	lr
    __HAL_TIM_ENABLE(htim);
 800172e:	6818      	ldr	r0, [r3, #0]
 8001730:	4302      	orrs	r2, r0
 8001732:	e7f8      	b.n	8001726 <HAL_TIM_Base_Start_IT+0x3e>
 8001734:	40012c00 	.word	0x40012c00
 8001738:	40000400 	.word	0x40000400

0800173c <HAL_TIM_PWM_MspInit>:
 800173c:	4770      	bx	lr

0800173e <HAL_TIM_OC_DelayElapsedCallback>:
 800173e:	4770      	bx	lr

08001740 <HAL_TIM_IC_CaptureCallback>:
 8001740:	4770      	bx	lr

08001742 <HAL_TIM_PWM_PulseFinishedCallback>:
 8001742:	4770      	bx	lr

08001744 <HAL_TIM_TriggerCallback>:
 8001744:	4770      	bx	lr

08001746 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001746:	2202      	movs	r2, #2
 8001748:	6803      	ldr	r3, [r0, #0]
{
 800174a:	b510      	push	{r4, lr}
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800174c:	6919      	ldr	r1, [r3, #16]
{
 800174e:	0004      	movs	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001750:	4211      	tst	r1, r2
 8001752:	d00e      	beq.n	8001772 <HAL_TIM_IRQHandler+0x2c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001754:	68d9      	ldr	r1, [r3, #12]
 8001756:	4211      	tst	r1, r2
 8001758:	d00b      	beq.n	8001772 <HAL_TIM_IRQHandler+0x2c>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800175a:	3a05      	subs	r2, #5
 800175c:	611a      	str	r2, [r3, #16]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800175e:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001760:	3204      	adds	r2, #4
 8001762:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001764:	079b      	lsls	r3, r3, #30
 8001766:	d100      	bne.n	800176a <HAL_TIM_IRQHandler+0x24>
 8001768:	e079      	b.n	800185e <HAL_TIM_IRQHandler+0x118>
          HAL_TIM_IC_CaptureCallback(htim);
 800176a:	f7ff ffe9 	bl	8001740 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800176e:	2300      	movs	r3, #0
 8001770:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001772:	2204      	movs	r2, #4
 8001774:	6823      	ldr	r3, [r4, #0]
 8001776:	6919      	ldr	r1, [r3, #16]
 8001778:	4211      	tst	r1, r2
 800177a:	d010      	beq.n	800179e <HAL_TIM_IRQHandler+0x58>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800177c:	68d9      	ldr	r1, [r3, #12]
 800177e:	4211      	tst	r1, r2
 8001780:	d00d      	beq.n	800179e <HAL_TIM_IRQHandler+0x58>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001782:	3a09      	subs	r2, #9
 8001784:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001786:	3207      	adds	r2, #7
 8001788:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800178a:	699a      	ldr	r2, [r3, #24]
 800178c:	23c0      	movs	r3, #192	; 0xc0
 800178e:	009b      	lsls	r3, r3, #2
        HAL_TIM_IC_CaptureCallback(htim);
 8001790:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001792:	421a      	tst	r2, r3
 8001794:	d069      	beq.n	800186a <HAL_TIM_IRQHandler+0x124>
        HAL_TIM_IC_CaptureCallback(htim);
 8001796:	f7ff ffd3 	bl	8001740 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800179a:	2300      	movs	r3, #0
 800179c:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800179e:	2208      	movs	r2, #8
 80017a0:	6823      	ldr	r3, [r4, #0]
 80017a2:	6919      	ldr	r1, [r3, #16]
 80017a4:	4211      	tst	r1, r2
 80017a6:	d00e      	beq.n	80017c6 <HAL_TIM_IRQHandler+0x80>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80017a8:	68d9      	ldr	r1, [r3, #12]
 80017aa:	4211      	tst	r1, r2
 80017ac:	d00b      	beq.n	80017c6 <HAL_TIM_IRQHandler+0x80>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80017ae:	3a11      	subs	r2, #17
 80017b0:	611a      	str	r2, [r3, #16]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80017b2:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80017b4:	320d      	adds	r2, #13
 80017b6:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 80017b8:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80017ba:	079b      	lsls	r3, r3, #30
 80017bc:	d05b      	beq.n	8001876 <HAL_TIM_IRQHandler+0x130>
        HAL_TIM_IC_CaptureCallback(htim);
 80017be:	f7ff ffbf 	bl	8001740 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80017c2:	2300      	movs	r3, #0
 80017c4:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80017c6:	2210      	movs	r2, #16
 80017c8:	6823      	ldr	r3, [r4, #0]
 80017ca:	6919      	ldr	r1, [r3, #16]
 80017cc:	4211      	tst	r1, r2
 80017ce:	d010      	beq.n	80017f2 <HAL_TIM_IRQHandler+0xac>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80017d0:	68d9      	ldr	r1, [r3, #12]
 80017d2:	4211      	tst	r1, r2
 80017d4:	d00d      	beq.n	80017f2 <HAL_TIM_IRQHandler+0xac>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80017d6:	3a21      	subs	r2, #33	; 0x21
 80017d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80017da:	3219      	adds	r2, #25
 80017dc:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80017de:	69da      	ldr	r2, [r3, #28]
 80017e0:	23c0      	movs	r3, #192	; 0xc0
 80017e2:	009b      	lsls	r3, r3, #2
        HAL_TIM_IC_CaptureCallback(htim);
 80017e4:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80017e6:	421a      	tst	r2, r3
 80017e8:	d04b      	beq.n	8001882 <HAL_TIM_IRQHandler+0x13c>
        HAL_TIM_IC_CaptureCallback(htim);
 80017ea:	f7ff ffa9 	bl	8001740 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80017ee:	2300      	movs	r3, #0
 80017f0:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80017f2:	2201      	movs	r2, #1
 80017f4:	6823      	ldr	r3, [r4, #0]
 80017f6:	6919      	ldr	r1, [r3, #16]
 80017f8:	4211      	tst	r1, r2
 80017fa:	d007      	beq.n	800180c <HAL_TIM_IRQHandler+0xc6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80017fc:	68d9      	ldr	r1, [r3, #12]
 80017fe:	4211      	tst	r1, r2
 8001800:	d004      	beq.n	800180c <HAL_TIM_IRQHandler+0xc6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001802:	3a03      	subs	r2, #3
 8001804:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8001806:	0020      	movs	r0, r4
 8001808:	f7fe fec4 	bl	8000594 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800180c:	2280      	movs	r2, #128	; 0x80
 800180e:	6823      	ldr	r3, [r4, #0]
 8001810:	6919      	ldr	r1, [r3, #16]
 8001812:	4211      	tst	r1, r2
 8001814:	d008      	beq.n	8001828 <HAL_TIM_IRQHandler+0xe2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001816:	68d9      	ldr	r1, [r3, #12]
 8001818:	4211      	tst	r1, r2
 800181a:	d005      	beq.n	8001828 <HAL_TIM_IRQHandler+0xe2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800181c:	3a02      	subs	r2, #2
 800181e:	3aff      	subs	r2, #255	; 0xff
 8001820:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8001822:	0020      	movs	r0, r4
 8001824:	f000 fa39 	bl	8001c9a <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001828:	2240      	movs	r2, #64	; 0x40
 800182a:	6823      	ldr	r3, [r4, #0]
 800182c:	6919      	ldr	r1, [r3, #16]
 800182e:	4211      	tst	r1, r2
 8001830:	d007      	beq.n	8001842 <HAL_TIM_IRQHandler+0xfc>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001832:	68d9      	ldr	r1, [r3, #12]
 8001834:	4211      	tst	r1, r2
 8001836:	d004      	beq.n	8001842 <HAL_TIM_IRQHandler+0xfc>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001838:	3a81      	subs	r2, #129	; 0x81
 800183a:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800183c:	0020      	movs	r0, r4
 800183e:	f7ff ff81 	bl	8001744 <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001842:	2220      	movs	r2, #32
 8001844:	6823      	ldr	r3, [r4, #0]
 8001846:	6919      	ldr	r1, [r3, #16]
 8001848:	4211      	tst	r1, r2
 800184a:	d007      	beq.n	800185c <HAL_TIM_IRQHandler+0x116>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800184c:	68d9      	ldr	r1, [r3, #12]
 800184e:	4211      	tst	r1, r2
 8001850:	d004      	beq.n	800185c <HAL_TIM_IRQHandler+0x116>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001852:	3a41      	subs	r2, #65	; 0x41
 8001854:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8001856:	0020      	movs	r0, r4
 8001858:	f000 fa1e 	bl	8001c98 <HAL_TIMEx_CommutCallback>
}
 800185c:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800185e:	f7ff ff6e 	bl	800173e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001862:	0020      	movs	r0, r4
 8001864:	f7ff ff6d 	bl	8001742 <HAL_TIM_PWM_PulseFinishedCallback>
 8001868:	e781      	b.n	800176e <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800186a:	f7ff ff68 	bl	800173e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800186e:	0020      	movs	r0, r4
 8001870:	f7ff ff67 	bl	8001742 <HAL_TIM_PWM_PulseFinishedCallback>
 8001874:	e791      	b.n	800179a <HAL_TIM_IRQHandler+0x54>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001876:	f7ff ff62 	bl	800173e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800187a:	0020      	movs	r0, r4
 800187c:	f7ff ff61 	bl	8001742 <HAL_TIM_PWM_PulseFinishedCallback>
 8001880:	e79f      	b.n	80017c2 <HAL_TIM_IRQHandler+0x7c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001882:	f7ff ff5c 	bl	800173e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001886:	0020      	movs	r0, r4
 8001888:	f7ff ff5b 	bl	8001742 <HAL_TIM_PWM_PulseFinishedCallback>
 800188c:	e7af      	b.n	80017ee <HAL_TIM_IRQHandler+0xa8>
	...

08001890 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001890:	4a1d      	ldr	r2, [pc, #116]	; (8001908 <TIM_Base_SetConfig+0x78>)
{
 8001892:	b510      	push	{r4, lr}
  tmpcr1 = TIMx->CR1;
 8001894:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001896:	4290      	cmp	r0, r2
 8001898:	d006      	beq.n	80018a8 <TIM_Base_SetConfig+0x18>
 800189a:	2480      	movs	r4, #128	; 0x80
 800189c:	05e4      	lsls	r4, r4, #23
 800189e:	42a0      	cmp	r0, r4
 80018a0:	d002      	beq.n	80018a8 <TIM_Base_SetConfig+0x18>
 80018a2:	4c1a      	ldr	r4, [pc, #104]	; (800190c <TIM_Base_SetConfig+0x7c>)
 80018a4:	42a0      	cmp	r0, r4
 80018a6:	d10c      	bne.n	80018c2 <TIM_Base_SetConfig+0x32>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80018a8:	2470      	movs	r4, #112	; 0x70
 80018aa:	43a3      	bics	r3, r4
    tmpcr1 |= Structure->CounterMode;
 80018ac:	684c      	ldr	r4, [r1, #4]
 80018ae:	4323      	orrs	r3, r4
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80018b0:	4290      	cmp	r0, r2
 80018b2:	d00f      	beq.n	80018d4 <TIM_Base_SetConfig+0x44>
 80018b4:	2480      	movs	r4, #128	; 0x80
 80018b6:	05e4      	lsls	r4, r4, #23
 80018b8:	42a0      	cmp	r0, r4
 80018ba:	d00b      	beq.n	80018d4 <TIM_Base_SetConfig+0x44>
 80018bc:	4c13      	ldr	r4, [pc, #76]	; (800190c <TIM_Base_SetConfig+0x7c>)
 80018be:	42a0      	cmp	r0, r4
 80018c0:	d008      	beq.n	80018d4 <TIM_Base_SetConfig+0x44>
 80018c2:	4c13      	ldr	r4, [pc, #76]	; (8001910 <TIM_Base_SetConfig+0x80>)
 80018c4:	42a0      	cmp	r0, r4
 80018c6:	d005      	beq.n	80018d4 <TIM_Base_SetConfig+0x44>
 80018c8:	4c12      	ldr	r4, [pc, #72]	; (8001914 <TIM_Base_SetConfig+0x84>)
 80018ca:	42a0      	cmp	r0, r4
 80018cc:	d002      	beq.n	80018d4 <TIM_Base_SetConfig+0x44>
 80018ce:	4c12      	ldr	r4, [pc, #72]	; (8001918 <TIM_Base_SetConfig+0x88>)
 80018d0:	42a0      	cmp	r0, r4
 80018d2:	d103      	bne.n	80018dc <TIM_Base_SetConfig+0x4c>
    tmpcr1 &= ~TIM_CR1_CKD;
 80018d4:	4c11      	ldr	r4, [pc, #68]	; (800191c <TIM_Base_SetConfig+0x8c>)
 80018d6:	4023      	ands	r3, r4
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80018d8:	68cc      	ldr	r4, [r1, #12]
 80018da:	4323      	orrs	r3, r4
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80018dc:	2480      	movs	r4, #128	; 0x80
 80018de:	43a3      	bics	r3, r4
 80018e0:	694c      	ldr	r4, [r1, #20]
 80018e2:	4323      	orrs	r3, r4
  TIMx->CR1 = tmpcr1;
 80018e4:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80018e6:	688b      	ldr	r3, [r1, #8]
 80018e8:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80018ea:	680b      	ldr	r3, [r1, #0]
 80018ec:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80018ee:	4290      	cmp	r0, r2
 80018f0:	d005      	beq.n	80018fe <TIM_Base_SetConfig+0x6e>
 80018f2:	4b08      	ldr	r3, [pc, #32]	; (8001914 <TIM_Base_SetConfig+0x84>)
 80018f4:	4298      	cmp	r0, r3
 80018f6:	d002      	beq.n	80018fe <TIM_Base_SetConfig+0x6e>
 80018f8:	4b07      	ldr	r3, [pc, #28]	; (8001918 <TIM_Base_SetConfig+0x88>)
 80018fa:	4298      	cmp	r0, r3
 80018fc:	d101      	bne.n	8001902 <TIM_Base_SetConfig+0x72>
    TIMx->RCR = Structure->RepetitionCounter;
 80018fe:	690b      	ldr	r3, [r1, #16]
 8001900:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8001902:	2301      	movs	r3, #1
 8001904:	6143      	str	r3, [r0, #20]
}
 8001906:	bd10      	pop	{r4, pc}
 8001908:	40012c00 	.word	0x40012c00
 800190c:	40000400 	.word	0x40000400
 8001910:	40002000 	.word	0x40002000
 8001914:	40014400 	.word	0x40014400
 8001918:	40014800 	.word	0x40014800
 800191c:	fffffcff 	.word	0xfffffcff

08001920 <HAL_TIM_Base_Init>:
{
 8001920:	b570      	push	{r4, r5, r6, lr}
 8001922:	0004      	movs	r4, r0
    return HAL_ERROR;
 8001924:	2001      	movs	r0, #1
  if (htim == NULL)
 8001926:	2c00      	cmp	r4, #0
 8001928:	d021      	beq.n	800196e <HAL_TIM_Base_Init+0x4e>
  if (htim->State == HAL_TIM_STATE_RESET)
 800192a:	0025      	movs	r5, r4
 800192c:	353d      	adds	r5, #61	; 0x3d
 800192e:	782b      	ldrb	r3, [r5, #0]
 8001930:	b2db      	uxtb	r3, r3
 8001932:	2b00      	cmp	r3, #0
 8001934:	d105      	bne.n	8001942 <HAL_TIM_Base_Init+0x22>
    htim->Lock = HAL_UNLOCKED;
 8001936:	0022      	movs	r2, r4
 8001938:	323c      	adds	r2, #60	; 0x3c
 800193a:	7013      	strb	r3, [r2, #0]
    HAL_TIM_Base_MspInit(htim);
 800193c:	0020      	movs	r0, r4
 800193e:	f7fe fea3 	bl	8000688 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8001942:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001944:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8001946:	702b      	strb	r3, [r5, #0]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001948:	1d21      	adds	r1, r4, #4
 800194a:	f7ff ffa1 	bl	8001890 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800194e:	0022      	movs	r2, r4
 8001950:	2301      	movs	r3, #1
  return HAL_OK;
 8001952:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001954:	3246      	adds	r2, #70	; 0x46
 8001956:	7013      	strb	r3, [r2, #0]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001958:	3445      	adds	r4, #69	; 0x45
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800195a:	3a08      	subs	r2, #8
 800195c:	7013      	strb	r3, [r2, #0]
 800195e:	7053      	strb	r3, [r2, #1]
 8001960:	7093      	strb	r3, [r2, #2]
 8001962:	70d3      	strb	r3, [r2, #3]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001964:	7113      	strb	r3, [r2, #4]
 8001966:	7153      	strb	r3, [r2, #5]
 8001968:	7193      	strb	r3, [r2, #6]
 800196a:	7023      	strb	r3, [r4, #0]
  htim->State = HAL_TIM_STATE_READY;
 800196c:	702b      	strb	r3, [r5, #0]
}
 800196e:	bd70      	pop	{r4, r5, r6, pc}

08001970 <HAL_TIM_PWM_Init>:
{
 8001970:	b570      	push	{r4, r5, r6, lr}
 8001972:	0004      	movs	r4, r0
    return HAL_ERROR;
 8001974:	2001      	movs	r0, #1
  if (htim == NULL)
 8001976:	2c00      	cmp	r4, #0
 8001978:	d021      	beq.n	80019be <HAL_TIM_PWM_Init+0x4e>
  if (htim->State == HAL_TIM_STATE_RESET)
 800197a:	0025      	movs	r5, r4
 800197c:	353d      	adds	r5, #61	; 0x3d
 800197e:	782b      	ldrb	r3, [r5, #0]
 8001980:	b2db      	uxtb	r3, r3
 8001982:	2b00      	cmp	r3, #0
 8001984:	d105      	bne.n	8001992 <HAL_TIM_PWM_Init+0x22>
    htim->Lock = HAL_UNLOCKED;
 8001986:	0022      	movs	r2, r4
 8001988:	323c      	adds	r2, #60	; 0x3c
 800198a:	7013      	strb	r3, [r2, #0]
    HAL_TIM_PWM_MspInit(htim);
 800198c:	0020      	movs	r0, r4
 800198e:	f7ff fed5 	bl	800173c <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8001992:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001994:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8001996:	702b      	strb	r3, [r5, #0]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001998:	1d21      	adds	r1, r4, #4
 800199a:	f7ff ff79 	bl	8001890 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800199e:	0022      	movs	r2, r4
 80019a0:	2301      	movs	r3, #1
  return HAL_OK;
 80019a2:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80019a4:	3246      	adds	r2, #70	; 0x46
 80019a6:	7013      	strb	r3, [r2, #0]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80019a8:	3445      	adds	r4, #69	; 0x45
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80019aa:	3a08      	subs	r2, #8
 80019ac:	7013      	strb	r3, [r2, #0]
 80019ae:	7053      	strb	r3, [r2, #1]
 80019b0:	7093      	strb	r3, [r2, #2]
 80019b2:	70d3      	strb	r3, [r2, #3]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80019b4:	7113      	strb	r3, [r2, #4]
 80019b6:	7153      	strb	r3, [r2, #5]
 80019b8:	7193      	strb	r3, [r2, #6]
 80019ba:	7023      	strb	r3, [r4, #0]
  htim->State = HAL_TIM_STATE_READY;
 80019bc:	702b      	strb	r3, [r5, #0]
}
 80019be:	bd70      	pop	{r4, r5, r6, pc}

080019c0 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80019c0:	2210      	movs	r2, #16
 80019c2:	6a03      	ldr	r3, [r0, #32]
{
 80019c4:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80019c6:	4393      	bics	r3, r2
 80019c8:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 80019ca:	6a02      	ldr	r2, [r0, #32]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80019cc:	4d15      	ldr	r5, [pc, #84]	; (8001a24 <TIM_OC2_SetConfig+0x64>)
  tmpcr2 =  TIMx->CR2;
 80019ce:	6843      	ldr	r3, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 80019d0:	6984      	ldr	r4, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80019d2:	402c      	ands	r4, r5
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80019d4:	680d      	ldr	r5, [r1, #0]
 80019d6:	022d      	lsls	r5, r5, #8
 80019d8:	432c      	orrs	r4, r5
  tmpccer &= ~TIM_CCER_CC2P;
 80019da:	2520      	movs	r5, #32
 80019dc:	43aa      	bics	r2, r5
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80019de:	688d      	ldr	r5, [r1, #8]
 80019e0:	012d      	lsls	r5, r5, #4
 80019e2:	432a      	orrs	r2, r5
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80019e4:	4d10      	ldr	r5, [pc, #64]	; (8001a28 <TIM_OC2_SetConfig+0x68>)
 80019e6:	42a8      	cmp	r0, r5
 80019e8:	d10f      	bne.n	8001a0a <TIM_OC2_SetConfig+0x4a>
    tmpccer &= ~TIM_CCER_CC2NP;
 80019ea:	2580      	movs	r5, #128	; 0x80
 80019ec:	43aa      	bics	r2, r5
 80019ee:	0015      	movs	r5, r2
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80019f0:	68ca      	ldr	r2, [r1, #12]
 80019f2:	0112      	lsls	r2, r2, #4
 80019f4:	432a      	orrs	r2, r5
    tmpccer &= ~TIM_CCER_CC2NE;
 80019f6:	2540      	movs	r5, #64	; 0x40
 80019f8:	43aa      	bics	r2, r5
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80019fa:	4d0c      	ldr	r5, [pc, #48]	; (8001a2c <TIM_OC2_SetConfig+0x6c>)
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80019fc:	694e      	ldr	r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80019fe:	401d      	ands	r5, r3
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001a00:	698b      	ldr	r3, [r1, #24]
 8001a02:	4333      	orrs	r3, r6
 8001a04:	009b      	lsls	r3, r3, #2
 8001a06:	432b      	orrs	r3, r5
 8001a08:	e005      	b.n	8001a16 <TIM_OC2_SetConfig+0x56>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001a0a:	4d09      	ldr	r5, [pc, #36]	; (8001a30 <TIM_OC2_SetConfig+0x70>)
 8001a0c:	42a8      	cmp	r0, r5
 8001a0e:	d0f4      	beq.n	80019fa <TIM_OC2_SetConfig+0x3a>
 8001a10:	4d08      	ldr	r5, [pc, #32]	; (8001a34 <TIM_OC2_SetConfig+0x74>)
 8001a12:	42a8      	cmp	r0, r5
 8001a14:	d0f1      	beq.n	80019fa <TIM_OC2_SetConfig+0x3a>
  TIMx->CR2 = tmpcr2;
 8001a16:	6043      	str	r3, [r0, #4]
  TIMx->CCR2 = OC_Config->Pulse;
 8001a18:	684b      	ldr	r3, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 8001a1a:	6184      	str	r4, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8001a1c:	6383      	str	r3, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8001a1e:	6202      	str	r2, [r0, #32]
}
 8001a20:	bd70      	pop	{r4, r5, r6, pc}
 8001a22:	46c0      	nop			; (mov r8, r8)
 8001a24:	ffff8cff 	.word	0xffff8cff
 8001a28:	40012c00 	.word	0x40012c00
 8001a2c:	fffff3ff 	.word	0xfffff3ff
 8001a30:	40014400 	.word	0x40014400
 8001a34:	40014800 	.word	0x40014800

08001a38 <HAL_TIM_PWM_ConfigChannel>:
{
 8001a38:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 8001a3a:	0006      	movs	r6, r0
 8001a3c:	363c      	adds	r6, #60	; 0x3c
 8001a3e:	7833      	ldrb	r3, [r6, #0]
{
 8001a40:	0004      	movs	r4, r0
 8001a42:	000d      	movs	r5, r1
  __HAL_LOCK(htim);
 8001a44:	2002      	movs	r0, #2
 8001a46:	2b01      	cmp	r3, #1
 8001a48:	d01f      	beq.n	8001a8a <HAL_TIM_PWM_ConfigChannel+0x52>
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	7033      	strb	r3, [r6, #0]
  switch (Channel)
 8001a4e:	2a0c      	cmp	r2, #12
 8001a50:	d819      	bhi.n	8001a86 <HAL_TIM_PWM_ConfigChannel+0x4e>
 8001a52:	0010      	movs	r0, r2
 8001a54:	f7fe fb6a 	bl	800012c <__gnu_thumb1_case_uqi>
 8001a58:	17171707 	.word	0x17171707
 8001a5c:	1717171a 	.word	0x1717171a
 8001a60:	1717172b 	.word	0x1717172b
 8001a64:	3c          	.byte	0x3c
 8001a65:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001a66:	6820      	ldr	r0, [r4, #0]
 8001a68:	f7ff fd8e 	bl	8001588 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001a6c:	2208      	movs	r2, #8
 8001a6e:	6823      	ldr	r3, [r4, #0]
 8001a70:	6999      	ldr	r1, [r3, #24]
 8001a72:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001a74:	2104      	movs	r1, #4
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001a76:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001a78:	699a      	ldr	r2, [r3, #24]
 8001a7a:	438a      	bics	r2, r1
 8001a7c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001a7e:	699a      	ldr	r2, [r3, #24]
 8001a80:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001a82:	430a      	orrs	r2, r1
 8001a84:	619a      	str	r2, [r3, #24]
  __HAL_UNLOCK(htim);
 8001a86:	2000      	movs	r0, #0
 8001a88:	7030      	strb	r0, [r6, #0]
}
 8001a8a:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001a8c:	6820      	ldr	r0, [r4, #0]
 8001a8e:	f7ff ff97 	bl	80019c0 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001a92:	2280      	movs	r2, #128	; 0x80
 8001a94:	6823      	ldr	r3, [r4, #0]
 8001a96:	0112      	lsls	r2, r2, #4
 8001a98:	6999      	ldr	r1, [r3, #24]
 8001a9a:	430a      	orrs	r2, r1
 8001a9c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001a9e:	699a      	ldr	r2, [r3, #24]
 8001aa0:	4914      	ldr	r1, [pc, #80]	; (8001af4 <HAL_TIM_PWM_ConfigChannel+0xbc>)
 8001aa2:	400a      	ands	r2, r1
 8001aa4:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001aa6:	692a      	ldr	r2, [r5, #16]
 8001aa8:	6999      	ldr	r1, [r3, #24]
 8001aaa:	0212      	lsls	r2, r2, #8
 8001aac:	e7e9      	b.n	8001a82 <HAL_TIM_PWM_ConfigChannel+0x4a>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001aae:	6820      	ldr	r0, [r4, #0]
 8001ab0:	f7ff fda6 	bl	8001600 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001ab4:	2208      	movs	r2, #8
 8001ab6:	6823      	ldr	r3, [r4, #0]
 8001ab8:	69d9      	ldr	r1, [r3, #28]
 8001aba:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001abc:	2104      	movs	r1, #4
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001abe:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001ac0:	69da      	ldr	r2, [r3, #28]
 8001ac2:	438a      	bics	r2, r1
 8001ac4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001ac6:	69da      	ldr	r2, [r3, #28]
 8001ac8:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001aca:	430a      	orrs	r2, r1
 8001acc:	61da      	str	r2, [r3, #28]
      break;
 8001ace:	e7da      	b.n	8001a86 <HAL_TIM_PWM_ConfigChannel+0x4e>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001ad0:	6820      	ldr	r0, [r4, #0]
 8001ad2:	f7ff fdd5 	bl	8001680 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001ad6:	2280      	movs	r2, #128	; 0x80
 8001ad8:	6823      	ldr	r3, [r4, #0]
 8001ada:	0112      	lsls	r2, r2, #4
 8001adc:	69d9      	ldr	r1, [r3, #28]
 8001ade:	430a      	orrs	r2, r1
 8001ae0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001ae2:	69da      	ldr	r2, [r3, #28]
 8001ae4:	4903      	ldr	r1, [pc, #12]	; (8001af4 <HAL_TIM_PWM_ConfigChannel+0xbc>)
 8001ae6:	400a      	ands	r2, r1
 8001ae8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001aea:	692a      	ldr	r2, [r5, #16]
 8001aec:	69d9      	ldr	r1, [r3, #28]
 8001aee:	0212      	lsls	r2, r2, #8
 8001af0:	e7eb      	b.n	8001aca <HAL_TIM_PWM_ConfigChannel+0x92>
 8001af2:	46c0      	nop			; (mov r8, r8)
 8001af4:	fffffbff 	.word	0xfffffbff

08001af8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001af8:	b530      	push	{r4, r5, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8001afa:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001afc:	4d03      	ldr	r5, [pc, #12]	; (8001b0c <TIM_ETR_SetConfig+0x14>)

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001afe:	430a      	orrs	r2, r1
 8001b00:	021b      	lsls	r3, r3, #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001b02:	402c      	ands	r4, r5
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001b04:	4313      	orrs	r3, r2
 8001b06:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001b08:	6083      	str	r3, [r0, #8]
}
 8001b0a:	bd30      	pop	{r4, r5, pc}
 8001b0c:	ffff00ff 	.word	0xffff00ff

08001b10 <HAL_TIM_ConfigClockSource>:
{
 8001b10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 8001b12:	0005      	movs	r5, r0
 8001b14:	2302      	movs	r3, #2
 8001b16:	353c      	adds	r5, #60	; 0x3c
 8001b18:	782a      	ldrb	r2, [r5, #0]
{
 8001b1a:	0004      	movs	r4, r0
  __HAL_LOCK(htim);
 8001b1c:	0018      	movs	r0, r3
 8001b1e:	2a01      	cmp	r2, #1
 8001b20:	d016      	beq.n	8001b50 <HAL_TIM_ConfigClockSource+0x40>
  htim->State = HAL_TIM_STATE_BUSY;
 8001b22:	0026      	movs	r6, r4
  __HAL_LOCK(htim);
 8001b24:	2701      	movs	r7, #1
  tmpsmcr = htim->Instance->SMCR;
 8001b26:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8001b28:	363d      	adds	r6, #61	; 0x3d
  __HAL_LOCK(htim);
 8001b2a:	702f      	strb	r7, [r5, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8001b2c:	7033      	strb	r3, [r6, #0]
  tmpsmcr = htim->Instance->SMCR;
 8001b2e:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001b30:	4a40      	ldr	r2, [pc, #256]	; (8001c34 <HAL_TIM_ConfigClockSource+0x124>)
 8001b32:	4013      	ands	r3, r2
  htim->Instance->SMCR = tmpsmcr;
 8001b34:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8001b36:	680b      	ldr	r3, [r1, #0]
 8001b38:	2b40      	cmp	r3, #64	; 0x40
 8001b3a:	d065      	beq.n	8001c08 <HAL_TIM_ConfigClockSource+0xf8>
 8001b3c:	d814      	bhi.n	8001b68 <HAL_TIM_ConfigClockSource+0x58>
 8001b3e:	2b10      	cmp	r3, #16
 8001b40:	d00b      	beq.n	8001b5a <HAL_TIM_ConfigClockSource+0x4a>
 8001b42:	d806      	bhi.n	8001b52 <HAL_TIM_ConfigClockSource+0x42>
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d008      	beq.n	8001b5a <HAL_TIM_ConfigClockSource+0x4a>
  htim->State = HAL_TIM_STATE_READY;
 8001b48:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8001b4a:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8001b4c:	7033      	strb	r3, [r6, #0]
  __HAL_UNLOCK(htim);
 8001b4e:	7028      	strb	r0, [r5, #0]
}
 8001b50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  switch (sClockSourceConfig->ClockSource)
 8001b52:	2b20      	cmp	r3, #32
 8001b54:	d001      	beq.n	8001b5a <HAL_TIM_ConfigClockSource+0x4a>
 8001b56:	2b30      	cmp	r3, #48	; 0x30
 8001b58:	d1f6      	bne.n	8001b48 <HAL_TIM_ConfigClockSource+0x38>
  tmpsmcr &= ~TIM_SMCR_TS;
 8001b5a:	2270      	movs	r2, #112	; 0x70
  tmpsmcr = TIMx->SMCR;
 8001b5c:	6881      	ldr	r1, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8001b5e:	4391      	bics	r1, r2
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001b60:	3a69      	subs	r2, #105	; 0x69
 8001b62:	4313      	orrs	r3, r2
 8001b64:	430b      	orrs	r3, r1
 8001b66:	e01a      	b.n	8001b9e <HAL_TIM_ConfigClockSource+0x8e>
  switch (sClockSourceConfig->ClockSource)
 8001b68:	2b60      	cmp	r3, #96	; 0x60
 8001b6a:	d035      	beq.n	8001bd8 <HAL_TIM_ConfigClockSource+0xc8>
 8001b6c:	d819      	bhi.n	8001ba2 <HAL_TIM_ConfigClockSource+0x92>
 8001b6e:	2b50      	cmp	r3, #80	; 0x50
 8001b70:	d1ea      	bne.n	8001b48 <HAL_TIM_ConfigClockSource+0x38>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001b72:	684a      	ldr	r2, [r1, #4]
 8001b74:	68cb      	ldr	r3, [r1, #12]
  tmpccer = TIMx->CCER;
 8001b76:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001b78:	6a04      	ldr	r4, [r0, #32]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001b7a:	011b      	lsls	r3, r3, #4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001b7c:	43bc      	bics	r4, r7
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001b7e:	27f0      	movs	r7, #240	; 0xf0
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001b80:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001b82:	6984      	ldr	r4, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001b84:	43bc      	bics	r4, r7
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001b86:	4323      	orrs	r3, r4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001b88:	240a      	movs	r4, #10
 8001b8a:	43a1      	bics	r1, r4
  tmpccer |= TIM_ICPolarity;
 8001b8c:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8001b8e:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8001b90:	6202      	str	r2, [r0, #32]
  tmpsmcr &= ~TIM_SMCR_TS;
 8001b92:	2270      	movs	r2, #112	; 0x70
  tmpsmcr = TIMx->SMCR;
 8001b94:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8001b96:	4393      	bics	r3, r2
 8001b98:	001a      	movs	r2, r3
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001b9a:	2357      	movs	r3, #87	; 0x57
 8001b9c:	4313      	orrs	r3, r2
  TIMx->SMCR = tmpsmcr;
 8001b9e:	6083      	str	r3, [r0, #8]
 8001ba0:	e7d2      	b.n	8001b48 <HAL_TIM_ConfigClockSource+0x38>
  switch (sClockSourceConfig->ClockSource)
 8001ba2:	2b70      	cmp	r3, #112	; 0x70
 8001ba4:	d00d      	beq.n	8001bc2 <HAL_TIM_ConfigClockSource+0xb2>
 8001ba6:	2280      	movs	r2, #128	; 0x80
 8001ba8:	0192      	lsls	r2, r2, #6
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d1cc      	bne.n	8001b48 <HAL_TIM_ConfigClockSource+0x38>
      TIM_ETR_SetConfig(htim->Instance,
 8001bae:	68cb      	ldr	r3, [r1, #12]
 8001bb0:	684a      	ldr	r2, [r1, #4]
 8001bb2:	6889      	ldr	r1, [r1, #8]
 8001bb4:	f7ff ffa0 	bl	8001af8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001bb8:	2380      	movs	r3, #128	; 0x80
 8001bba:	6822      	ldr	r2, [r4, #0]
 8001bbc:	01db      	lsls	r3, r3, #7
 8001bbe:	6891      	ldr	r1, [r2, #8]
 8001bc0:	e007      	b.n	8001bd2 <HAL_TIM_ConfigClockSource+0xc2>
      TIM_ETR_SetConfig(htim->Instance,
 8001bc2:	68cb      	ldr	r3, [r1, #12]
 8001bc4:	684a      	ldr	r2, [r1, #4]
 8001bc6:	6889      	ldr	r1, [r1, #8]
 8001bc8:	f7ff ff96 	bl	8001af8 <TIM_ETR_SetConfig>
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001bcc:	2377      	movs	r3, #119	; 0x77
      tmpsmcr = htim->Instance->SMCR;
 8001bce:	6822      	ldr	r2, [r4, #0]
 8001bd0:	6891      	ldr	r1, [r2, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001bd2:	430b      	orrs	r3, r1
 8001bd4:	6093      	str	r3, [r2, #8]
      break;
 8001bd6:	e7b7      	b.n	8001b48 <HAL_TIM_ConfigClockSource+0x38>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001bd8:	2410      	movs	r4, #16
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001bda:	684b      	ldr	r3, [r1, #4]
 8001bdc:	68ca      	ldr	r2, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001bde:	6a01      	ldr	r1, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001be0:	4f15      	ldr	r7, [pc, #84]	; (8001c38 <HAL_TIM_ConfigClockSource+0x128>)
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001be2:	43a1      	bics	r1, r4
 8001be4:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001be6:	6984      	ldr	r4, [r0, #24]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001be8:	0312      	lsls	r2, r2, #12
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001bea:	403c      	ands	r4, r7
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001bec:	4322      	orrs	r2, r4
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001bee:	24a0      	movs	r4, #160	; 0xa0
  tmpccer = TIMx->CCER;
 8001bf0:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCMR1 = tmpccmr1 ;
 8001bf2:	6182      	str	r2, [r0, #24]
  tmpsmcr &= ~TIM_SMCR_TS;
 8001bf4:	2270      	movs	r2, #112	; 0x70
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001bf6:	43a1      	bics	r1, r4
  tmpccer |= (TIM_ICPolarity << 4U);
 8001bf8:	011b      	lsls	r3, r3, #4
 8001bfa:	430b      	orrs	r3, r1
  TIMx->CCER = tmpccer;
 8001bfc:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8001bfe:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8001c00:	4393      	bics	r3, r2
 8001c02:	001a      	movs	r2, r3
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001c04:	2367      	movs	r3, #103	; 0x67
 8001c06:	e7c9      	b.n	8001b9c <HAL_TIM_ConfigClockSource+0x8c>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001c08:	684a      	ldr	r2, [r1, #4]
 8001c0a:	68cb      	ldr	r3, [r1, #12]
  tmpccer = TIMx->CCER;
 8001c0c:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001c0e:	6a04      	ldr	r4, [r0, #32]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001c10:	011b      	lsls	r3, r3, #4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001c12:	43bc      	bics	r4, r7
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001c14:	27f0      	movs	r7, #240	; 0xf0
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001c16:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001c18:	6984      	ldr	r4, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001c1a:	43bc      	bics	r4, r7
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001c1c:	4323      	orrs	r3, r4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001c1e:	240a      	movs	r4, #10
 8001c20:	43a1      	bics	r1, r4
  tmpccer |= TIM_ICPolarity;
 8001c22:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8001c24:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8001c26:	6202      	str	r2, [r0, #32]
  tmpsmcr &= ~TIM_SMCR_TS;
 8001c28:	2270      	movs	r2, #112	; 0x70
  tmpsmcr = TIMx->SMCR;
 8001c2a:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8001c2c:	4393      	bics	r3, r2
 8001c2e:	001a      	movs	r2, r3
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001c30:	2347      	movs	r3, #71	; 0x47
 8001c32:	e7b3      	b.n	8001b9c <HAL_TIM_ConfigClockSource+0x8c>
 8001c34:	ffff0088 	.word	0xffff0088
 8001c38:	ffff0fff 	.word	0xffff0fff

08001c3c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001c3c:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001c3e:	0004      	movs	r4, r0
 8001c40:	2202      	movs	r2, #2
 8001c42:	343c      	adds	r4, #60	; 0x3c
 8001c44:	7825      	ldrb	r5, [r4, #0]
{
 8001c46:	0003      	movs	r3, r0
  __HAL_LOCK(htim);
 8001c48:	0010      	movs	r0, r2
 8001c4a:	2d01      	cmp	r5, #1
 8001c4c:	d01f      	beq.n	8001c8e <HAL_TIMEx_MasterConfigSynchronization+0x52>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c4e:	001d      	movs	r5, r3

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001c50:	2670      	movs	r6, #112	; 0x70
  tmpcr2 = htim->Instance->CR2;
 8001c52:	681b      	ldr	r3, [r3, #0]
  __HAL_LOCK(htim);
 8001c54:	3801      	subs	r0, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8001c56:	353d      	adds	r5, #61	; 0x3d
  __HAL_LOCK(htim);
 8001c58:	7020      	strb	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8001c5a:	702a      	strb	r2, [r5, #0]
  tmpcr2 = htim->Instance->CR2;
 8001c5c:	6858      	ldr	r0, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 8001c5e:	689a      	ldr	r2, [r3, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 8001c60:	43b0      	bics	r0, r6
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001c62:	680e      	ldr	r6, [r1, #0]
 8001c64:	4330      	orrs	r0, r6

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001c66:	6058      	str	r0, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001c68:	4809      	ldr	r0, [pc, #36]	; (8001c90 <HAL_TIMEx_MasterConfigSynchronization+0x54>)
 8001c6a:	4283      	cmp	r3, r0
 8001c6c:	d006      	beq.n	8001c7c <HAL_TIMEx_MasterConfigSynchronization+0x40>
 8001c6e:	2080      	movs	r0, #128	; 0x80
 8001c70:	05c0      	lsls	r0, r0, #23
 8001c72:	4283      	cmp	r3, r0
 8001c74:	d002      	beq.n	8001c7c <HAL_TIMEx_MasterConfigSynchronization+0x40>
 8001c76:	4807      	ldr	r0, [pc, #28]	; (8001c94 <HAL_TIMEx_MasterConfigSynchronization+0x58>)
 8001c78:	4283      	cmp	r3, r0
 8001c7a:	d104      	bne.n	8001c86 <HAL_TIMEx_MasterConfigSynchronization+0x4a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001c7c:	2080      	movs	r0, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001c7e:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001c80:	4382      	bics	r2, r0
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001c82:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001c84:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001c86:	2301      	movs	r3, #1

  __HAL_UNLOCK(htim);
 8001c88:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8001c8a:	702b      	strb	r3, [r5, #0]
  __HAL_UNLOCK(htim);
 8001c8c:	7020      	strb	r0, [r4, #0]

  return HAL_OK;
}
 8001c8e:	bd70      	pop	{r4, r5, r6, pc}
 8001c90:	40012c00 	.word	0x40012c00
 8001c94:	40000400 	.word	0x40000400

08001c98 <HAL_TIMEx_CommutCallback>:
 8001c98:	4770      	bx	lr

08001c9a <HAL_TIMEx_BreakCallback>:
 8001c9a:	4770      	bx	lr

08001c9c <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001c9c:	6803      	ldr	r3, [r0, #0]
 8001c9e:	490b      	ldr	r1, [pc, #44]	; (8001ccc <UART_EndRxTransfer+0x30>)
 8001ca0:	681a      	ldr	r2, [r3, #0]
 8001ca2:	400a      	ands	r2, r1
 8001ca4:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001ca6:	689a      	ldr	r2, [r3, #8]
 8001ca8:	3123      	adds	r1, #35	; 0x23
 8001caa:	31ff      	adds	r1, #255	; 0xff
 8001cac:	438a      	bics	r2, r1
 8001cae:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001cb0:	6e02      	ldr	r2, [r0, #96]	; 0x60
 8001cb2:	428a      	cmp	r2, r1
 8001cb4:	d103      	bne.n	8001cbe <UART_EndRxTransfer+0x22>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001cb6:	681a      	ldr	r2, [r3, #0]
 8001cb8:	310f      	adds	r1, #15
 8001cba:	438a      	bics	r2, r1
 8001cbc:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001cbe:	2320      	movs	r3, #32
 8001cc0:	67c3      	str	r3, [r0, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	6603      	str	r3, [r0, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8001cc6:	6643      	str	r3, [r0, #100]	; 0x64
}
 8001cc8:	4770      	bx	lr
 8001cca:	46c0      	nop			; (mov r8, r8)
 8001ccc:	fffffedf 	.word	0xfffffedf

08001cd0 <HAL_UART_TxCpltCallback>:
 8001cd0:	4770      	bx	lr

08001cd2 <HAL_UART_ErrorCallback>:
 8001cd2:	4770      	bx	lr

08001cd4 <UART_DMAAbortOnError>:
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8001cd4:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0U;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	0002      	movs	r2, r0
{
 8001cda:	b510      	push	{r4, lr}
  huart->RxXferCount = 0U;
 8001cdc:	325a      	adds	r2, #90	; 0x5a
 8001cde:	8013      	strh	r3, [r2, #0]
  huart->TxXferCount = 0U;
 8001ce0:	3a08      	subs	r2, #8
 8001ce2:	8013      	strh	r3, [r2, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8001ce4:	f7ff fff5 	bl	8001cd2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8001ce8:	bd10      	pop	{r4, pc}

08001cea <HAL_UARTEx_RxEventCallback>:
}
 8001cea:	4770      	bx	lr

08001cec <HAL_UART_IRQHandler>:
{
 8001cec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8001cee:	6803      	ldr	r3, [r0, #0]
{
 8001cf0:	0004      	movs	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8001cf2:	69da      	ldr	r2, [r3, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001cf4:	6819      	ldr	r1, [r3, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001cf6:	6898      	ldr	r0, [r3, #8]
 8001cf8:	4684      	mov	ip, r0
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8001cfa:	487f      	ldr	r0, [pc, #508]	; (8001ef8 <HAL_UART_IRQHandler+0x20c>)
  if (errorflags == 0U)
 8001cfc:	4202      	tst	r2, r0
 8001cfe:	d10b      	bne.n	8001d18 <HAL_UART_IRQHandler+0x2c>
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8001d00:	2020      	movs	r0, #32
 8001d02:	4202      	tst	r2, r0
 8001d04:	d100      	bne.n	8001d08 <HAL_UART_IRQHandler+0x1c>
 8001d06:	e076      	b.n	8001df6 <HAL_UART_IRQHandler+0x10a>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8001d08:	4201      	tst	r1, r0
 8001d0a:	d100      	bne.n	8001d0e <HAL_UART_IRQHandler+0x22>
 8001d0c:	e073      	b.n	8001df6 <HAL_UART_IRQHandler+0x10a>
      if (huart->RxISR != NULL)
 8001d0e:	6e63      	ldr	r3, [r4, #100]	; 0x64
      huart->TxISR(huart);
 8001d10:	0020      	movs	r0, r4
    if (huart->TxISR != NULL)
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d165      	bne.n	8001de2 <HAL_UART_IRQHandler+0xf6>
 8001d16:	e065      	b.n	8001de4 <HAL_UART_IRQHandler+0xf8>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8001d18:	2001      	movs	r0, #1
 8001d1a:	4666      	mov	r6, ip
 8001d1c:	4006      	ands	r6, r0
 8001d1e:	d102      	bne.n	8001d26 <HAL_UART_IRQHandler+0x3a>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8001d20:	4d76      	ldr	r5, [pc, #472]	; (8001efc <HAL_UART_IRQHandler+0x210>)
 8001d22:	4229      	tst	r1, r5
 8001d24:	d067      	beq.n	8001df6 <HAL_UART_IRQHandler+0x10a>
 8001d26:	1d25      	adds	r5, r4, #4
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8001d28:	4202      	tst	r2, r0
 8001d2a:	d005      	beq.n	8001d38 <HAL_UART_IRQHandler+0x4c>
 8001d2c:	05cf      	lsls	r7, r1, #23
 8001d2e:	d503      	bpl.n	8001d38 <HAL_UART_IRQHandler+0x4c>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8001d30:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001d32:	6fef      	ldr	r7, [r5, #124]	; 0x7c
 8001d34:	4338      	orrs	r0, r7
 8001d36:	67e8      	str	r0, [r5, #124]	; 0x7c
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8001d38:	2002      	movs	r0, #2
 8001d3a:	4202      	tst	r2, r0
 8001d3c:	d006      	beq.n	8001d4c <HAL_UART_IRQHandler+0x60>
 8001d3e:	2e00      	cmp	r6, #0
 8001d40:	d004      	beq.n	8001d4c <HAL_UART_IRQHandler+0x60>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8001d42:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001d44:	6fef      	ldr	r7, [r5, #124]	; 0x7c
 8001d46:	1800      	adds	r0, r0, r0
 8001d48:	4338      	orrs	r0, r7
 8001d4a:	67e8      	str	r0, [r5, #124]	; 0x7c
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8001d4c:	2004      	movs	r0, #4
 8001d4e:	4202      	tst	r2, r0
 8001d50:	d006      	beq.n	8001d60 <HAL_UART_IRQHandler+0x74>
 8001d52:	2e00      	cmp	r6, #0
 8001d54:	d004      	beq.n	8001d60 <HAL_UART_IRQHandler+0x74>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8001d56:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001d58:	6fef      	ldr	r7, [r5, #124]	; 0x7c
 8001d5a:	3802      	subs	r0, #2
 8001d5c:	4338      	orrs	r0, r7
 8001d5e:	67e8      	str	r0, [r5, #124]	; 0x7c
    if (((isrflags & USART_ISR_ORE) != 0U)
 8001d60:	0710      	lsls	r0, r2, #28
 8001d62:	d508      	bpl.n	8001d76 <HAL_UART_IRQHandler+0x8a>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8001d64:	0688      	lsls	r0, r1, #26
 8001d66:	d401      	bmi.n	8001d6c <HAL_UART_IRQHandler+0x80>
 8001d68:	2e00      	cmp	r6, #0
 8001d6a:	d004      	beq.n	8001d76 <HAL_UART_IRQHandler+0x8a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8001d6c:	2008      	movs	r0, #8
 8001d6e:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001d70:	6fee      	ldr	r6, [r5, #124]	; 0x7c
 8001d72:	4330      	orrs	r0, r6
 8001d74:	67e8      	str	r0, [r5, #124]	; 0x7c
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8001d76:	2080      	movs	r0, #128	; 0x80
 8001d78:	0100      	lsls	r0, r0, #4
 8001d7a:	4202      	tst	r2, r0
 8001d7c:	d006      	beq.n	8001d8c <HAL_UART_IRQHandler+0xa0>
 8001d7e:	014e      	lsls	r6, r1, #5
 8001d80:	d504      	bpl.n	8001d8c <HAL_UART_IRQHandler+0xa0>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8001d82:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8001d84:	2320      	movs	r3, #32
 8001d86:	6fe8      	ldr	r0, [r5, #124]	; 0x7c
 8001d88:	4303      	orrs	r3, r0
 8001d8a:	67eb      	str	r3, [r5, #124]	; 0x7c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001d8c:	6feb      	ldr	r3, [r5, #124]	; 0x7c
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d028      	beq.n	8001de4 <HAL_UART_IRQHandler+0xf8>
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8001d92:	2320      	movs	r3, #32
 8001d94:	421a      	tst	r2, r3
 8001d96:	d006      	beq.n	8001da6 <HAL_UART_IRQHandler+0xba>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8001d98:	4219      	tst	r1, r3
 8001d9a:	d004      	beq.n	8001da6 <HAL_UART_IRQHandler+0xba>
        if (huart->RxISR != NULL)
 8001d9c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d001      	beq.n	8001da6 <HAL_UART_IRQHandler+0xba>
          huart->RxISR(huart);
 8001da2:	0020      	movs	r0, r4
 8001da4:	4798      	blx	r3
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8001da6:	6823      	ldr	r3, [r4, #0]
      errorcode = huart->ErrorCode;
 8001da8:	6fee      	ldr	r6, [r5, #124]	; 0x7c
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8001daa:	689b      	ldr	r3, [r3, #8]
        UART_EndRxTransfer(huart);
 8001dac:	0020      	movs	r0, r4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8001dae:	065b      	lsls	r3, r3, #25
 8001db0:	d402      	bmi.n	8001db8 <HAL_UART_IRQHandler+0xcc>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8001db2:	2328      	movs	r3, #40	; 0x28
 8001db4:	401e      	ands	r6, r3
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8001db6:	d01a      	beq.n	8001dee <HAL_UART_IRQHandler+0x102>
        UART_EndRxTransfer(huart);
 8001db8:	f7ff ff70 	bl	8001c9c <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001dbc:	2140      	movs	r1, #64	; 0x40
 8001dbe:	6823      	ldr	r3, [r4, #0]
 8001dc0:	689a      	ldr	r2, [r3, #8]
 8001dc2:	420a      	tst	r2, r1
 8001dc4:	d00f      	beq.n	8001de6 <HAL_UART_IRQHandler+0xfa>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001dc6:	689a      	ldr	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 8001dc8:	6f20      	ldr	r0, [r4, #112]	; 0x70
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001dca:	438a      	bics	r2, r1
 8001dcc:	609a      	str	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 8001dce:	2800      	cmp	r0, #0
 8001dd0:	d009      	beq.n	8001de6 <HAL_UART_IRQHandler+0xfa>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001dd2:	4b4b      	ldr	r3, [pc, #300]	; (8001f00 <HAL_UART_IRQHandler+0x214>)
 8001dd4:	6343      	str	r3, [r0, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001dd6:	f7fe ff1f 	bl	8000c18 <HAL_DMA_Abort_IT>
 8001dda:	2800      	cmp	r0, #0
 8001ddc:	d002      	beq.n	8001de4 <HAL_UART_IRQHandler+0xf8>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001dde:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8001de0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001de2:	4798      	blx	r3
}
 8001de4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            HAL_UART_ErrorCallback(huart);
 8001de6:	0020      	movs	r0, r4
 8001de8:	f7ff ff73 	bl	8001cd2 <HAL_UART_ErrorCallback>
 8001dec:	e7fa      	b.n	8001de4 <HAL_UART_IRQHandler+0xf8>
        HAL_UART_ErrorCallback(huart);
 8001dee:	f7ff ff70 	bl	8001cd2 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001df2:	67ee      	str	r6, [r5, #124]	; 0x7c
 8001df4:	e7f6      	b.n	8001de4 <HAL_UART_IRQHandler+0xf8>
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001df6:	6e27      	ldr	r7, [r4, #96]	; 0x60
 8001df8:	2f01      	cmp	r7, #1
 8001dfa:	d158      	bne.n	8001eae <HAL_UART_IRQHandler+0x1c2>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8001dfc:	2510      	movs	r5, #16
 8001dfe:	422a      	tst	r2, r5
 8001e00:	d055      	beq.n	8001eae <HAL_UART_IRQHandler+0x1c2>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8001e02:	4229      	tst	r1, r5
 8001e04:	d053      	beq.n	8001eae <HAL_UART_IRQHandler+0x1c2>
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001e06:	2140      	movs	r1, #64	; 0x40
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8001e08:	621d      	str	r5, [r3, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001e0a:	689a      	ldr	r2, [r3, #8]
 8001e0c:	400a      	ands	r2, r1
 8001e0e:	d031      	beq.n	8001e74 <HAL_UART_IRQHandler+0x188>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8001e10:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8001e12:	6802      	ldr	r2, [r0, #0]
 8001e14:	6852      	ldr	r2, [r2, #4]
 8001e16:	b292      	uxth	r2, r2
      if (  (nb_remaining_rx_data > 0U)
 8001e18:	2a00      	cmp	r2, #0
 8001e1a:	d0e3      	beq.n	8001de4 <HAL_UART_IRQHandler+0xf8>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8001e1c:	0026      	movs	r6, r4
 8001e1e:	3658      	adds	r6, #88	; 0x58
 8001e20:	8831      	ldrh	r1, [r6, #0]
 8001e22:	4291      	cmp	r1, r2
 8001e24:	d9de      	bls.n	8001de4 <HAL_UART_IRQHandler+0xf8>
        huart->RxXferCount = nb_remaining_rx_data;
 8001e26:	215a      	movs	r1, #90	; 0x5a
 8001e28:	468c      	mov	ip, r1
 8001e2a:	44a4      	add	ip, r4
 8001e2c:	4661      	mov	r1, ip
 8001e2e:	800a      	strh	r2, [r1, #0]
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8001e30:	6982      	ldr	r2, [r0, #24]
 8001e32:	2a20      	cmp	r2, #32
 8001e34:	d014      	beq.n	8001e60 <HAL_UART_IRQHandler+0x174>
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001e36:	681a      	ldr	r2, [r3, #0]
 8001e38:	4932      	ldr	r1, [pc, #200]	; (8001f04 <HAL_UART_IRQHandler+0x218>)
 8001e3a:	400a      	ands	r2, r1
 8001e3c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001e3e:	689a      	ldr	r2, [r3, #8]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001e40:	3142      	adds	r1, #66	; 0x42
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001e42:	43ba      	bics	r2, r7
 8001e44:	609a      	str	r2, [r3, #8]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001e46:	689a      	ldr	r2, [r3, #8]
 8001e48:	31ff      	adds	r1, #255	; 0xff
 8001e4a:	438a      	bics	r2, r1
 8001e4c:	609a      	str	r2, [r3, #8]
          huart->RxState = HAL_UART_STATE_READY;
 8001e4e:	2220      	movs	r2, #32
 8001e50:	67e2      	str	r2, [r4, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001e52:	2200      	movs	r2, #0
 8001e54:	6622      	str	r2, [r4, #96]	; 0x60
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001e56:	681a      	ldr	r2, [r3, #0]
 8001e58:	43aa      	bics	r2, r5
 8001e5a:	601a      	str	r2, [r3, #0]
          (void)HAL_DMA_Abort(huart->hdmarx);
 8001e5c:	f7fe febe 	bl	8000bdc <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8001e60:	0023      	movs	r3, r4
 8001e62:	335a      	adds	r3, #90	; 0x5a
 8001e64:	881b      	ldrh	r3, [r3, #0]
 8001e66:	8831      	ldrh	r1, [r6, #0]
 8001e68:	1ac9      	subs	r1, r1, r3
 8001e6a:	b289      	uxth	r1, r1
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8001e6c:	0020      	movs	r0, r4
 8001e6e:	f7ff ff3c 	bl	8001cea <HAL_UARTEx_RxEventCallback>
 8001e72:	e7b7      	b.n	8001de4 <HAL_UART_IRQHandler+0xf8>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8001e74:	0020      	movs	r0, r4
 8001e76:	305a      	adds	r0, #90	; 0x5a
 8001e78:	8806      	ldrh	r6, [r0, #0]
      if (  (huart->RxXferCount > 0U)
 8001e7a:	8801      	ldrh	r1, [r0, #0]
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8001e7c:	b2b6      	uxth	r6, r6
      if (  (huart->RxXferCount > 0U)
 8001e7e:	2900      	cmp	r1, #0
 8001e80:	d0b0      	beq.n	8001de4 <HAL_UART_IRQHandler+0xf8>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8001e82:	0021      	movs	r1, r4
 8001e84:	3158      	adds	r1, #88	; 0x58
 8001e86:	8809      	ldrh	r1, [r1, #0]
 8001e88:	1b89      	subs	r1, r1, r6
 8001e8a:	b289      	uxth	r1, r1
          &&(nb_rx_data > 0U) )
 8001e8c:	2900      	cmp	r1, #0
 8001e8e:	d0a9      	beq.n	8001de4 <HAL_UART_IRQHandler+0xf8>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001e90:	6818      	ldr	r0, [r3, #0]
 8001e92:	4e1d      	ldr	r6, [pc, #116]	; (8001f08 <HAL_UART_IRQHandler+0x21c>)
 8001e94:	4030      	ands	r0, r6
 8001e96:	6018      	str	r0, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001e98:	6898      	ldr	r0, [r3, #8]
 8001e9a:	43b8      	bics	r0, r7
 8001e9c:	6098      	str	r0, [r3, #8]
        huart->RxState = HAL_UART_STATE_READY;
 8001e9e:	2020      	movs	r0, #32
 8001ea0:	67e0      	str	r0, [r4, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001ea2:	6622      	str	r2, [r4, #96]	; 0x60
        huart->RxISR = NULL;
 8001ea4:	6662      	str	r2, [r4, #100]	; 0x64
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001ea6:	681a      	ldr	r2, [r3, #0]
 8001ea8:	43aa      	bics	r2, r5
 8001eaa:	601a      	str	r2, [r3, #0]
 8001eac:	e7de      	b.n	8001e6c <HAL_UART_IRQHandler+0x180>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8001eae:	2080      	movs	r0, #128	; 0x80
 8001eb0:	0340      	lsls	r0, r0, #13
 8001eb2:	4202      	tst	r2, r0
 8001eb4:	d007      	beq.n	8001ec6 <HAL_UART_IRQHandler+0x1da>
 8001eb6:	4665      	mov	r5, ip
 8001eb8:	026d      	lsls	r5, r5, #9
 8001eba:	d504      	bpl.n	8001ec6 <HAL_UART_IRQHandler+0x1da>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8001ebc:	6218      	str	r0, [r3, #32]
    HAL_UARTEx_WakeupCallback(huart);
 8001ebe:	0020      	movs	r0, r4
 8001ec0:	f000 fb44 	bl	800254c <HAL_UARTEx_WakeupCallback>
    return;
 8001ec4:	e78e      	b.n	8001de4 <HAL_UART_IRQHandler+0xf8>
  if (((isrflags & USART_ISR_TXE) != 0U)
 8001ec6:	2080      	movs	r0, #128	; 0x80
 8001ec8:	4202      	tst	r2, r0
 8001eca:	d003      	beq.n	8001ed4 <HAL_UART_IRQHandler+0x1e8>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8001ecc:	4201      	tst	r1, r0
 8001ece:	d001      	beq.n	8001ed4 <HAL_UART_IRQHandler+0x1e8>
    if (huart->TxISR != NULL)
 8001ed0:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8001ed2:	e71d      	b.n	8001d10 <HAL_UART_IRQHandler+0x24>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8001ed4:	2040      	movs	r0, #64	; 0x40
 8001ed6:	4202      	tst	r2, r0
 8001ed8:	d100      	bne.n	8001edc <HAL_UART_IRQHandler+0x1f0>
 8001eda:	e783      	b.n	8001de4 <HAL_UART_IRQHandler+0xf8>
 8001edc:	4201      	tst	r1, r0
 8001ede:	d100      	bne.n	8001ee2 <HAL_UART_IRQHandler+0x1f6>
 8001ee0:	e780      	b.n	8001de4 <HAL_UART_IRQHandler+0xf8>
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8001ee2:	681a      	ldr	r2, [r3, #0]
 8001ee4:	4382      	bics	r2, r0
 8001ee6:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8001ee8:	2320      	movs	r3, #32
 8001eea:	67a3      	str	r3, [r4, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8001eec:	2300      	movs	r3, #0
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8001eee:	0020      	movs	r0, r4
  huart->TxISR = NULL;
 8001ef0:	66a3      	str	r3, [r4, #104]	; 0x68
  HAL_UART_TxCpltCallback(huart);
 8001ef2:	f7ff feed 	bl	8001cd0 <HAL_UART_TxCpltCallback>
 8001ef6:	e775      	b.n	8001de4 <HAL_UART_IRQHandler+0xf8>
 8001ef8:	0000080f 	.word	0x0000080f
 8001efc:	04000120 	.word	0x04000120
 8001f00:	08001cd5 	.word	0x08001cd5
 8001f04:	fffffeff 	.word	0xfffffeff
 8001f08:	fffffedf 	.word	0xfffffedf

08001f0c <UART_RxISR_8BIT>:
{
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8001f0c:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
{
 8001f0e:	b510      	push	{r4, lr}
 8001f10:	6803      	ldr	r3, [r0, #0]
 8001f12:	0004      	movs	r4, r0
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8001f14:	2a22      	cmp	r2, #34	; 0x22
 8001f16:	d134      	bne.n	8001f82 <UART_RxISR_8BIT+0x76>
  uint16_t uhMask = huart->Mask;
 8001f18:	0002      	movs	r2, r0
 8001f1a:	325c      	adds	r2, #92	; 0x5c
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8001f1c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8001f1e:	8812      	ldrh	r2, [r2, #0]
 8001f20:	4013      	ands	r3, r2
 8001f22:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8001f24:	7013      	strb	r3, [r2, #0]
    huart->pRxBuffPtr++;
    huart->RxXferCount--;
 8001f26:	0002      	movs	r2, r0
    huart->pRxBuffPtr++;
 8001f28:	6d43      	ldr	r3, [r0, #84]	; 0x54
    huart->RxXferCount--;
 8001f2a:	325a      	adds	r2, #90	; 0x5a
    huart->pRxBuffPtr++;
 8001f2c:	3301      	adds	r3, #1
 8001f2e:	6543      	str	r3, [r0, #84]	; 0x54
    huart->RxXferCount--;
 8001f30:	8813      	ldrh	r3, [r2, #0]
 8001f32:	3b01      	subs	r3, #1
 8001f34:	b29b      	uxth	r3, r3
 8001f36:	8013      	strh	r3, [r2, #0]

    if (huart->RxXferCount == 0U)
 8001f38:	8812      	ldrh	r2, [r2, #0]
 8001f3a:	b292      	uxth	r2, r2
 8001f3c:	2a00      	cmp	r2, #0
 8001f3e:	d11b      	bne.n	8001f78 <UART_RxISR_8BIT+0x6c>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001f40:	6803      	ldr	r3, [r0, #0]
 8001f42:	4812      	ldr	r0, [pc, #72]	; (8001f8c <UART_RxISR_8BIT+0x80>)
 8001f44:	6819      	ldr	r1, [r3, #0]
 8001f46:	4001      	ands	r1, r0
 8001f48:	6019      	str	r1, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001f4a:	6899      	ldr	r1, [r3, #8]
 8001f4c:	3023      	adds	r0, #35	; 0x23
 8001f4e:	30ff      	adds	r0, #255	; 0xff
 8001f50:	4381      	bics	r1, r0
 8001f52:	6099      	str	r1, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8001f54:	2120      	movs	r1, #32
 8001f56:	67e1      	str	r1, [r4, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8001f58:	6662      	str	r2, [r4, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001f5a:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8001f5c:	4282      	cmp	r2, r0
 8001f5e:	d10c      	bne.n	8001f7a <UART_RxISR_8BIT+0x6e>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001f60:	681a      	ldr	r2, [r3, #0]
 8001f62:	3910      	subs	r1, #16
 8001f64:	438a      	bics	r2, r1
 8001f66:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8001f68:	0023      	movs	r3, r4
 8001f6a:	3358      	adds	r3, #88	; 0x58
 8001f6c:	8819      	ldrh	r1, [r3, #0]
 8001f6e:	0020      	movs	r0, r4
 8001f70:	f7ff febb 	bl	8001cea <HAL_UARTEx_RxEventCallback>
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001f74:	2300      	movs	r3, #0
 8001f76:	6623      	str	r3, [r4, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8001f78:	bd10      	pop	{r4, pc}
        HAL_UART_RxCpltCallback(huart);
 8001f7a:	0020      	movs	r0, r4
 8001f7c:	f7fe fa7c 	bl	8000478 <HAL_UART_RxCpltCallback>
 8001f80:	e7f8      	b.n	8001f74 <UART_RxISR_8BIT+0x68>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8001f82:	2208      	movs	r2, #8
 8001f84:	6999      	ldr	r1, [r3, #24]
 8001f86:	430a      	orrs	r2, r1
 8001f88:	619a      	str	r2, [r3, #24]
}
 8001f8a:	e7f5      	b.n	8001f78 <UART_RxISR_8BIT+0x6c>
 8001f8c:	fffffedf 	.word	0xfffffedf

08001f90 <UART_RxISR_16BIT>:
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8001f90:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
{
 8001f92:	b510      	push	{r4, lr}
 8001f94:	6803      	ldr	r3, [r0, #0]
 8001f96:	0004      	movs	r4, r0
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8001f98:	2a22      	cmp	r2, #34	; 0x22
 8001f9a:	d132      	bne.n	8002002 <UART_RxISR_16BIT+0x72>
  uint16_t uhMask = huart->Mask;
 8001f9c:	0021      	movs	r1, r4
 8001f9e:	315c      	adds	r1, #92	; 0x5c
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8001fa0:	8c98      	ldrh	r0, [r3, #36]	; 0x24
    tmp = (uint16_t *) huart->pRxBuffPtr ;
    *tmp = (uint16_t)(uhdata & uhMask);
 8001fa2:	8809      	ldrh	r1, [r1, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8001fa4:	6d62      	ldr	r2, [r4, #84]	; 0x54
    *tmp = (uint16_t)(uhdata & uhMask);
 8001fa6:	4001      	ands	r1, r0
 8001fa8:	8011      	strh	r1, [r2, #0]
    huart->pRxBuffPtr += 2U;
    huart->RxXferCount--;
 8001faa:	0021      	movs	r1, r4
    huart->pRxBuffPtr += 2U;
 8001fac:	3202      	adds	r2, #2
 8001fae:	6562      	str	r2, [r4, #84]	; 0x54
    huart->RxXferCount--;
 8001fb0:	315a      	adds	r1, #90	; 0x5a
 8001fb2:	880a      	ldrh	r2, [r1, #0]
 8001fb4:	3a01      	subs	r2, #1
 8001fb6:	b292      	uxth	r2, r2
 8001fb8:	800a      	strh	r2, [r1, #0]

    if (huart->RxXferCount == 0U)
 8001fba:	880a      	ldrh	r2, [r1, #0]
 8001fbc:	b292      	uxth	r2, r2
 8001fbe:	2a00      	cmp	r2, #0
 8001fc0:	d11a      	bne.n	8001ff8 <UART_RxISR_16BIT+0x68>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001fc2:	6819      	ldr	r1, [r3, #0]
 8001fc4:	4811      	ldr	r0, [pc, #68]	; (800200c <UART_RxISR_16BIT+0x7c>)
 8001fc6:	4001      	ands	r1, r0
 8001fc8:	6019      	str	r1, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001fca:	6899      	ldr	r1, [r3, #8]
 8001fcc:	3023      	adds	r0, #35	; 0x23
 8001fce:	30ff      	adds	r0, #255	; 0xff
 8001fd0:	4381      	bics	r1, r0
 8001fd2:	6099      	str	r1, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8001fd4:	2120      	movs	r1, #32
 8001fd6:	67e1      	str	r1, [r4, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8001fd8:	6662      	str	r2, [r4, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001fda:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8001fdc:	4282      	cmp	r2, r0
 8001fde:	d10c      	bne.n	8001ffa <UART_RxISR_16BIT+0x6a>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001fe0:	681a      	ldr	r2, [r3, #0]
 8001fe2:	3910      	subs	r1, #16
 8001fe4:	438a      	bics	r2, r1
 8001fe6:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8001fe8:	0023      	movs	r3, r4
 8001fea:	3358      	adds	r3, #88	; 0x58
 8001fec:	8819      	ldrh	r1, [r3, #0]
 8001fee:	0020      	movs	r0, r4
 8001ff0:	f7ff fe7b 	bl	8001cea <HAL_UARTEx_RxEventCallback>
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	6623      	str	r3, [r4, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8001ff8:	bd10      	pop	{r4, pc}
        HAL_UART_RxCpltCallback(huart);
 8001ffa:	0020      	movs	r0, r4
 8001ffc:	f7fe fa3c 	bl	8000478 <HAL_UART_RxCpltCallback>
 8002000:	e7f8      	b.n	8001ff4 <UART_RxISR_16BIT+0x64>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8002002:	2208      	movs	r2, #8
 8002004:	6999      	ldr	r1, [r3, #24]
 8002006:	430a      	orrs	r2, r1
 8002008:	619a      	str	r2, [r3, #24]
}
 800200a:	e7f5      	b.n	8001ff8 <UART_RxISR_16BIT+0x68>
 800200c:	fffffedf 	.word	0xfffffedf

08002010 <UART_SetConfig>:
{
 8002010:	b570      	push	{r4, r5, r6, lr}
 8002012:	0004      	movs	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002014:	6925      	ldr	r5, [r4, #16]
 8002016:	68a3      	ldr	r3, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002018:	6802      	ldr	r2, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800201a:	432b      	orrs	r3, r5
 800201c:	6965      	ldr	r5, [r4, #20]
 800201e:	69c1      	ldr	r1, [r0, #28]
 8002020:	432b      	orrs	r3, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002022:	6810      	ldr	r0, [r2, #0]
 8002024:	4d3d      	ldr	r5, [pc, #244]	; (800211c <UART_SetConfig+0x10c>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002026:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002028:	4028      	ands	r0, r5
 800202a:	4303      	orrs	r3, r0
 800202c:	6013      	str	r3, [r2, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800202e:	6853      	ldr	r3, [r2, #4]
 8002030:	483b      	ldr	r0, [pc, #236]	; (8002120 <UART_SetConfig+0x110>)
  tmpreg |= huart->Init.OneBitSampling;
 8002032:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002034:	4003      	ands	r3, r0
 8002036:	68e0      	ldr	r0, [r4, #12]
 8002038:	4303      	orrs	r3, r0
 800203a:	6053      	str	r3, [r2, #4]
  tmpreg |= huart->Init.OneBitSampling;
 800203c:	69a3      	ldr	r3, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800203e:	6890      	ldr	r0, [r2, #8]
  tmpreg |= huart->Init.OneBitSampling;
 8002040:	432b      	orrs	r3, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002042:	4d38      	ldr	r5, [pc, #224]	; (8002124 <UART_SetConfig+0x114>)
 8002044:	4028      	ands	r0, r5
 8002046:	4303      	orrs	r3, r0
 8002048:	6093      	str	r3, [r2, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 800204a:	4b37      	ldr	r3, [pc, #220]	; (8002128 <UART_SetConfig+0x118>)
 800204c:	429a      	cmp	r2, r3
 800204e:	d112      	bne.n	8002076 <UART_SetConfig+0x66>
 8002050:	2203      	movs	r2, #3
 8002052:	4b36      	ldr	r3, [pc, #216]	; (800212c <UART_SetConfig+0x11c>)
 8002054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002056:	4013      	ands	r3, r2
 8002058:	4a35      	ldr	r2, [pc, #212]	; (8002130 <UART_SetConfig+0x120>)
 800205a:	5cd0      	ldrb	r0, [r2, r3]
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800205c:	2380      	movs	r3, #128	; 0x80
 800205e:	021b      	lsls	r3, r3, #8
 8002060:	4299      	cmp	r1, r3
 8002062:	d00d      	beq.n	8002080 <UART_SetConfig+0x70>
    switch (clocksource)
 8002064:	2808      	cmp	r0, #8
 8002066:	d809      	bhi.n	800207c <UART_SetConfig+0x6c>
 8002068:	f7fe f860 	bl	800012c <__gnu_thumb1_case_uqi>
 800206c:	08490841 	.word	0x08490841
 8002070:	08080846 	.word	0x08080846
 8002074:	30          	.byte	0x30
 8002075:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002076:	4b2f      	ldr	r3, [pc, #188]	; (8002134 <UART_SetConfig+0x124>)
 8002078:	429a      	cmp	r2, r3
 800207a:	d042      	beq.n	8002102 <UART_SetConfig+0xf2>
        ret = HAL_ERROR;
 800207c:	2001      	movs	r0, #1
 800207e:	e049      	b.n	8002114 <UART_SetConfig+0x104>
    switch (clocksource)
 8002080:	2808      	cmp	r0, #8
 8002082:	d8fb      	bhi.n	800207c <UART_SetConfig+0x6c>
 8002084:	f7fe f848 	bl	8000118 <__gnu_thumb1_case_sqi>
 8002088:	fa08fa41 	.word	0xfa08fa41
 800208c:	fafafa05 	.word	0xfafafa05
 8002090:	1f          	.byte	0x1f
 8002091:	00          	.byte	0x00
        pclk = HAL_RCC_GetSysClockFreq();
 8002092:	f7ff f8e9 	bl	8001268 <HAL_RCC_GetSysClockFreq>
        break;
 8002096:	e03a      	b.n	800210e <UART_SetConfig+0xfe>
        pclk = (uint32_t) HSI_VALUE;
 8002098:	4827      	ldr	r0, [pc, #156]	; (8002138 <UART_SetConfig+0x128>)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800209a:	6863      	ldr	r3, [r4, #4]
 800209c:	0040      	lsls	r0, r0, #1
 800209e:	085b      	lsrs	r3, r3, #1
 80020a0:	18c0      	adds	r0, r0, r3
 80020a2:	6861      	ldr	r1, [r4, #4]
 80020a4:	f7fe f84c 	bl	8000140 <__udivsi3>
 80020a8:	0403      	lsls	r3, r0, #16
 80020aa:	0c1a      	lsrs	r2, r3, #16
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80020ac:	4923      	ldr	r1, [pc, #140]	; (800213c <UART_SetConfig+0x12c>)
 80020ae:	3a10      	subs	r2, #16
 80020b0:	428a      	cmp	r2, r1
 80020b2:	d8e3      	bhi.n	800207c <UART_SetConfig+0x6c>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80020b4:	220f      	movs	r2, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80020b6:	031b      	lsls	r3, r3, #12
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80020b8:	4390      	bics	r0, r2
 80020ba:	b280      	uxth	r0, r0
        huart->Instance->BRR = brrtemp;
 80020bc:	6822      	ldr	r2, [r4, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80020be:	0f5b      	lsrs	r3, r3, #29
        huart->Instance->BRR = brrtemp;
 80020c0:	4318      	orrs	r0, r3
 80020c2:	60d0      	str	r0, [r2, #12]
 80020c4:	e025      	b.n	8002112 <UART_SetConfig+0x102>
        pclk = (uint32_t) LSE_VALUE;
 80020c6:	2080      	movs	r0, #128	; 0x80
 80020c8:	0200      	lsls	r0, r0, #8
 80020ca:	e7e6      	b.n	800209a <UART_SetConfig+0x8a>
        pclk = (uint32_t) LSE_VALUE;
 80020cc:	2080      	movs	r0, #128	; 0x80
 80020ce:	0200      	lsls	r0, r0, #8
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80020d0:	6863      	ldr	r3, [r4, #4]
 80020d2:	6861      	ldr	r1, [r4, #4]
 80020d4:	085b      	lsrs	r3, r3, #1
 80020d6:	1818      	adds	r0, r3, r0
 80020d8:	f7fe f832 	bl	8000140 <__udivsi3>
 80020dc:	b280      	uxth	r0, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80020de:	0002      	movs	r2, r0
 80020e0:	4b16      	ldr	r3, [pc, #88]	; (800213c <UART_SetConfig+0x12c>)
 80020e2:	3a10      	subs	r2, #16
 80020e4:	429a      	cmp	r2, r3
 80020e6:	d8c9      	bhi.n	800207c <UART_SetConfig+0x6c>
        huart->Instance->BRR = usartdiv;
 80020e8:	6823      	ldr	r3, [r4, #0]
 80020ea:	60d8      	str	r0, [r3, #12]
 80020ec:	e011      	b.n	8002112 <UART_SetConfig+0x102>
        pclk = HAL_RCC_GetPCLK1Freq();
 80020ee:	f7ff f989 	bl	8001404 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80020f2:	2800      	cmp	r0, #0
 80020f4:	d1ec      	bne.n	80020d0 <UART_SetConfig+0xc0>
 80020f6:	e00c      	b.n	8002112 <UART_SetConfig+0x102>
        pclk = HAL_RCC_GetSysClockFreq();
 80020f8:	f7ff f8b6 	bl	8001268 <HAL_RCC_GetSysClockFreq>
        break;
 80020fc:	e7f9      	b.n	80020f2 <UART_SetConfig+0xe2>
        pclk = (uint32_t) HSI_VALUE;
 80020fe:	480e      	ldr	r0, [pc, #56]	; (8002138 <UART_SetConfig+0x128>)
 8002100:	e7e6      	b.n	80020d0 <UART_SetConfig+0xc0>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002102:	2380      	movs	r3, #128	; 0x80
 8002104:	021b      	lsls	r3, r3, #8
 8002106:	4299      	cmp	r1, r3
 8002108:	d1f1      	bne.n	80020ee <UART_SetConfig+0xde>
        pclk = HAL_RCC_GetPCLK1Freq();
 800210a:	f7ff f97b 	bl	8001404 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800210e:	2800      	cmp	r0, #0
 8002110:	d1c3      	bne.n	800209a <UART_SetConfig+0x8a>
 8002112:	2000      	movs	r0, #0
  huart->RxISR = NULL;
 8002114:	2300      	movs	r3, #0
 8002116:	6663      	str	r3, [r4, #100]	; 0x64
  huart->TxISR = NULL;
 8002118:	66a3      	str	r3, [r4, #104]	; 0x68
}
 800211a:	bd70      	pop	{r4, r5, r6, pc}
 800211c:	efff69f3 	.word	0xefff69f3
 8002120:	ffffcfff 	.word	0xffffcfff
 8002124:	fffff4ff 	.word	0xfffff4ff
 8002128:	40013800 	.word	0x40013800
 800212c:	40021000 	.word	0x40021000
 8002130:	08002666 	.word	0x08002666
 8002134:	40004400 	.word	0x40004400
 8002138:	007a1200 	.word	0x007a1200
 800213c:	0000ffef 	.word	0x0000ffef

08002140 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002140:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 8002142:	b530      	push	{r4, r5, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002144:	07da      	lsls	r2, r3, #31
 8002146:	d506      	bpl.n	8002156 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002148:	6801      	ldr	r1, [r0, #0]
 800214a:	4c28      	ldr	r4, [pc, #160]	; (80021ec <UART_AdvFeatureConfig+0xac>)
 800214c:	684a      	ldr	r2, [r1, #4]
 800214e:	4022      	ands	r2, r4
 8002150:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8002152:	4322      	orrs	r2, r4
 8002154:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002156:	079a      	lsls	r2, r3, #30
 8002158:	d506      	bpl.n	8002168 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800215a:	6801      	ldr	r1, [r0, #0]
 800215c:	4c24      	ldr	r4, [pc, #144]	; (80021f0 <UART_AdvFeatureConfig+0xb0>)
 800215e:	684a      	ldr	r2, [r1, #4]
 8002160:	4022      	ands	r2, r4
 8002162:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8002164:	4322      	orrs	r2, r4
 8002166:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002168:	075a      	lsls	r2, r3, #29
 800216a:	d506      	bpl.n	800217a <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800216c:	6801      	ldr	r1, [r0, #0]
 800216e:	4c21      	ldr	r4, [pc, #132]	; (80021f4 <UART_AdvFeatureConfig+0xb4>)
 8002170:	684a      	ldr	r2, [r1, #4]
 8002172:	4022      	ands	r2, r4
 8002174:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8002176:	4322      	orrs	r2, r4
 8002178:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800217a:	071a      	lsls	r2, r3, #28
 800217c:	d506      	bpl.n	800218c <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800217e:	6801      	ldr	r1, [r0, #0]
 8002180:	4c1d      	ldr	r4, [pc, #116]	; (80021f8 <UART_AdvFeatureConfig+0xb8>)
 8002182:	684a      	ldr	r2, [r1, #4]
 8002184:	4022      	ands	r2, r4
 8002186:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8002188:	4322      	orrs	r2, r4
 800218a:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800218c:	06da      	lsls	r2, r3, #27
 800218e:	d506      	bpl.n	800219e <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002190:	6801      	ldr	r1, [r0, #0]
 8002192:	4c1a      	ldr	r4, [pc, #104]	; (80021fc <UART_AdvFeatureConfig+0xbc>)
 8002194:	688a      	ldr	r2, [r1, #8]
 8002196:	4022      	ands	r2, r4
 8002198:	6b84      	ldr	r4, [r0, #56]	; 0x38
 800219a:	4322      	orrs	r2, r4
 800219c:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800219e:	069a      	lsls	r2, r3, #26
 80021a0:	d506      	bpl.n	80021b0 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80021a2:	6801      	ldr	r1, [r0, #0]
 80021a4:	4c16      	ldr	r4, [pc, #88]	; (8002200 <UART_AdvFeatureConfig+0xc0>)
 80021a6:	688a      	ldr	r2, [r1, #8]
 80021a8:	4022      	ands	r2, r4
 80021aa:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 80021ac:	4322      	orrs	r2, r4
 80021ae:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80021b0:	065a      	lsls	r2, r3, #25
 80021b2:	d510      	bpl.n	80021d6 <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80021b4:	6801      	ldr	r1, [r0, #0]
 80021b6:	4d13      	ldr	r5, [pc, #76]	; (8002204 <UART_AdvFeatureConfig+0xc4>)
 80021b8:	684a      	ldr	r2, [r1, #4]
 80021ba:	6c04      	ldr	r4, [r0, #64]	; 0x40
 80021bc:	402a      	ands	r2, r5
 80021be:	4322      	orrs	r2, r4
 80021c0:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80021c2:	2280      	movs	r2, #128	; 0x80
 80021c4:	0352      	lsls	r2, r2, #13
 80021c6:	4294      	cmp	r4, r2
 80021c8:	d105      	bne.n	80021d6 <UART_AdvFeatureConfig+0x96>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80021ca:	684a      	ldr	r2, [r1, #4]
 80021cc:	4c0e      	ldr	r4, [pc, #56]	; (8002208 <UART_AdvFeatureConfig+0xc8>)
 80021ce:	4022      	ands	r2, r4
 80021d0:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80021d2:	4322      	orrs	r2, r4
 80021d4:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80021d6:	061b      	lsls	r3, r3, #24
 80021d8:	d506      	bpl.n	80021e8 <UART_AdvFeatureConfig+0xa8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80021da:	6802      	ldr	r2, [r0, #0]
 80021dc:	490b      	ldr	r1, [pc, #44]	; (800220c <UART_AdvFeatureConfig+0xcc>)
 80021de:	6853      	ldr	r3, [r2, #4]
 80021e0:	400b      	ands	r3, r1
 80021e2:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80021e4:	430b      	orrs	r3, r1
 80021e6:	6053      	str	r3, [r2, #4]
}
 80021e8:	bd30      	pop	{r4, r5, pc}
 80021ea:	46c0      	nop			; (mov r8, r8)
 80021ec:	fffdffff 	.word	0xfffdffff
 80021f0:	fffeffff 	.word	0xfffeffff
 80021f4:	fffbffff 	.word	0xfffbffff
 80021f8:	ffff7fff 	.word	0xffff7fff
 80021fc:	ffffefff 	.word	0xffffefff
 8002200:	ffffdfff 	.word	0xffffdfff
 8002204:	ffefffff 	.word	0xffefffff
 8002208:	ff9fffff 	.word	0xff9fffff
 800220c:	fff7ffff 	.word	0xfff7ffff

08002210 <UART_WaitOnFlagUntilTimeout>:
{
 8002210:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002212:	2780      	movs	r7, #128	; 0x80
{
 8002214:	0004      	movs	r4, r0
 8002216:	000e      	movs	r6, r1
 8002218:	0015      	movs	r5, r2
 800221a:	9301      	str	r3, [sp, #4]
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800221c:	013f      	lsls	r7, r7, #4
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800221e:	6822      	ldr	r2, [r4, #0]
 8002220:	69d3      	ldr	r3, [r2, #28]
 8002222:	4033      	ands	r3, r6
 8002224:	1b9b      	subs	r3, r3, r6
 8002226:	4259      	negs	r1, r3
 8002228:	414b      	adcs	r3, r1
 800222a:	42ab      	cmp	r3, r5
 800222c:	d001      	beq.n	8002232 <UART_WaitOnFlagUntilTimeout+0x22>
  return HAL_OK;
 800222e:	2000      	movs	r0, #0
 8002230:	e01c      	b.n	800226c <UART_WaitOnFlagUntilTimeout+0x5c>
    if (Timeout != HAL_MAX_DELAY)
 8002232:	9b08      	ldr	r3, [sp, #32]
 8002234:	3301      	adds	r3, #1
 8002236:	d0f3      	beq.n	8002220 <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002238:	f7fe fb6e 	bl	8000918 <HAL_GetTick>
 800223c:	9b01      	ldr	r3, [sp, #4]
 800223e:	9a08      	ldr	r2, [sp, #32]
 8002240:	1ac0      	subs	r0, r0, r3
 8002242:	6823      	ldr	r3, [r4, #0]
 8002244:	4290      	cmp	r0, r2
 8002246:	d801      	bhi.n	800224c <UART_WaitOnFlagUntilTimeout+0x3c>
 8002248:	2a00      	cmp	r2, #0
 800224a:	d110      	bne.n	800226e <UART_WaitOnFlagUntilTimeout+0x5e>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800224c:	681a      	ldr	r2, [r3, #0]
 800224e:	4913      	ldr	r1, [pc, #76]	; (800229c <UART_WaitOnFlagUntilTimeout+0x8c>)
 8002250:	400a      	ands	r2, r1
 8002252:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002254:	689a      	ldr	r2, [r3, #8]
 8002256:	31a3      	adds	r1, #163	; 0xa3
 8002258:	31ff      	adds	r1, #255	; 0xff
 800225a:	438a      	bics	r2, r1
 800225c:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 800225e:	2320      	movs	r3, #32
 8002260:	67a3      	str	r3, [r4, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8002262:	67e3      	str	r3, [r4, #124]	; 0x7c
          __HAL_UNLOCK(huart);
 8002264:	2300      	movs	r3, #0
          return HAL_TIMEOUT;
 8002266:	2003      	movs	r0, #3
          __HAL_UNLOCK(huart);
 8002268:	3474      	adds	r4, #116	; 0x74
 800226a:	7023      	strb	r3, [r4, #0]
}
 800226c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800226e:	2104      	movs	r1, #4
 8002270:	681a      	ldr	r2, [r3, #0]
 8002272:	420a      	tst	r2, r1
 8002274:	d0d3      	beq.n	800221e <UART_WaitOnFlagUntilTimeout+0xe>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002276:	69da      	ldr	r2, [r3, #28]
 8002278:	423a      	tst	r2, r7
 800227a:	d0d0      	beq.n	800221e <UART_WaitOnFlagUntilTimeout+0xe>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800227c:	621f      	str	r7, [r3, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800227e:	681a      	ldr	r2, [r3, #0]
 8002280:	4906      	ldr	r1, [pc, #24]	; (800229c <UART_WaitOnFlagUntilTimeout+0x8c>)
 8002282:	400a      	ands	r2, r1
 8002284:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002286:	689a      	ldr	r2, [r3, #8]
 8002288:	31a3      	adds	r1, #163	; 0xa3
 800228a:	31ff      	adds	r1, #255	; 0xff
 800228c:	438a      	bics	r2, r1
 800228e:	609a      	str	r2, [r3, #8]
          huart->gState = HAL_UART_STATE_READY;
 8002290:	2320      	movs	r3, #32
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002292:	1d22      	adds	r2, r4, #4
          huart->gState = HAL_UART_STATE_READY;
 8002294:	67a3      	str	r3, [r4, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8002296:	67e3      	str	r3, [r4, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002298:	67d3      	str	r3, [r2, #124]	; 0x7c
 800229a:	e7e3      	b.n	8002264 <UART_WaitOnFlagUntilTimeout+0x54>
 800229c:	fffffe5f 	.word	0xfffffe5f

080022a0 <HAL_UART_Transmit>:
{
 80022a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80022a2:	b087      	sub	sp, #28
 80022a4:	9305      	str	r3, [sp, #20]
  if (huart->gState == HAL_UART_STATE_READY)
 80022a6:	6f83      	ldr	r3, [r0, #120]	; 0x78
{
 80022a8:	0004      	movs	r4, r0
 80022aa:	000d      	movs	r5, r1
 80022ac:	0017      	movs	r7, r2
    return HAL_BUSY;
 80022ae:	2002      	movs	r0, #2
  if (huart->gState == HAL_UART_STATE_READY)
 80022b0:	2b20      	cmp	r3, #32
 80022b2:	d14b      	bne.n	800234c <HAL_UART_Transmit+0xac>
      return  HAL_ERROR;
 80022b4:	3801      	subs	r0, #1
    if ((pData == NULL) || (Size == 0U))
 80022b6:	2900      	cmp	r1, #0
 80022b8:	d048      	beq.n	800234c <HAL_UART_Transmit+0xac>
 80022ba:	2a00      	cmp	r2, #0
 80022bc:	d046      	beq.n	800234c <HAL_UART_Transmit+0xac>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80022be:	2380      	movs	r3, #128	; 0x80
 80022c0:	68a2      	ldr	r2, [r4, #8]
 80022c2:	015b      	lsls	r3, r3, #5
 80022c4:	429a      	cmp	r2, r3
 80022c6:	d104      	bne.n	80022d2 <HAL_UART_Transmit+0x32>
 80022c8:	6923      	ldr	r3, [r4, #16]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d101      	bne.n	80022d2 <HAL_UART_Transmit+0x32>
      if ((((uint32_t)pData) & 1U) != 0U)
 80022ce:	4201      	tst	r1, r0
 80022d0:	d13c      	bne.n	800234c <HAL_UART_Transmit+0xac>
    __HAL_LOCK(huart);
 80022d2:	0026      	movs	r6, r4
 80022d4:	3674      	adds	r6, #116	; 0x74
 80022d6:	7833      	ldrb	r3, [r6, #0]
    return HAL_BUSY;
 80022d8:	2002      	movs	r0, #2
    __HAL_LOCK(huart);
 80022da:	2b01      	cmp	r3, #1
 80022dc:	d036      	beq.n	800234c <HAL_UART_Transmit+0xac>
 80022de:	2301      	movs	r3, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022e0:	2200      	movs	r2, #0
    __HAL_LOCK(huart);
 80022e2:	7033      	strb	r3, [r6, #0]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022e4:	1d23      	adds	r3, r4, #4
 80022e6:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80022e8:	2321      	movs	r3, #33	; 0x21
 80022ea:	67a3      	str	r3, [r4, #120]	; 0x78
    tickstart = HAL_GetTick();
 80022ec:	f7fe fb14 	bl	8000918 <HAL_GetTick>
    huart->TxXferSize  = Size;
 80022f0:	0023      	movs	r3, r4
 80022f2:	3350      	adds	r3, #80	; 0x50
 80022f4:	801f      	strh	r7, [r3, #0]
    huart->TxXferCount = Size;
 80022f6:	3302      	adds	r3, #2
 80022f8:	801f      	strh	r7, [r3, #0]
 80022fa:	9303      	str	r3, [sp, #12]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80022fc:	2380      	movs	r3, #128	; 0x80
 80022fe:	68a2      	ldr	r2, [r4, #8]
    tickstart = HAL_GetTick();
 8002300:	9004      	str	r0, [sp, #16]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002302:	015b      	lsls	r3, r3, #5
      pdata16bits = NULL;
 8002304:	2700      	movs	r7, #0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002306:	429a      	cmp	r2, r3
 8002308:	d104      	bne.n	8002314 <HAL_UART_Transmit+0x74>
 800230a:	6923      	ldr	r3, [r4, #16]
 800230c:	42bb      	cmp	r3, r7
 800230e:	d101      	bne.n	8002314 <HAL_UART_Transmit+0x74>
 8002310:	002f      	movs	r7, r5
      pdata8bits  = NULL;
 8002312:	001d      	movs	r5, r3
    __HAL_UNLOCK(huart);
 8002314:	2300      	movs	r3, #0
 8002316:	7033      	strb	r3, [r6, #0]
    while (huart->TxXferCount > 0U)
 8002318:	0023      	movs	r3, r4
 800231a:	3352      	adds	r3, #82	; 0x52
 800231c:	881a      	ldrh	r2, [r3, #0]
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800231e:	9b05      	ldr	r3, [sp, #20]
    while (huart->TxXferCount > 0U)
 8002320:	b292      	uxth	r2, r2
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002322:	9300      	str	r3, [sp, #0]
 8002324:	9b04      	ldr	r3, [sp, #16]
    while (huart->TxXferCount > 0U)
 8002326:	2a00      	cmp	r2, #0
 8002328:	d108      	bne.n	800233c <HAL_UART_Transmit+0x9c>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800232a:	2140      	movs	r1, #64	; 0x40
 800232c:	0020      	movs	r0, r4
 800232e:	f7ff ff6f 	bl	8002210 <UART_WaitOnFlagUntilTimeout>
 8002332:	2800      	cmp	r0, #0
 8002334:	d109      	bne.n	800234a <HAL_UART_Transmit+0xaa>
    huart->gState = HAL_UART_STATE_READY;
 8002336:	2320      	movs	r3, #32
 8002338:	67a3      	str	r3, [r4, #120]	; 0x78
    return HAL_OK;
 800233a:	e007      	b.n	800234c <HAL_UART_Transmit+0xac>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800233c:	2200      	movs	r2, #0
 800233e:	2180      	movs	r1, #128	; 0x80
 8002340:	0020      	movs	r0, r4
 8002342:	f7ff ff65 	bl	8002210 <UART_WaitOnFlagUntilTimeout>
 8002346:	2800      	cmp	r0, #0
 8002348:	d002      	beq.n	8002350 <HAL_UART_Transmit+0xb0>
        return HAL_TIMEOUT;
 800234a:	2003      	movs	r0, #3
}
 800234c:	b007      	add	sp, #28
 800234e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002350:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 8002352:	2d00      	cmp	r5, #0
 8002354:	d10b      	bne.n	800236e <HAL_UART_Transmit+0xce>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002356:	883b      	ldrh	r3, [r7, #0]
        pdata16bits++;
 8002358:	3702      	adds	r7, #2
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800235a:	05db      	lsls	r3, r3, #23
 800235c:	0ddb      	lsrs	r3, r3, #23
 800235e:	8513      	strh	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 8002360:	9b03      	ldr	r3, [sp, #12]
 8002362:	9a03      	ldr	r2, [sp, #12]
 8002364:	881b      	ldrh	r3, [r3, #0]
 8002366:	3b01      	subs	r3, #1
 8002368:	b29b      	uxth	r3, r3
 800236a:	8013      	strh	r3, [r2, #0]
 800236c:	e7d4      	b.n	8002318 <HAL_UART_Transmit+0x78>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800236e:	782b      	ldrb	r3, [r5, #0]
        pdata8bits++;
 8002370:	3501      	adds	r5, #1
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002372:	8513      	strh	r3, [r2, #40]	; 0x28
 8002374:	e7f4      	b.n	8002360 <HAL_UART_Transmit+0xc0>
	...

08002378 <UART_CheckIdleState>:
{
 8002378:	b573      	push	{r0, r1, r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800237a:	2600      	movs	r6, #0
{
 800237c:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800237e:	1d03      	adds	r3, r0, #4
 8002380:	67de      	str	r6, [r3, #124]	; 0x7c
  tickstart = HAL_GetTick();
 8002382:	f7fe fac9 	bl	8000918 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002386:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8002388:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	071b      	lsls	r3, r3, #28
 800238e:	d416      	bmi.n	80023be <UART_CheckIdleState+0x46>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002390:	6823      	ldr	r3, [r4, #0]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	075b      	lsls	r3, r3, #29
 8002396:	d50a      	bpl.n	80023ae <UART_CheckIdleState+0x36>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002398:	2180      	movs	r1, #128	; 0x80
 800239a:	4b0f      	ldr	r3, [pc, #60]	; (80023d8 <UART_CheckIdleState+0x60>)
 800239c:	2200      	movs	r2, #0
 800239e:	9300      	str	r3, [sp, #0]
 80023a0:	03c9      	lsls	r1, r1, #15
 80023a2:	002b      	movs	r3, r5
 80023a4:	0020      	movs	r0, r4
 80023a6:	f7ff ff33 	bl	8002210 <UART_WaitOnFlagUntilTimeout>
 80023aa:	2800      	cmp	r0, #0
 80023ac:	d112      	bne.n	80023d4 <UART_CheckIdleState+0x5c>
  huart->gState = HAL_UART_STATE_READY;
 80023ae:	2320      	movs	r3, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80023b0:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 80023b2:	67a3      	str	r3, [r4, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80023b4:	67e3      	str	r3, [r4, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80023b6:	6620      	str	r0, [r4, #96]	; 0x60
  __HAL_UNLOCK(huart);
 80023b8:	3474      	adds	r4, #116	; 0x74
 80023ba:	7020      	strb	r0, [r4, #0]
  return HAL_OK;
 80023bc:	e00b      	b.n	80023d6 <UART_CheckIdleState+0x5e>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80023be:	2180      	movs	r1, #128	; 0x80
 80023c0:	4b05      	ldr	r3, [pc, #20]	; (80023d8 <UART_CheckIdleState+0x60>)
 80023c2:	0032      	movs	r2, r6
 80023c4:	9300      	str	r3, [sp, #0]
 80023c6:	0389      	lsls	r1, r1, #14
 80023c8:	0003      	movs	r3, r0
 80023ca:	0020      	movs	r0, r4
 80023cc:	f7ff ff20 	bl	8002210 <UART_WaitOnFlagUntilTimeout>
 80023d0:	2800      	cmp	r0, #0
 80023d2:	d0dd      	beq.n	8002390 <UART_CheckIdleState+0x18>
      return HAL_TIMEOUT;
 80023d4:	2003      	movs	r0, #3
}
 80023d6:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 80023d8:	01ffffff 	.word	0x01ffffff

080023dc <UART_Start_Receive_IT>:
  huart->RxXferSize  = Size;
 80023dc:	0003      	movs	r3, r0
 80023de:	3358      	adds	r3, #88	; 0x58
{
 80023e0:	b510      	push	{r4, lr}
  huart->pRxBuffPtr  = pData;
 80023e2:	6541      	str	r1, [r0, #84]	; 0x54
  UART_MASK_COMPUTATION(huart);
 80023e4:	2480      	movs	r4, #128	; 0x80
  huart->RxXferSize  = Size;
 80023e6:	801a      	strh	r2, [r3, #0]
  huart->RxXferCount = Size;
 80023e8:	805a      	strh	r2, [r3, #2]
  huart->RxISR       = NULL;
 80023ea:	2200      	movs	r2, #0
  UART_MASK_COMPUTATION(huart);
 80023ec:	6881      	ldr	r1, [r0, #8]
  huart->RxISR       = NULL;
 80023ee:	6642      	str	r2, [r0, #100]	; 0x64
  UART_MASK_COMPUTATION(huart);
 80023f0:	0164      	lsls	r4, r4, #5
 80023f2:	3304      	adds	r3, #4
 80023f4:	42a1      	cmp	r1, r4
 80023f6:	d123      	bne.n	8002440 <UART_Start_Receive_IT+0x64>
 80023f8:	6902      	ldr	r2, [r0, #16]
 80023fa:	2a00      	cmp	r2, #0
 80023fc:	d11e      	bne.n	800243c <UART_Start_Receive_IT+0x60>
 80023fe:	4a19      	ldr	r2, [pc, #100]	; (8002464 <UART_Start_Receive_IT+0x88>)
 8002400:	801a      	strh	r2, [r3, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002402:	2200      	movs	r2, #0
 8002404:	1d03      	adds	r3, r0, #4
 8002406:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002408:	2322      	movs	r3, #34	; 0x22
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800240a:	6802      	ldr	r2, [r0, #0]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800240c:	67c3      	str	r3, [r0, #124]	; 0x7c
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800240e:	6894      	ldr	r4, [r2, #8]
 8002410:	3b21      	subs	r3, #33	; 0x21
 8002412:	4323      	orrs	r3, r4
 8002414:	6093      	str	r3, [r2, #8]
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002416:	2380      	movs	r3, #128	; 0x80
 8002418:	015b      	lsls	r3, r3, #5
 800241a:	4299      	cmp	r1, r3
 800241c:	d120      	bne.n	8002460 <UART_Start_Receive_IT+0x84>
 800241e:	6903      	ldr	r3, [r0, #16]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d11d      	bne.n	8002460 <UART_Start_Receive_IT+0x84>
    huart->RxISR = UART_RxISR_16BIT;
 8002424:	4b10      	ldr	r3, [pc, #64]	; (8002468 <UART_Start_Receive_IT+0x8c>)
    huart->RxISR = UART_RxISR_8BIT;
 8002426:	6643      	str	r3, [r0, #100]	; 0x64
  __HAL_UNLOCK(huart);
 8002428:	0003      	movs	r3, r0
 800242a:	2000      	movs	r0, #0
 800242c:	3374      	adds	r3, #116	; 0x74
 800242e:	7018      	strb	r0, [r3, #0]
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8002430:	2390      	movs	r3, #144	; 0x90
 8002432:	6811      	ldr	r1, [r2, #0]
 8002434:	005b      	lsls	r3, r3, #1
 8002436:	430b      	orrs	r3, r1
 8002438:	6013      	str	r3, [r2, #0]
}
 800243a:	bd10      	pop	{r4, pc}
  UART_MASK_COMPUTATION(huart);
 800243c:	22ff      	movs	r2, #255	; 0xff
 800243e:	e7df      	b.n	8002400 <UART_Start_Receive_IT+0x24>
 8002440:	2900      	cmp	r1, #0
 8002442:	d104      	bne.n	800244e <UART_Start_Receive_IT+0x72>
 8002444:	6902      	ldr	r2, [r0, #16]
 8002446:	2a00      	cmp	r2, #0
 8002448:	d0f8      	beq.n	800243c <UART_Start_Receive_IT+0x60>
 800244a:	227f      	movs	r2, #127	; 0x7f
 800244c:	e7d8      	b.n	8002400 <UART_Start_Receive_IT+0x24>
 800244e:	2480      	movs	r4, #128	; 0x80
 8002450:	0564      	lsls	r4, r4, #21
 8002452:	42a1      	cmp	r1, r4
 8002454:	d1d4      	bne.n	8002400 <UART_Start_Receive_IT+0x24>
 8002456:	6902      	ldr	r2, [r0, #16]
 8002458:	2a00      	cmp	r2, #0
 800245a:	d0f6      	beq.n	800244a <UART_Start_Receive_IT+0x6e>
 800245c:	223f      	movs	r2, #63	; 0x3f
 800245e:	e7cf      	b.n	8002400 <UART_Start_Receive_IT+0x24>
    huart->RxISR = UART_RxISR_8BIT;
 8002460:	4b02      	ldr	r3, [pc, #8]	; (800246c <UART_Start_Receive_IT+0x90>)
 8002462:	e7e0      	b.n	8002426 <UART_Start_Receive_IT+0x4a>
 8002464:	000001ff 	.word	0x000001ff
 8002468:	08001f91 	.word	0x08001f91
 800246c:	08001f0d 	.word	0x08001f0d

08002470 <HAL_UART_Receive_IT>:
{
 8002470:	b570      	push	{r4, r5, r6, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 8002472:	6fc4      	ldr	r4, [r0, #124]	; 0x7c
{
 8002474:	0003      	movs	r3, r0
    return HAL_BUSY;
 8002476:	2002      	movs	r0, #2
  if (huart->RxState == HAL_UART_STATE_READY)
 8002478:	2c20      	cmp	r4, #32
 800247a:	d124      	bne.n	80024c6 <HAL_UART_Receive_IT+0x56>
      return HAL_ERROR;
 800247c:	3801      	subs	r0, #1
    if ((pData == NULL) || (Size == 0U))
 800247e:	2900      	cmp	r1, #0
 8002480:	d021      	beq.n	80024c6 <HAL_UART_Receive_IT+0x56>
 8002482:	2a00      	cmp	r2, #0
 8002484:	d01f      	beq.n	80024c6 <HAL_UART_Receive_IT+0x56>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002486:	2480      	movs	r4, #128	; 0x80
 8002488:	689d      	ldr	r5, [r3, #8]
 800248a:	0164      	lsls	r4, r4, #5
 800248c:	42a5      	cmp	r5, r4
 800248e:	d104      	bne.n	800249a <HAL_UART_Receive_IT+0x2a>
 8002490:	691c      	ldr	r4, [r3, #16]
 8002492:	2c00      	cmp	r4, #0
 8002494:	d101      	bne.n	800249a <HAL_UART_Receive_IT+0x2a>
      if ((((uint32_t)pData) & 1U) != 0U)
 8002496:	4201      	tst	r1, r0
 8002498:	d115      	bne.n	80024c6 <HAL_UART_Receive_IT+0x56>
    __HAL_LOCK(huart);
 800249a:	001c      	movs	r4, r3
 800249c:	3474      	adds	r4, #116	; 0x74
 800249e:	7825      	ldrb	r5, [r4, #0]
    return HAL_BUSY;
 80024a0:	2002      	movs	r0, #2
    __HAL_LOCK(huart);
 80024a2:	2d01      	cmp	r5, #1
 80024a4:	d00f      	beq.n	80024c6 <HAL_UART_Receive_IT+0x56>
 80024a6:	3801      	subs	r0, #1
 80024a8:	7020      	strb	r0, [r4, #0]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80024aa:	2000      	movs	r0, #0
 80024ac:	6618      	str	r0, [r3, #96]	; 0x60
    if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80024ae:	6818      	ldr	r0, [r3, #0]
 80024b0:	6844      	ldr	r4, [r0, #4]
 80024b2:	0224      	lsls	r4, r4, #8
 80024b4:	d504      	bpl.n	80024c0 <HAL_UART_Receive_IT+0x50>
      SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80024b6:	2480      	movs	r4, #128	; 0x80
 80024b8:	6805      	ldr	r5, [r0, #0]
 80024ba:	04e4      	lsls	r4, r4, #19
 80024bc:	432c      	orrs	r4, r5
 80024be:	6004      	str	r4, [r0, #0]
    return(UART_Start_Receive_IT(huart, pData, Size));
 80024c0:	0018      	movs	r0, r3
 80024c2:	f7ff ff8b 	bl	80023dc <UART_Start_Receive_IT>
}
 80024c6:	bd70      	pop	{r4, r5, r6, pc}

080024c8 <HAL_RS485Ex_Init>:
  *       oversampling rate).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RS485Ex_Init(UART_HandleTypeDef *huart, uint32_t Polarity, uint32_t AssertionTime,
                                   uint32_t DeassertionTime)
{
 80024c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024ca:	0004      	movs	r4, r0
 80024cc:	000f      	movs	r7, r1
 80024ce:	0016      	movs	r6, r2
 80024d0:	001d      	movs	r5, r3
  uint32_t temp;

  /* Check the UART handle allocation */
  if (huart == NULL)
 80024d2:	2800      	cmp	r0, #0
 80024d4:	d101      	bne.n	80024da <HAL_RS485Ex_Init+0x12>
  {
    return HAL_ERROR;
 80024d6:	2001      	movs	r0, #1
  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
}
 80024d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (huart->gState == HAL_UART_STATE_RESET)
 80024da:	6f83      	ldr	r3, [r0, #120]	; 0x78
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d104      	bne.n	80024ea <HAL_RS485Ex_Init+0x22>
    huart->Lock = HAL_UNLOCKED;
 80024e0:	0002      	movs	r2, r0
 80024e2:	3274      	adds	r2, #116	; 0x74
 80024e4:	7013      	strb	r3, [r2, #0]
    HAL_UART_MspInit(huart);
 80024e6:	f7fe f97d 	bl	80007e4 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 80024ea:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 80024ec:	2101      	movs	r1, #1
 80024ee:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80024f0:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UART_DISABLE(huart);
 80024f2:	6813      	ldr	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80024f4:	0020      	movs	r0, r4
  __HAL_UART_DISABLE(huart);
 80024f6:	438b      	bics	r3, r1
 80024f8:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80024fa:	f7ff fd89 	bl	8002010 <UART_SetConfig>
 80024fe:	2801      	cmp	r0, #1
 8002500:	d0e9      	beq.n	80024d6 <HAL_RS485Ex_Init+0xe>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002502:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002504:	2b00      	cmp	r3, #0
 8002506:	d002      	beq.n	800250e <HAL_RS485Ex_Init+0x46>
    UART_AdvFeatureConfig(huart);
 8002508:	0020      	movs	r0, r4
 800250a:	f7ff fe19 	bl	8002140 <UART_AdvFeatureConfig>
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 800250e:	2280      	movs	r2, #128	; 0x80
 8002510:	6823      	ldr	r3, [r4, #0]
 8002512:	01d2      	lsls	r2, r2, #7
 8002514:	6899      	ldr	r1, [r3, #8]
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
 8002516:	0576      	lsls	r6, r6, #21
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 8002518:	430a      	orrs	r2, r1
 800251a:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 800251c:	689a      	ldr	r2, [r3, #8]
 800251e:	4909      	ldr	r1, [pc, #36]	; (8002544 <HAL_RS485Ex_Init+0x7c>)
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 8002520:	042d      	lsls	r5, r5, #16
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 8002522:	400a      	ands	r2, r1
 8002524:	4317      	orrs	r7, r2
 8002526:	609f      	str	r7, [r3, #8]
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 8002528:	681a      	ldr	r2, [r3, #0]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 800252a:	4335      	orrs	r5, r6
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 800252c:	4e06      	ldr	r6, [pc, #24]	; (8002548 <HAL_RS485Ex_Init+0x80>)
  return (UART_CheckIdleState(huart));
 800252e:	0020      	movs	r0, r4
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 8002530:	4016      	ands	r6, r2
  __HAL_UART_ENABLE(huart);
 8002532:	2201      	movs	r2, #1
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 8002534:	4335      	orrs	r5, r6
 8002536:	601d      	str	r5, [r3, #0]
  __HAL_UART_ENABLE(huart);
 8002538:	6819      	ldr	r1, [r3, #0]
 800253a:	430a      	orrs	r2, r1
 800253c:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 800253e:	f7ff ff1b 	bl	8002378 <UART_CheckIdleState>
 8002542:	e7c9      	b.n	80024d8 <HAL_RS485Ex_Init+0x10>
 8002544:	ffff7fff 	.word	0xffff7fff
 8002548:	fc00ffff 	.word	0xfc00ffff

0800254c <HAL_UARTEx_WakeupCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800254c:	4770      	bx	lr
	...

08002550 <__libc_init_array>:
 8002550:	b570      	push	{r4, r5, r6, lr}
 8002552:	2600      	movs	r6, #0
 8002554:	4d0c      	ldr	r5, [pc, #48]	; (8002588 <__libc_init_array+0x38>)
 8002556:	4c0d      	ldr	r4, [pc, #52]	; (800258c <__libc_init_array+0x3c>)
 8002558:	1b64      	subs	r4, r4, r5
 800255a:	10a4      	asrs	r4, r4, #2
 800255c:	42a6      	cmp	r6, r4
 800255e:	d109      	bne.n	8002574 <__libc_init_array+0x24>
 8002560:	2600      	movs	r6, #0
 8002562:	f000 f82b 	bl	80025bc <_init>
 8002566:	4d0a      	ldr	r5, [pc, #40]	; (8002590 <__libc_init_array+0x40>)
 8002568:	4c0a      	ldr	r4, [pc, #40]	; (8002594 <__libc_init_array+0x44>)
 800256a:	1b64      	subs	r4, r4, r5
 800256c:	10a4      	asrs	r4, r4, #2
 800256e:	42a6      	cmp	r6, r4
 8002570:	d105      	bne.n	800257e <__libc_init_array+0x2e>
 8002572:	bd70      	pop	{r4, r5, r6, pc}
 8002574:	00b3      	lsls	r3, r6, #2
 8002576:	58eb      	ldr	r3, [r5, r3]
 8002578:	4798      	blx	r3
 800257a:	3601      	adds	r6, #1
 800257c:	e7ee      	b.n	800255c <__libc_init_array+0xc>
 800257e:	00b3      	lsls	r3, r6, #2
 8002580:	58eb      	ldr	r3, [r5, r3]
 8002582:	4798      	blx	r3
 8002584:	3601      	adds	r6, #1
 8002586:	e7f2      	b.n	800256e <__libc_init_array+0x1e>
 8002588:	0800266c 	.word	0x0800266c
 800258c:	0800266c 	.word	0x0800266c
 8002590:	0800266c 	.word	0x0800266c
 8002594:	08002670 	.word	0x08002670

08002598 <memcpy>:
 8002598:	2300      	movs	r3, #0
 800259a:	b510      	push	{r4, lr}
 800259c:	429a      	cmp	r2, r3
 800259e:	d100      	bne.n	80025a2 <memcpy+0xa>
 80025a0:	bd10      	pop	{r4, pc}
 80025a2:	5ccc      	ldrb	r4, [r1, r3]
 80025a4:	54c4      	strb	r4, [r0, r3]
 80025a6:	3301      	adds	r3, #1
 80025a8:	e7f8      	b.n	800259c <memcpy+0x4>

080025aa <memset>:
 80025aa:	0003      	movs	r3, r0
 80025ac:	1812      	adds	r2, r2, r0
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d100      	bne.n	80025b4 <memset+0xa>
 80025b2:	4770      	bx	lr
 80025b4:	7019      	strb	r1, [r3, #0]
 80025b6:	3301      	adds	r3, #1
 80025b8:	e7f9      	b.n	80025ae <memset+0x4>
	...

080025bc <_init>:
 80025bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025be:	46c0      	nop			; (mov r8, r8)
 80025c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80025c2:	bc08      	pop	{r3}
 80025c4:	469e      	mov	lr, r3
 80025c6:	4770      	bx	lr

080025c8 <_fini>:
 80025c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025ca:	46c0      	nop			; (mov r8, r8)
 80025cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80025ce:	bc08      	pop	{r3}
 80025d0:	469e      	mov	lr, r3
 80025d2:	4770      	bx	lr
